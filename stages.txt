[{"_id": "6781cddd8402090cd8fff5cb", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/Medical-Equipment-Suppliers.csv", "in": [], "out": ["6781cddd8402090cd8fff5cc"], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "Medical-Equipment-Suppliers", "comment": "", "pipeline_id": "6781cddc8402090cd8fff5c8", "sub_type": "HDFS", "stage_type": "source", "stage_attributes": {"url": "/FileStore/platform/uploadedSourceFiles/Medical-Equipment-Suppliers.csv", "filename": "Medical-Equipment-Suppliers.csv", "delimiter": ",", "file_type": "Delimeted", "dbfs_token": "", "dbfs_domain": "", "is_header": "Use Header Line", "domain": "http://172.31.59.158", "port": "40070", "dirPath": "/FileStore/platform", "server_url": "/nexusMax/NexusMaxPlatform/uploads/platform/"}, "status": "new", "position": {"x": -80, "y": 160}, "shape_attributes": {"image": {"refWidth": "100%", "refHeight": "100%", "xlinkHref": "assets/svg/source/hdfs-source.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 14, "fill": "#333333", "type": "source", "text": "Medical-Equipment-Suppliers", "slug": "hdfs", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}, "_id": "6781cddd8402090cd8fff5cb", "dbValues": {"url": "/FileStore/platform/uploadedSourceFiles/Medical-Equipment-Suppliers.csv", "filename": "Medical-Equipment-Suppliers.csv", "delimiter": ",", "file_type": "Delimeted", "dbfs_token": "", "dbfs_domain": "", "is_header": "Use Header Line", "domain": "http://172.31.59.158", "port": "40070", "dirPath": "/FileStore/platform", "server_url": "/nexusMax/NexusMaxPlatform/uploads/platform/"}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"inherited": true, "checked": true, "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": 0}, {"inherited": true, "checked": true, "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "participationbegindate", "alias": "participationbegindate", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "businessname", "alias": "businessname", "type": "String", "position": 3}, {"inherited": true, "checked": true, "field": "practicename", "alias": "practicename", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "practiceaddress1", "alias": "practiceaddress1", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "practiceaddress2", "alias": "practiceaddress2", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "practicecity", "alias": "practicecity", "type": "String", "position": 7}, {"inherited": true, "checked": true, "field": "practicestate", "alias": "practicestate", "type": "String", "position": 8}, {"inherited": true, "checked": true, "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": 9}, {"inherited": true, "checked": true, "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": 10}, {"inherited": true, "checked": true, "field": "specialitieslist", "alias": "specialitieslist", "type": "String", "position": 11}, {"inherited": true, "checked": true, "field": "providertypelist", "alias": "providertypelist", "type": "String", "position": 12}, {"inherited": true, "checked": true, "field": "supplieslist", "alias": "supplieslist", "type": "String", "position": 13}, {"inherited": true, "checked": true, "field": "latitude", "alias": "latitude", "type": "real", "position": 14}, {"inherited": true, "checked": true, "field": "longitude", "alias": "longitude", "type": "real", "position": 15}, {"inherited": true, "checked": true, "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": 16}], "actual_schema": [{"inherited": true, "checked": true, "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": 0}, {"inherited": true, "checked": true, "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "participationbegindate", "alias": "participationbegindate", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "businessname", "alias": "businessname", "type": "String", "position": 3}, {"inherited": true, "checked": true, "field": "practicename", "alias": "practicename", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "practiceaddress1", "alias": "practiceaddress1", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "practiceaddress2", "alias": "practiceaddress2", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "practicecity", "alias": "practicecity", "type": "String", "position": 7}, {"inherited": true, "checked": true, "field": "practicestate", "alias": "practicestate", "type": "String", "position": 8}, {"inherited": true, "checked": true, "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": 9}, {"inherited": true, "checked": true, "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": 10}, {"inherited": true, "checked": true, "field": "specialitieslist", "alias": "specialitieslist", "type": "String", "position": 11}, {"inherited": true, "checked": true, "field": "providertypelist", "alias": "providertypelist", "type": "String", "position": 12}, {"inherited": true, "checked": true, "field": "supplieslist", "alias": "supplieslist", "type": "String", "position": 13}, {"inherited": true, "checked": true, "field": "latitude", "alias": "latitude", "type": "real", "position": 14}, {"inherited": true, "checked": true, "field": "longitude", "alias": "longitude", "type": "real", "position": 15}, {"inherited": true, "checked": true, "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": 16}], "selected_schema": [], "created_at": "2025-01-11 01:48:13.005000", "joinSchema": [], "updated_at": "2025-01-16 03:02:01.951000", "__v": 0, "sampleData": [{"provider_id": 34358738, "acceptsassignement": true, "participationbegindate": 1704758400000, "businessname": "BRONX HEALTHPLUS RX INC", "practicename": "BRONX HEALTHPLUS RX INC", "practiceaddress1": "582 E 187TH ST", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104586765, "telephonenumber": 7186844360, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.8556697103, "longitude": -73.8880333462, "is_contracted_for_cba": false}, {"provider_id": 23280337, "acceptsassignement": true, "participationbegindate": 1701907200000, "businessname": "NEB DOCTORS OF WESTERN PENNSYLVANIA LLC", "practicename": "NEB DOCTORS OF WESTERN PENNSYLVANIA", "practiceaddress1": "850 BOYCE RD", "practiceaddress2": "STE 5", "practicecity": "BRIDGEVILLE", "practicestate": "PA", "practicezip9code": 150171541, "telephonenumber": 4126533750, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Nebulizer Equipment and/or Supplies", "latitude": 40.3282190069, "longitude": -80.1256620419, "is_contracted_for_cba": false}, {"provider_id": 23280361, "acceptsassignement": true, "participationbegindate": 1701734400000, "businessname": "SEARCY RX LLC", "practicename": "MEDICAL CENTER PHARMACY", "practiceaddress1": "2900 HAWKINS DR", "practiceaddress2": null, "practicecity": "SEARCY", "practicestate": "AR", "practicezip9code": 72143, "telephonenumber": 5012683311, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs", "latitude": 35.2523289226, "longitude": -91.7035943697, "is_contracted_for_cba": false}, {"provider_id": 20420801, "acceptsassignement": true, "participationbegindate": 1701302400000, "businessname": "JADD PHARMACY CORP", "practicename": "ROCK HILL PHARMACY", "practiceaddress1": "253 ROCK HILL DR", "practiceaddress2": null, "practicecity": "ROCK HILL", "practicestate": "NY", "practicezip9code": 127756620, "telephonenumber": 8457911515, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 41.62404, "longitude": -74.59359, "is_contracted_for_cba": false}, {"provider_id": 20303219, "acceptsassignement": false, "participationbegindate": 1701216000000, "businessname": "SNEDS PEDORTHICS LLC", "practicename": "SNEDS PEDORTHIC LLC", "practiceaddress1": "336 THOMPSON RD", "practiceaddress2": "STE 4", "practicecity": "WEBSTER", "practicestate": "MA", "practicezip9code": 15701586, "telephonenumber": 5084617511, "specialitieslist": null, "providertypelist": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 42.03648, "longitude": -71.85558, "is_contracted_for_cba": false}, {"provider_id": 20507753, "acceptsassignement": true, "participationbegindate": 1701129600000, "businessname": "ROCHESTER HOME INFUSION INC", "practicename": "ROCHESTER HOME INFUSION", "practiceaddress1": "221 1ST AVE SW", "practiceaddress2": "SUITE 105", "practicecity": "ROCHESTER", "practicestate": "MN", "practicezip9code": 559023107, "telephonenumber": 5073160001, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 44.02133, "longitude": -92.46463, "is_contracted_for_cba": false}, {"provider_id": 23280469, "acceptsassignement": true, "participationbegindate": 1700438400000, "businessname": "HEAL MEDICAL SUPPLY LLC", "practicename": "HEAL MEDICAL SUPPLY LLC", "practiceaddress1": "17541 17TH ST", "practiceaddress2": "STE 202", "practicecity": "TUSTIN", "practicestate": "CA", "practicezip9code": 927801984, "telephonenumber": 6575002023, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Pneumatic Compression Devices and/or Supplies|Ultraviolet Light Devices and/or Supplies|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 33.7601450103, "longitude": -117.8262130347, "is_contracted_for_cba": false}, {"provider_id": 23280481, "acceptsassignement": true, "participationbegindate": 1700179200000, "businessname": "SHIV HARI RX INC", "practicename": "SHIV HARI RX INC", "practiceaddress1": "255B E 165TH ST", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104566057, "telephonenumber": 7185370365, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.8295859819, "longitude": -73.9168416122, "is_contracted_for_cba": false}, {"provider_id": 23280493, "acceptsassignement": true, "participationbegindate": 1700092800000, "businessname": "MR PHARMACIST LLC", "practicename": "MR PHARMACIST LLC", "practiceaddress1": "3552 E TREMONT AVE", "practiceaddress2": "STORE #2", "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104652059, "telephonenumber": 3472935741, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.8299095234, "longitude": -73.82573988, "is_contracted_for_cba": false}, {"provider_id": 20303285, "acceptsassignement": true, "participationbegindate": 1699920000000, "businessname": "BOSTON DME COMPANY LLC", "practicename": "BOSTON DME COMPANY LLC", "practiceaddress1": "67 MAPLEWOOD ST", "practiceaddress2": "STE 120", "practicecity": "MALDEN", "practicestate": "MA", "practicezip9code": 21484377, "telephonenumber": 8338331721, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 42.43129, "longitude": -71.04586, "is_contracted_for_cba": false}, {"provider_id": 23280199, "acceptsassignement": true, "participationbegindate": 1704326400000, "businessname": "VIVITAL, INC.", "practicename": "VIVITAL, INC.", "practiceaddress1": "1450 N TUSTIN AVE", "practiceaddress2": "STE 150", "practicecity": "SANTA ANA", "practicestate": "CA", "practicezip9code": 927058653, "telephonenumber": 6572358255, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "latitude": 33.7576430122, "longitude": -117.8347530206, "is_contracted_for_cba": false}, {"provider_id": 20680415, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #760", "practiceaddress1": "760 PRENTICE ST", "practiceaddress2": null, "practicecity": "GRANITE FALLS", "practicestate": "MN", "practicezip9code": 562411541, "telephonenumber": 3205642339, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 44.8107, "longitude": -95.53813, "is_contracted_for_cba": false}, {"provider_id": 20680553, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #752", "practiceaddress1": "211 SOUTH MAIN STREET", "practiceaddress2": null, "practicecity": "MAHNOMEN", "practicestate": "MN", "practicezip9code": 565570457, "telephonenumber": 2189352525, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47.31371, "longitude": -95.96873, "is_contracted_for_cba": false}, {"provider_id": 23280547, "acceptsassignement": true, "participationbegindate": 1699401600000, "businessname": "BLOOMING LIGHT RX INC", "practicename": "BLOOMING LIGHT RX INC", "practiceaddress1": "3907 PRINCE ST", "practiceaddress2": "STE 1B", "practicecity": "FLUSHING", "practicestate": "NY", "practicezip9code": 113545321, "telephonenumber": 9179832638, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7593726231, "longitude": -73.8320351922, "is_contracted_for_cba": false}, {"provider_id": 20347331, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "SOUTH BROWARD HOSPITAL DISTRICT", "practicename": "MEMORIAL REGIONAL HOSPITAL SOUTH PH", "practiceaddress1": "777 S DOUGLAS RD", "practiceaddress2": null, "practicecity": "PEMBROKE PINES", "practicestate": "FL", "practicezip9code": 330251353, "telephonenumber": 9545185675, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 26.00298, "longitude": -80.17975, "is_contracted_for_cba": false}, {"provider_id": 20680463, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #738", "practiceaddress1": "209 WASHINGTON ST", "practiceaddress2": null, "practicecity": "BRAINERD", "practicestate": "MN", "practicezip9code": 564013393, "telephonenumber": 2188293529, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 46.35822, "longitude": -94.20591, "is_contracted_for_cba": false}, {"provider_id": 20412839, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "1721 MILLER ST", "practiceaddress2": null, "practicecity": "LA CROSSE", "practicestate": "WI", "practicezip9code": 546015217, "telephonenumber": 6087846500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.79506, "longitude": -91.25194, "is_contracted_for_cba": false}, {"provider_id": 20680481, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #734", "practiceaddress1": "1484 W LINCOLN AVE", "practiceaddress2": null, "practicecity": "FERGUS FALLS", "practicestate": "MN", "practicezip9code": 565371032, "telephonenumber": 2187365565, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 46.28421, "longitude": -96.10038, "is_contracted_for_cba": false}, {"provider_id": 20680601, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #759", "practiceaddress1": "319 W MAIN ST", "practiceaddress2": null, "practicecity": "ADA", "practicestate": "MN", "practicezip9code": 565101251, "telephonenumber": 2187842434, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47.29911, "longitude": -96.51676, "is_contracted_for_cba": false}, {"provider_id": 21611367, "acceptsassignement": false, "participationbegindate": 1704067200000, "businessname": "LIBERTY RX INC", "practicename": "LIBERTY RX INC", "practiceaddress1": "12704 LIBERTY AVE", "practiceaddress2": null, "practicecity": "JAMAICA", "practicestate": "NY", "practicezip9code": 114192216, "telephonenumber": 7188802053, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.6886337608, "longitude": -73.8176484098, "is_contracted_for_cba": false}, {"provider_id": 20412827, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "3184 LONDON RD", "practiceaddress2": null, "practicecity": "EAU CLAIRE", "practicestate": "WI", "practicezip9code": 547016834, "telephonenumber": 7158323780, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44.78695, "longitude": -91.46303, "is_contracted_for_cba": false}, {"provider_id": 20578151, "acceptsassignement": false, "participationbegindate": 1699401600000, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "115 JULIAD CT", "practiceaddress2": "STE 111", "practicecity": "FREDERICKSBURG", "practicestate": "VA", "practicezip9code": 224061100, "telephonenumber": 5403483033, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "latitude": 38.35985, "longitude": -77.51268, "is_contracted_for_cba": false}, {"provider_id": 23280595, "acceptsassignement": true, "participationbegindate": 1698969600000, "businessname": "INFUSIONS SERVICES OF LOUISIANA LLC", "practicename": "VITAL CARE OF LAFAYETTE", "practiceaddress1": "101 LA RUE FRANCE", "practiceaddress2": "STE 100", "practicecity": "LAFAYETTE", "practicestate": "LA", "practicezip9code": 705083138, "telephonenumber": 3379018880, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 30.1948690089, "longitude": -92.0147239938, "is_contracted_for_cba": false}, {"provider_id": 20510897, "acceptsassignement": false, "participationbegindate": 1698710400000, "businessname": "PHARMSCRIPT OF FLORIDA LLC", "practicename": "PHARMSCRIPT OF FLORIDA LLC", "practiceaddress1": "15491 SW 12TH ST", "practiceaddress2": "STE 400", "practicecity": "SUNRISE", "practicestate": "FL", "practicezip9code": 333261994, "telephonenumber": 9083891818, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 26.10421, "longitude": -80.35486, "is_contracted_for_cba": false}, {"provider_id": 20339039, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10265", "practiceaddress1": "2421 SAM HOUSTON AVE", "practiceaddress2": null, "practicecity": "HUNTSVILLE", "practicestate": "TX", "practicezip9code": 773405862, "telephonenumber": 9364399038, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.71426, "longitude": -95.55097, "is_contracted_for_cba": false}, {"provider_id": 20339033, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10544", "practiceaddress1": "5902 FM 1463 RD", "practiceaddress2": null, "practicecity": "KATY", "practicestate": "TX", "practicezip9code": 774945647, "telephonenumber": 2812327014, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.76275, "longitude": -95.81303, "is_contracted_for_cba": false}, {"provider_id": 20315759, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01020", "practiceaddress1": "1484 RUBEN TORRES SR BLVD", "practiceaddress2": null, "practicecity": "BROWNSVILLE", "practicestate": "TX", "practicezip9code": 785211537, "telephonenumber": 9565410167, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 25.95117, "longitude": -97.49635, "is_contracted_for_cba": false}, {"provider_id": 20338865, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 02282", "practiceaddress1": "703 GALLIVAN BLVD", "practiceaddress2": null, "practicecity": "DORCHESTER", "practicestate": "MA", "practicezip9code": 21245423, "telephonenumber": 6172878292, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.28339, "longitude": -71.04835, "is_contracted_for_cba": false}, {"provider_id": 20338655, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01247", "practiceaddress1": "2992 CRANBERRY HWY", "practiceaddress2": null, "practicecity": "EAST WAREHAM", "practicestate": "MA", "practicezip9code": 25381336, "telephonenumber": 5082953880, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.75998, "longitude": -70.66765, "is_contracted_for_cba": false}, {"provider_id": 20339729, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00915", "practiceaddress1": "19 DODGE ST", "practiceaddress2": "STE A", "practicecity": "BEVERLY", "practicestate": "MA", "practicezip9code": 19151705, "telephonenumber": 9789270060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.57611, "longitude": -70.89147, "is_contracted_for_cba": false}, {"provider_id": 20339711, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02325", "practiceaddress1": "1025 CENTRAL ST", "practiceaddress2": null, "practicecity": "STOUGHTON", "practicestate": "MA", "practicezip9code": 20724401, "telephonenumber": 7813416114, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.13553, "longitude": -71.10167, "is_contracted_for_cba": false}, {"provider_id": 20339735, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00946", "practiceaddress1": "323 N MAIN ST", "practiceaddress2": null, "practicecity": "UXBRIDGE", "practicestate": "MA", "practicezip9code": 15691757, "telephonenumber": 5082782456, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.0909, "longitude": -71.64283, "is_contracted_for_cba": false}, {"provider_id": 20335241, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 07170", "practiceaddress1": "1229 W IL ROUTE 134", "practiceaddress2": null, "practicecity": "ROUND LAKE", "practicestate": "IL", "practicezip9code": 600739725, "telephonenumber": 8477406795, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.36304, "longitude": -88.11244, "is_contracted_for_cba": false}, {"provider_id": 20338997, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10324", "practiceaddress1": "6420 GASTON AVE", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752144022, "telephonenumber": 4693340758, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.81524, "longitude": -96.75148, "is_contracted_for_cba": false}, {"provider_id": 20315537, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01875", "practiceaddress1": "414 UNION STREET", "practiceaddress2": null, "practicecity": "ASHLAND", "practicestate": "MA", "practicezip9code": 17212154, "telephonenumber": 5088817606, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.25558, "longitude": -71.46559, "is_contracted_for_cba": false}, {"provider_id": 20314637, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10665", "practiceaddress1": "1555 E RENNER RD", "practiceaddress2": null, "practicecity": "RICHARDSON", "practicestate": "TX", "practicezip9code": 750822299, "telephonenumber": 9722381395, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.99736, "longitude": -96.69384, "is_contracted_for_cba": false}, {"provider_id": 20315111, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 17604", "practiceaddress1": "460 S VANCE ST", "practiceaddress2": null, "practicecity": "LAKEWOOD", "practicestate": "CO", "practicezip9code": 802263305, "telephonenumber": 3032097750, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.70879, "longitude": -105.07966, "is_contracted_for_cba": false}, {"provider_id": 20314643, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10601", "practiceaddress1": "655 MOUNT AUBURN STREET", "practiceaddress2": null, "practicecity": "WATERTOWN", "practicestate": "MA", "practicezip9code": 2472, "telephonenumber": 6177440842, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.3716, "longitude": -71.15735, "is_contracted_for_cba": false}, {"provider_id": 20315081, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10906", "practiceaddress1": "22125 CUMBERLAND RIDGE DR", "practiceaddress2": null, "practicecity": "CYPRESS", "practicestate": "TX", "practicezip9code": 774334074, "telephonenumber": 2817581031, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.93262, "longitude": -95.72533, "is_contracted_for_cba": false}, {"provider_id": 20314841, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10635", "practiceaddress1": "476 W I-30", "practiceaddress2": null, "practicecity": "ROYSE CITY", "practicestate": "TX", "practicezip9code": 751899706, "telephonenumber": 9726352470, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.88657, "longitude": -96.34084, "is_contracted_for_cba": false}, {"provider_id": 20314715, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10580", "practiceaddress1": "9884 HWY 242", "practiceaddress2": null, "practicecity": "CONROE", "practicestate": "TX", "practicezip9code": 77385, "telephonenumber": 9362735444, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.20838, "longitude": -95.42853, "is_contracted_for_cba": false}, {"provider_id": 20335163, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #07020", "practiceaddress1": "1701 FORT JESSE RD", "practiceaddress2": null, "practicecity": "NORMAL", "practicestate": "IL", "practicezip9code": 617612285, "telephonenumber": 3094521370, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.51763, "longitude": -88.95117, "is_contracted_for_cba": false}, {"provider_id": 20314757, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10667", "practiceaddress1": "111 E HIDALGO AVE", "practiceaddress2": null, "practicecity": "RAYMONDVILLE", "practicestate": "TX", "practicezip9code": 78580, "telephonenumber": 9566892830, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 26.48199, "longitude": -97.78209, "is_contracted_for_cba": false}, {"provider_id": 20317013, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01184", "practiceaddress1": "MARKET BASKET CENTER RT 1 NEWBURYPORT TURNPIKE", "practiceaddress2": null, "practicecity": "ROWLEY", "practicestate": "MA", "practicezip9code": 19699801, "telephonenumber": 9789482575, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.71576, "longitude": -70.87893, "is_contracted_for_cba": false}, {"provider_id": 20316989, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00929", "practiceaddress1": "272 E CENTRAL ST", "practiceaddress2": null, "practicecity": "FRANKLIN", "practicestate": "MA", "practicezip9code": 20381319, "telephonenumber": 5085280597, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.08031, "longitude": -71.38542, "is_contracted_for_cba": false}, {"provider_id": 20315669, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 07232", "practiceaddress1": "689 DEPOT ST", "practiceaddress2": null, "practicecity": "NORTH EASTON", "practicestate": "MA", "practicezip9code": 23562703, "telephonenumber": 5082380604, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.02632, "longitude": -71.11748, "is_contracted_for_cba": false}, {"provider_id": 20315261, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01865", "practiceaddress1": "155 CENTER ST", "practiceaddress2": null, "practicecity": "PEMBROKE", "practicestate": "MA", "practicezip9code": 23592654, "telephonenumber": 7812933113, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.06809, "longitude": -70.81013, "is_contracted_for_cba": false}, {"provider_id": 20337131, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #07962", "practiceaddress1": "5685 BALBOA AVE", "practiceaddress2": null, "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921112705, "telephonenumber": 8582792860, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.81998, "longitude": -117.17947, "is_contracted_for_cba": false}, {"provider_id": 20337095, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09146", "practiceaddress1": "575 S CITRUS AVE", "practiceaddress2": null, "practicecity": "COVINA", "practicestate": "CA", "practicezip9code": 917232930, "telephonenumber": 6263310036, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.07949, "longitude": -117.89023, "is_contracted_for_cba": false}, {"provider_id": 20336915, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY 09153", "practiceaddress1": "42520 BOB HOPE DRIVE", "practiceaddress2": null, "practicecity": "RANCHO MIRAGE", "practicestate": "CA", "practicezip9code": 922704471, "telephonenumber": 7605685651, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.73907, "longitude": -116.40808, "is_contracted_for_cba": false}, {"provider_id": 20340527, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01023", "practiceaddress1": "34 CAMBRIDGE ST", "practiceaddress2": "SPACE 160", "practicecity": "BURLINGTON", "practicestate": "MA", "practicezip9code": 18034611, "telephonenumber": 7812733645, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.49451, "longitude": -71.19444, "is_contracted_for_cba": false}, {"provider_id": 20340461, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY# 08441", "practiceaddress1": "301 CENTRAL ST", "practiceaddress2": null, "practicecity": "WINCHENDON", "practicestate": "MA", "practicezip9code": 14751402, "telephonenumber": 9782973792, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.68618, "longitude": -72.04417, "is_contracted_for_cba": false}, {"provider_id": 20340587, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #04820", "practiceaddress1": "100 N DUMAS AVE", "practiceaddress2": null, "practicecity": "DUMAS", "practicestate": "TX", "practicezip9code": 790292432, "telephonenumber": 8069352387, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.86667, "longitude": -101.97311, "is_contracted_for_cba": false}, {"provider_id": 20339303, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00674", "practiceaddress1": "980-986 GREAT PLAIN AVE", "practiceaddress2": null, "practicecity": "NEEDHAM", "practicestate": "MA", "practicezip9code": 24922508, "telephonenumber": 7814492270, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.28033, "longitude": -71.23685, "is_contracted_for_cba": false}, {"provider_id": 20337359, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09809", "practiceaddress1": "4959 MARCONI AVE", "practiceaddress2": null, "practicecity": "CARMICHAEL", "practicestate": "CA", "practicezip9code": 956084112, "telephonenumber": 9164851144, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.61748, "longitude": -121.34814, "is_contracted_for_cba": false}, {"provider_id": 20308487, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MARYLAND CVS PHARMACY LLC.", "practicename": "CVS PHARMACY # 10606", "practiceaddress1": "7955 BAYSIDE RD", "practiceaddress2": null, "practicecity": "CHESAPEAKE BEACH", "practicestate": "MD", "practicezip9code": 207323112, "telephonenumber": 4102572050, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.69006, "longitude": -76.53575, "is_contracted_for_cba": false}, {"provider_id": 20308691, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05304", "practiceaddress1": "4572 HIGHWAY 1", "practiceaddress2": null, "practicecity": "RACELAND", "practicestate": "LA", "practicezip9code": 703942772, "telephonenumber": 9855373296, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.70525, "longitude": -90.56783, "is_contracted_for_cba": false}, {"provider_id": 23279887, "acceptsassignement": false, "participationbegindate": 1714608000000, "businessname": "PHARMCARE USA OF EL PASO LLC", "practicename": "PHARMCARE USA OF EL PASO", "practiceaddress1": "10350 MONTANA AVE", "practiceaddress2": "SUITE A", "practicecity": "EL PASO", "practicestate": "TX", "practicezip9code": 799251602, "telephonenumber": 9154551167, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 31.7966789947, "longitude": -106.3381129998, "is_contracted_for_cba": false}, {"provider_id": 34358414, "acceptsassignement": true, "participationbegindate": 1714435200000, "businessname": "WECARE DME SUPPLIES CORP", "practicename": "WECARE DME SUPPLIES", "practiceaddress1": "7111 HARWIN DR", "practiceaddress2": "STE 175", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770362132, "telephonenumber": 7133895200, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings", "latitude": 29.7176960202, "longitude": -95.5080350281, "is_contracted_for_cba": false}, {"provider_id": 20459411, "acceptsassignement": true, "participationbegindate": 1714348800000, "businessname": "VALLEY PHARMACY & DME OF EAST ALABAMA INC", "practicename": "VALLEY PHARMACY", "practiceaddress1": "4103 20TH AVE", "practiceaddress2": null, "practicecity": "VALLEY", "practicestate": "AL", "practicezip9code": 368543448, "telephonenumber": 3347562037, "specialitieslist": "Orthotic Personnel|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Diabetic Shoes and Inserts", "latitude": 32.79123, "longitude": -85.15705, "is_contracted_for_cba": false}, {"provider_id": 20683847, "acceptsassignement": true, "participationbegindate": 1713916800000, "businessname": "PATHWAY MEDICAL SUPPLY", "practicename": "PATHWAY MEDICAL SUPPLY", "practiceaddress1": "525 N AZUSA AVE", "practiceaddress2": "STE 111", "practicecity": "LA PUENTE", "practicestate": "CA", "practicezip9code": 917444261, "telephonenumber": 3108018575, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 34.0268909903, "longitude": -117.9173880247, "is_contracted_for_cba": false}, {"provider_id": 23280229, "acceptsassignement": true, "participationbegindate": 1713398400000, "businessname": "KABAFUSION OH, LLC", "practicename": "KABAFUSION OH, LLC", "practiceaddress1": "4153 ARLINGATE PLAZA", "practiceaddress2": "SUITES 4153 & 4157", "practicecity": "COLUMBUS", "practicestate": "OH", "practicezip9code": 432284115, "telephonenumber": 8773784063, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Infusion Drugs|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Urological Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 39.9885150138, "longitude": -83.1164270188, "is_contracted_for_cba": false}, {"provider_id": 23278987, "acceptsassignement": true, "participationbegindate": 1713312000000, "businessname": "IRIDIUM SPECIALTY PHARMACY PLLC", "practicename": "IRIDIUM SPECIALTY PHARMACY", "practiceaddress1": "2240 NAVIGATION BLVD", "practiceaddress2": "STE 200-B", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770031564, "telephonenumber": 7133247235, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "External Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies", "latitude": 29.7578579931, "longitude": -95.34736702, "is_contracted_for_cba": false}, {"provider_id": 23279083, "acceptsassignement": true, "participationbegindate": 1712102400000, "businessname": "108 PHARMACY INC", "practicename": "108 PHARMACY INC", "practiceaddress1": "4502 108TH ST", "practiceaddress2": null, "practicecity": "CORONA", "practicestate": "NY", "practicezip9code": 113682917, "telephonenumber": 7188471982, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7477796547, "longitude": -73.8574176067, "is_contracted_for_cba": false}, {"provider_id": 20328287, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02408", "practiceaddress1": "802 LANDSDOWNE AVE", "practiceaddress2": null, "practicecity": "DREXEL HILL", "practicestate": "PA", "practicezip9code": 190261526, "telephonenumber": 6108536018, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.95982, "longitude": -75.28809, "is_contracted_for_cba": false}, {"provider_id": 20328707, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05098", "practiceaddress1": "330 W COLUMBUS AVE", "practiceaddress2": null, "practicecity": "CORRY", "practicestate": "PA", "practicezip9code": 16407, "telephonenumber": 8146642617, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.9346, "longitude": -79.65726, "is_contracted_for_cba": false}, {"provider_id": 20328851, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 02131", "practiceaddress1": "3943 HULMEVILLE ROAD", "practiceaddress2": null, "practicecity": "BENSALEM", "practicestate": "PA", "practicezip9code": 19020, "telephonenumber": 2152447002, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.10923, "longitude": -74.93623, "is_contracted_for_cba": false}, {"provider_id": 20328809, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07132", "practiceaddress1": "3015 LINCOLN HWY", "practiceaddress2": null, "practicecity": "THORNDALE", "practicestate": "PA", "practicezip9code": 193721114, "telephonenumber": 6103807180, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.99364, "longitude": -75.76287, "is_contracted_for_cba": false}, {"provider_id": 20327261, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02880", "practiceaddress1": "901 BRISTOL PIKE", "practiceaddress2": null, "practicecity": "CROYDON", "practicestate": "PA", "practicezip9code": 190216267, "telephonenumber": 2157856345, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.09421, "longitude": -74.90529, "is_contracted_for_cba": false}, {"provider_id": 20327297, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02986", "practiceaddress1": "7065 LINCOLN DR", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191192541, "telephonenumber": 2152421869, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.05284, "longitude": -75.19324, "is_contracted_for_cba": false}, {"provider_id": 20329343, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "WOODWARD DETROIT CVS LLC", "practiceaddress1": "3250 US HIGHWAY 41 W", "practiceaddress2": null, "practicecity": "MARQUETTE", "practicestate": "MI", "practicezip9code": 498559483, "telephonenumber": 9062260095, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 46.51718, "longitude": -87.45015, "is_contracted_for_cba": false}, {"provider_id": 20329337, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #16128", "practiceaddress1": "2772 TITTABAWASSEE RD", "practiceaddress2": null, "practicecity": "SAGINAW", "practicestate": "MI", "practicezip9code": 486049433, "telephonenumber": 9897935701, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.4801, "longitude": -83.97107, "is_contracted_for_cba": false}, {"provider_id": 20327285, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05011", "practiceaddress1": "9 MAIN ST", "practiceaddress2": null, "practicecity": "WELLSBORO", "practicestate": "PA", "practicezip9code": 169011601, "telephonenumber": 5707244303, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.74983, "longitude": -77.29878, "is_contracted_for_cba": false}, {"provider_id": 20329427, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #17126", "practiceaddress1": "3100 FAIRLANE DR", "practiceaddress2": null, "practicecity": "ALLEN PARK", "practicestate": "MI", "practicezip9code": 481012870, "telephonenumber": 3137680065, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.27383, "longitude": -83.20623, "is_contracted_for_cba": false}, {"provider_id": 20308187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03730", "practiceaddress1": "3700 S CARROLLTON AVE", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701184708, "telephonenumber": 5044881110, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.96552, "longitude": -90.11049, "is_contracted_for_cba": false}, {"provider_id": 20521823, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #409", "practiceaddress1": "100 OLD ORCHARD SQ", "practiceaddress2": null, "practicecity": "ELLIJAY", "practicestate": "GA", "practicezip9code": 305408172, "telephonenumber": 7066357176, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.67582, "longitude": -84.47832, "is_contracted_for_cba": false}, {"provider_id": 20521277, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #451", "practiceaddress1": "1502 ATLANTA HWY", "practiceaddress2": null, "practicecity": "AUBURN", "practicestate": "GA", "practicezip9code": 300113648, "telephonenumber": 7702775284, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0101, "longitude": -83.83832, "is_contracted_for_cba": false}, {"provider_id": 20521871, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #457", "practiceaddress1": "1735 ZEBULON RD", "practiceaddress2": null, "practicecity": "GRIFFIN", "practicestate": "GA", "practicezip9code": 302235103, "telephonenumber": 7702285815, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.1927, "longitude": -84.28711, "is_contracted_for_cba": false}, {"provider_id": 20521775, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #498", "practiceaddress1": "631 VETERANS PKWY", "practiceaddress2": null, "practicecity": "BARNESVILLE", "practicestate": "GA", "practicezip9code": 302041555, "telephonenumber": 7703586815, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.04484, "longitude": -84.17252, "is_contracted_for_cba": false}, {"provider_id": 20521829, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #080", "practiceaddress1": "225 CARL ELLER RD", "practiceaddress2": null, "practicecity": "MARS HILL", "practicestate": "NC", "practicezip9code": 287546004, "telephonenumber": 8286809569, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.82508, "longitude": -82.54608, "is_contracted_for_cba": false}, {"provider_id": 20684033, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "EVERFIT MEDICAL INC", "practicename": "EVERFIT MEDICAL INC", "practiceaddress1": "2959 CHEROKEE ST NW", "practiceaddress2": "STE 103C", "practicecity": "KENNESAW", "practicestate": "GA", "practicezip9code": 301446522, "telephonenumber": 4043375542, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Diabetic Shoes and Inserts", "latitude": 34.025804528, "longitude": -84.6112634263, "is_contracted_for_cba": false}, {"provider_id": 20308127, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01939", "practiceaddress1": "1801 JEFFERSON HWY", "practiceaddress2": null, "practicecity": "JEFFERSON", "practicestate": "LA", "practicezip9code": 701212303, "telephonenumber": 5043246632, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.9635, "longitude": -90.14837, "is_contracted_for_cba": false}, {"provider_id": 20308595, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05354", "practiceaddress1": "1624 N BURNSIDE AVE", "practiceaddress2": null, "practicecity": "GONZALES", "practicestate": "LA", "practicezip9code": 707372139, "telephonenumber": 2256447528, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.2446, "longitude": -90.92073, "is_contracted_for_cba": false}, {"provider_id": 20308583, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05374", "practiceaddress1": "14360 WAX RD", "practiceaddress2": null, "practicecity": "BATON ROUGE", "practicestate": "LA", "practicezip9code": 708184279, "telephonenumber": 2252616541, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.54329, "longitude": -91.03076, "is_contracted_for_cba": false}, {"provider_id": 20308571, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05297", "practiceaddress1": "201 N CANAL BLVD", "practiceaddress2": null, "practicecity": "THIBODAUX", "practicestate": "LA", "practicezip9code": 703012910, "telephonenumber": 9854465646, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.79782, "longitude": -90.81805, "is_contracted_for_cba": false}, {"provider_id": 23279173, "acceptsassignement": false, "participationbegindate": 1710979200000, "businessname": "PRN MEDICAL SUPPLY INC", "practicename": "PRN MEDICAL SUPPLY INC", "practiceaddress1": "9898 BISSONNET ST", "practiceaddress2": "STE 277", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770368025, "telephonenumber": 3469339432, "specialitieslist": "Certified Other", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Facial Prostheses|Neurostimulators and/or Supplies|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Nebulizer Equipment and/or Supplies|Respiratory Assist Devices|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 29.6758020109, "longitude": -95.5531229617, "is_contracted_for_cba": false}, {"provider_id": 23279179, "acceptsassignement": false, "participationbegindate": 1710892800000, "businessname": "HEALING CACTUS RX INC", "practicename": "HEALING CACTUS RX", "practiceaddress1": "12633 N CAVE CREEK RD", "practiceaddress2": "# 102", "practicecity": "PHOENIX", "practicestate": "AZ", "practicezip9code": 850225858, "telephonenumber": 4809563904, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33.6017126234, "longitude": -112.0364930444, "is_contracted_for_cba": false}, {"provider_id": 23279185, "acceptsassignement": true, "participationbegindate": 1710806400000, "businessname": "ADDICKS MEDICAL SUPPLY LLC", "practicename": "ADDICKS MEDICAL SUPPLY LLC", "practiceaddress1": "2735 VILLA CREEK DR", "practiceaddress2": "STE A-290", "practicecity": "FARMERS BRANCH", "practicestate": "TX", "practicezip9code": 752347454, "telephonenumber": 4692904040, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 32.9123740098, "longitude": -96.8854930237, "is_contracted_for_cba": false}, {"provider_id": 20521355, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #206", "practiceaddress1": "1500 GEER HWY", "practiceaddress2": null, "practicecity": "TRAVELERS REST", "practicestate": "SC", "practicezip9code": 296909204, "telephonenumber": 8648344409, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.99495, "longitude": -82.4714, "is_contracted_for_cba": false}, {"provider_id": 20521493, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #39", "practiceaddress1": "4396 HIGHWAY 24", "practiceaddress2": null, "practicecity": "ANDERSON", "practicestate": "SC", "practicezip9code": 296265212, "telephonenumber": 8642262398, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.50866, "longitude": -82.74658, "is_contracted_for_cba": false}, {"provider_id": 20521571, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #079", "practiceaddress1": "780 HENDERSONVILLE RD", "practiceaddress2": null, "practicecity": "ASHEVILLE", "practicestate": "NC", "practicezip9code": 288032900, "telephonenumber": 8282777466, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.54477, "longitude": -82.5335, "is_contracted_for_cba": false}, {"provider_id": 23283211, "acceptsassignement": true, "participationbegindate": 1727049600000, "businessname": "LIU SERVICES CORP", "practicename": "LIU SERVICES CORP", "practiceaddress1": "1850 SW 8TH ST", "practiceaddress2": "STE 204G", "practicecity": "MIAMI", "practicestate": "FL", "practicezip9code": 331353434, "telephonenumber": 7863913978, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 25.7653741146, "longitude": -80.2254722362, "is_contracted_for_cba": false}, {"provider_id": 24548514, "acceptsassignement": false, "participationbegindate": 1727049600000, "businessname": "WELLCARE HEALTH SOLUTIONS INC", "practicename": "WELLCARE HEALTH SOLUTIONS INC", "practiceaddress1": "2800 W OAKLAND PARK BLVD", "practiceaddress2": "STE 102D", "practicecity": "OAKLAND PARK", "practicestate": "FL", "practicezip9code": 333111312, "telephonenumber": 9543147629, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 26.1649609805, "longitude": -80.1806700417, "is_contracted_for_cba": false}, {"provider_id": 23283205, "acceptsassignement": true, "participationbegindate": 1727049600000, "businessname": "CASO QUALITY EAST CORP", "practicename": "CASO QUALITY EAST CORP", "practiceaddress1": "4471 NW 36TH ST", "practiceaddress2": "STE 233", "practicecity": "MIAMI SPRINGS", "practicestate": "FL", "practicezip9code": 331667289, "telephonenumber": 7863594271, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 25.8085037422, "longitude": -80.2701180243, "is_contracted_for_cba": false}, {"provider_id": 23282941, "acceptsassignement": true, "participationbegindate": 1726444800000, "businessname": "LMT PHARMACY", "practicename": "EVERGREEN PHARMACY", "practiceaddress1": "9475 WARNER AVE", "practiceaddress2": "STE B", "practicecity": "FOUNTAIN VALLEY", "practicestate": "CA", "practicezip9code": 927082814, "telephonenumber": 7144659639, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33.7165040028, "longitude": -117.9637100259, "is_contracted_for_cba": false}, {"provider_id": 20684063, "acceptsassignement": true, "participationbegindate": 1726185600000, "businessname": "A-PLUS MEDICAL SUPPLIES, INC.", "practicename": "A-PLUS MEDICAL SUPPLIES, INC.", "practiceaddress1": "101 S KRAEMER BLVD", "practiceaddress2": "STE 223", "practicecity": "PLACENTIA", "practicestate": "CA", "practicezip9code": 928706110, "telephonenumber": 7142031373, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Off-The-Shelf|Urological Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 33.870235064, "longitude": -117.8636099854, "is_contracted_for_cba": false}, {"provider_id": 23282947, "acceptsassignement": true, "participationbegindate": 1726012800000, "businessname": "QUICKFILL RX INC", "practicename": "QUICKFILL PHARMACY", "practiceaddress1": "18455 BURBANK BLVD", "practiceaddress2": "STE 105", "practicecity": "TARZANA", "practicestate": "CA", "practicezip9code": 913566916, "telephonenumber": 8184574011, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.1725729938, "longitude": -118.5354369593, "is_contracted_for_cba": false}, {"provider_id": 20330243, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #04573", "practiceaddress1": "2650 RICE ST", "practiceaddress2": null, "practicecity": "LITTLE CANADA", "practicestate": "MN", "practicezip9code": 551132201, "telephonenumber": 6514840504, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.02189, "longitude": -93.10597, "is_contracted_for_cba": false}, {"provider_id": 20353535, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #324", "practiceaddress1": "216 WESTLAKE CTR", "practiceaddress2": null, "practicecity": "DALY CITY", "practicestate": "CA", "practicezip9code": 940151430, "telephonenumber": 6507564535, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.70088, "longitude": -122.48536, "is_contracted_for_cba": false}, {"provider_id": 20351075, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3829", "practiceaddress1": "8398 SHELDON RD", "practiceaddress2": null, "practicecity": "TAMPA", "practicestate": "FL", "practicezip9code": 336151609, "telephonenumber": 8138841487, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.02527, "longitude": -82.58315, "is_contracted_for_cba": false}, {"provider_id": 20308655, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05387", "practiceaddress1": "3621 GENERAL DEGAULLE DR", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701146716, "telephonenumber": 5043620700, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.9249, "longitude": -90.022, "is_contracted_for_cba": false}, {"provider_id": 20308895, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16708", "practiceaddress1": "6885 SIEGEN LN", "practiceaddress2": null, "practicecity": "BATON ROUGE", "practicestate": "LA", "practicezip9code": 708094528, "telephonenumber": 2252930652, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.38754, "longitude": -91.06299, "is_contracted_for_cba": false}, {"provider_id": 20310977, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17219", "practiceaddress1": "10302 156TH ST E", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983749321, "telephonenumber": 2536041067, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.11623, "longitude": -122.29085, "is_contracted_for_cba": false}, {"provider_id": 20312093, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17881", "practiceaddress1": "3450 HIGHWAY 190", "practiceaddress2": "STE 2", "practicecity": "MANDEVILLE", "practicestate": "LA", "practicezip9code": 704713196, "telephonenumber": 9853777247, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.39964, "longitude": -90.11563, "is_contracted_for_cba": false}, {"provider_id": 20308619, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05503", "practiceaddress1": "4901 PRYTANIA ST", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701154017, "telephonenumber": 5048916307, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.92466, "longitude": -90.10833, "is_contracted_for_cba": false}, {"provider_id": 20308883, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17441", "practiceaddress1": "3225 LOUISIANA AVE", "practiceaddress2": null, "practicecity": "LAFAYETTE", "practicestate": "LA", "practicezip9code": 705011406, "telephonenumber": 3377697516, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.26155, "longitude": -91.99351, "is_contracted_for_cba": false}, {"provider_id": 20352617, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1131 E SUPERIOR ST", "practiceaddress2": null, "practicecity": "DULUTH", "practicestate": "MN", "practicezip9code": 558022216, "telephonenumber": 2187243060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 46.79794, "longitude": -92.08402, "is_contracted_for_cba": false}, {"provider_id": 20352569, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11630", "practiceaddress1": "6918 HAMILTON AVE", "practiceaddress2": null, "practicecity": "CINCINNATI", "practicestate": "OH", "practicezip9code": 452315212, "telephonenumber": 5139311717, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.218, "longitude": -84.54935, "is_contracted_for_cba": false}, {"provider_id": 20352677, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7177", "practiceaddress1": "705 N PEBBLE BEACH BLVD", "practiceaddress2": null, "practicecity": "SUN CITY CENTER", "practicestate": "FL", "practicezip9code": 335735350, "telephonenumber": 8136348393, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.71301, "longitude": -82.35178, "is_contracted_for_cba": false}, {"provider_id": 20311991, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OKLAHOMA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06222", "practiceaddress1": "1220 N COMMERCE ST", "practiceaddress2": null, "practicecity": "ARDMORE", "practicestate": "OK", "practicezip9code": 734011806, "telephonenumber": 5802231041, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.18808, "longitude": -97.14284, "is_contracted_for_cba": false}, {"provider_id": 20308391, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10108", "practiceaddress1": "5902 READ BLVD", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701272615, "telephonenumber": 5042440969, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.0351, "longitude": -89.97497, "is_contracted_for_cba": false}, {"provider_id": 20353577, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6751", "practiceaddress1": "514 E WINDHORST RD", "practiceaddress2": null, "practicecity": "BRANDON", "practicestate": "FL", "practicezip9code": 335102532, "telephonenumber": 8136572339, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.95976, "longitude": -82.27927, "is_contracted_for_cba": false}, {"provider_id": 20353583, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #01938", "practiceaddress1": "1208 ROYAL PALM BEACH BLVD", "practiceaddress2": null, "practicecity": "ROYAL PALM BEACH", "practicestate": "FL", "practicezip9code": 334111672, "telephonenumber": 5617989048, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.70759, "longitude": -80.22905, "is_contracted_for_cba": false}, {"provider_id": 20352335, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "4673 9TH ST N", "practiceaddress2": null, "practicecity": "NAPLES", "practicestate": "FL", "practicezip9code": 341033004, "telephonenumber": 2396496686, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.20385, "longitude": -81.80028, "is_contracted_for_cba": false}, {"provider_id": 20352353, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4734", "practiceaddress1": "719 S HIGHWAY 19", "practiceaddress2": null, "practicecity": "PALATKA", "practicestate": "FL", "practicezip9code": 321773946, "telephonenumber": 3863286787, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.64208, "longitude": -81.67577, "is_contracted_for_cba": false}, {"provider_id": 20308163, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04752", "practiceaddress1": "1203 WESTBANK EXPY", "practiceaddress2": null, "practicecity": "WESTWEGO", "practicestate": "LA", "practicezip9code": 700944755, "telephonenumber": 5043711061, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.8991, "longitude": -90.13796, "is_contracted_for_cba": false}, {"provider_id": 20305469, "acceptsassignement": true, "participationbegindate": 1693094400000, "businessname": "EUCLID PHARMACY LLC", "practicename": "EUCLID PHARMACY LLC", "practiceaddress1": "206 N EUCLID AVE", "practiceaddress2": null, "practicecity": "BAY CITY", "practicestate": "MI", "practicezip9code": 487062942, "telephonenumber": 9897785001, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 43.60329, "longitude": -83.91499, "is_contracted_for_cba": false}, {"provider_id": 34356980, "acceptsassignement": true, "participationbegindate": 1692576000000, "businessname": "BELPRE HEALTHCARE LLC", "practicename": "BELPRE HEALTHCARE LLC", "practiceaddress1": "812 FARSON ST", "practiceaddress2": null, "practicecity": "BELPRE", "practicestate": "OH", "practicezip9code": 457141010, "telephonenumber": 7407800204, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies", "latitude": 39.2832439948, "longitude": -81.6103229865, "is_contracted_for_cba": false}, {"provider_id": 34357010, "acceptsassignement": false, "participationbegindate": 1692144000000, "businessname": "ROOTS PHARMACY INC", "practicename": "ROOTS PHARMACY INC", "practiceaddress1": "5 NEW HYDE PARK RD", "practiceaddress2": null, "practicecity": "FRANKLIN SQUARE", "practicestate": "NY", "practicezip9code": 110103609, "telephonenumber": 5163028430, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7077669216, "longitude": -73.6760256783, "is_contracted_for_cba": false}, {"provider_id": 34357040, "acceptsassignement": true, "participationbegindate": 1691452800000, "businessname": "PERSONALRX NYC LLC", "practicename": "PERSONALRX NYC LLC", "practiceaddress1": "5369 KINGS HWY", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112036704, "telephonenumber": 8002036282, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.6397686064, "longitude": -73.9255322208, "is_contracted_for_cba": false}, {"provider_id": 34357052, "acceptsassignement": true, "participationbegindate": 1691366400000, "businessname": "MEDS AND BEYOND INC.", "practicename": "MEDS AND BEYOND INC.", "practiceaddress1": "8430 164TH ST", "practiceaddress2": null, "practicecity": "JAMAICA", "practicestate": "NY", "practicezip9code": 114321734, "telephonenumber": 7183743043, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7144298222, "longitude": -73.8026053243, "is_contracted_for_cba": false}, {"provider_id": 20351201, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02644", "practiceaddress1": "2010 ALAMO DR", "practiceaddress2": null, "practicecity": "VACAVILLE", "practicestate": "CA", "practicezip9code": 956876289, "telephonenumber": 7074518304, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.33526, "longitude": -121.9691, "is_contracted_for_cba": false}, {"provider_id": 20315867, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05858", "practiceaddress1": "15038 NACOGDOCHES RD", "practiceaddress2": null, "practicecity": "SAN ANTONIO", "practicestate": "TX", "practicezip9code": 782471210, "telephonenumber": 2106467045, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.5777, "longitude": -98.37302, "is_contracted_for_cba": false}, {"provider_id": 20316923, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07430", "practiceaddress1": "8555 FERGUSON RD", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752285343, "telephonenumber": 2143200892, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.81155, "longitude": -96.70218, "is_contracted_for_cba": false}, {"provider_id": 20316035, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00023", "practiceaddress1": "211 LINCOLN AVENUE", "practiceaddress2": null, "practicecity": "HAVERHILL", "practicestate": "MA", "practicezip9code": 18306738, "telephonenumber": 9783720291, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.76404, "longitude": -71.03863, "is_contracted_for_cba": false}, {"provider_id": 20315645, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00657", "practiceaddress1": "400 PARK AVE", "practiceaddress2": null, "practicecity": "WORCESTER", "practicestate": "MA", "practicezip9code": 16101025, "telephonenumber": 5087923866, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.25711, "longitude": -71.82318, "is_contracted_for_cba": false}, {"provider_id": 20311745, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARKANSAS CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10019", "practiceaddress1": "3908 N STATE LINE AVE", "practiceaddress2": null, "practicecity": "TEXARKANA", "practicestate": "AR", "practicezip9code": 718541935, "telephonenumber": 8707720236, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.46129, "longitude": -94.04301, "is_contracted_for_cba": false}, {"provider_id": 20305655, "acceptsassignement": false, "participationbegindate": 1690329600000, "businessname": "PW PLAZA RX INC", "practicename": "PARK WEST PLAZA PHARMACY", "practiceaddress1": "7230 MEDICAL CENTER DR", "practiceaddress2": "STE 106", "practicecity": "WEST HILLS", "practicestate": "CA", "practicezip9code": 913074003, "telephonenumber": 8183466550, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34.2038, "longitude": -118.62973, "is_contracted_for_cba": false}, {"provider_id": 20667143, "acceptsassignement": true, "participationbegindate": 1689897600000, "businessname": "PREMIER ORTHOPAEDIC AND SPORTS MEDICINE ASSOCIATES, LTD", "practicename": "PREMIER ORTHOPAEDIC AND SPORTS MEDI", "practiceaddress1": "300 SPRING HOUSE DRIVE", "practiceaddress2": "SUITE 200", "practicecity": "COLLEGEVILLE", "practicestate": "PA", "practicezip9code": 194264021, "telephonenumber": 6106446900, "specialitieslist": "Orthotic Personnel", "providertypelist": "PHYSICIAN \u2013 ORTHOPEDIC/ORTHOPEDIC SURGERY", "supplieslist": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.16374, "longitude": -75.47547, "is_contracted_for_cba": false}, {"provider_id": 34357166, "acceptsassignement": true, "participationbegindate": 1689811200000, "businessname": "LIRX PHARMACY INC", "practicename": "LIRX PHARMACY INC", "practiceaddress1": "930 WHEELER RD", "practiceaddress2": null, "practicecity": "HAUPPAUGE", "practicestate": "NY", "practicezip9code": 117882900, "telephonenumber": 6317247096, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.8247813861, "longitude": -73.2044287933, "is_contracted_for_cba": false}, {"provider_id": 20305721, "acceptsassignement": true, "participationbegindate": 1689724800000, "businessname": "BROOKLYN MEDICAL EQUIPMENT INC", "practicename": "BROOKLYN MEDICAL EQUIPMENT INC", "practiceaddress1": "6415 LAKE WORTH RD", "practiceaddress2": "STE 211", "practicecity": "GREENACRES", "practicestate": "FL", "practicezip9code": 334632905, "telephonenumber": 5615324200, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 26.61927, "longitude": -80.1455, "is_contracted_for_cba": false}, {"provider_id": 20379557, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #17222", "practiceaddress1": "730 S LEWIS ST", "practiceaddress2": null, "practicecity": "METTER", "practicestate": "GA", "practicezip9code": 304395127, "telephonenumber": 9126855170, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.38419, "longitude": -82.06156, "is_contracted_for_cba": false}, {"provider_id": 20305811, "acceptsassignement": true, "participationbegindate": 1689292800000, "businessname": "HANSRA OPTOMETRIC CORPORATION", "practicename": "VISIONWORKS DOCTORS OF OPTOMETRY", "practiceaddress1": "825 E BIDWELL ST", "practiceaddress2": "STE 100", "practicecity": "FOLSOM", "practicestate": "CA", "practicezip9code": 956304207, "telephonenumber": 2792021205, "specialitieslist": "Optician", "providertypelist": null, "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "latitude": 38.6698, "longitude": -121.15556, "is_contracted_for_cba": false}, {"provider_id": 20316935, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01273", "practiceaddress1": "50 SW CUTOFF", "practiceaddress2": null, "practicecity": "WORCESTER", "practicestate": "MA", "practicezip9code": 16041534, "telephonenumber": 5087931903, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.23913, "longitude": -71.7457, "is_contracted_for_cba": false}, {"provider_id": 20317379, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01221", "practiceaddress1": "50 MEDWAY RD", "practiceaddress2": null, "practicecity": "MILFORD", "practicestate": "MA", "practicezip9code": 17572918, "telephonenumber": 5086343090, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.15032, "longitude": -71.50241, "is_contracted_for_cba": false}, {"provider_id": 20316953, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07140", "practiceaddress1": "599 STATE RD", "practiceaddress2": null, "practicecity": "WESTPORT", "practicestate": "MA", "practicezip9code": 27902819, "telephonenumber": 5086733072, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.66006, "longitude": -71.08392, "is_contracted_for_cba": false}, {"provider_id": 20317403, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00159", "practiceaddress1": "516-522 MAIN STREET", "practiceaddress2": null, "practicecity": "MELROSE", "practicestate": "MA", "practicezip9code": 21763880, "telephonenumber": 7816657107, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.4553, "longitude": -71.06531, "is_contracted_for_cba": false}, {"provider_id": 20317385, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00382", "practiceaddress1": "1504 MAIN ST", "practiceaddress2": null, "practicecity": "SOUTH WEYMOUTH", "practicestate": "MA", "practicezip9code": 21901363, "telephonenumber": 7813312580, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.15312, "longitude": -70.95498, "is_contracted_for_cba": false}, {"provider_id": 20366429, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "4051 DOUGLAS BLVD", "practiceaddress2": null, "practicecity": "GRANITE BAY", "practicestate": "CA", "practicezip9code": 957465901, "telephonenumber": 9167917576, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.74387, "longitude": -121.22509, "is_contracted_for_cba": false}, {"provider_id": 20366423, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6289", "practiceaddress1": "5900 CALLE REAL", "practiceaddress2": null, "practicecity": "GOLETA", "practicestate": "CA", "practicezip9code": 931172312, "telephonenumber": 8059673798, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.44162, "longitude": -119.82868, "is_contracted_for_cba": false}, {"provider_id": 20380241, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #17863", "practiceaddress1": "601 E KING ST", "practiceaddress2": null, "practicecity": "KINGS MOUNTAIN", "practicestate": "NC", "practicezip9code": 280863113, "telephonenumber": 7047399771, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.24095, "longitude": -81.33285, "is_contracted_for_cba": false}, {"provider_id": 20683607, "acceptsassignement": true, "participationbegindate": 1729555200000, "businessname": "GREAT HELP MEDICAL SUPPLY LLC", "practicename": "GREAT HELP MEDICAL SUPPLY LLC", "practiceaddress1": "6490 LANDOVER RD", "practiceaddress2": "STE B ROOMS #5&6", "practicecity": "CHEVERLY", "practicestate": "MD", "practicezip9code": 207851443, "telephonenumber": 2408285162, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 38.9330756147, "longitude": -76.9038834315, "is_contracted_for_cba": false}, {"provider_id": 20317373, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05952", "practiceaddress1": "2313 W UNIVERSITY AVE", "practiceaddress2": null, "practicecity": "MCKINNEY", "practicestate": "TX", "practicezip9code": 750713318, "telephonenumber": 9725482856, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.21675, "longitude": -96.64507, "is_contracted_for_cba": false}, {"provider_id": 20317049, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00610", "practiceaddress1": "10 SARAHS WAY", "practiceaddress2": null, "practicecity": "FAIRHAVEN", "practicestate": "MA", "practicezip9code": 27193161, "telephonenumber": 5089990790, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.64517, "longitude": -70.89712, "is_contracted_for_cba": false}, {"provider_id": 20317139, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00153", "practiceaddress1": "481 LINCOLN STREET", "practiceaddress2": null, "practicecity": "WORCESTER", "practicestate": "MA", "practicezip9code": 16051915, "telephonenumber": 5088523578, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.29315, "longitude": -71.77768, "is_contracted_for_cba": false}, {"provider_id": 20316269, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #08445", "practiceaddress1": "6220 SIENNA PKWY", "practiceaddress2": null, "practicecity": "MISSOURI CITY", "practicestate": "TX", "practicezip9code": 774596048, "telephonenumber": 2817789980, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.53936, "longitude": -95.54155, "is_contracted_for_cba": false}, {"provider_id": 20316263, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #09263", "practiceaddress1": "511 W CORDOVA RD", "practiceaddress2": null, "practicecity": "SANTA FE", "practicestate": "NM", "practicezip9code": 875051843, "telephonenumber": 5059835546, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.67256, "longitude": -105.94982, "is_contracted_for_cba": false}, {"provider_id": 20305823, "acceptsassignement": true, "participationbegindate": 1689120000000, "businessname": "QUALITYCARE DIABETIC SUPPLIES LLC", "practicename": "QUALITYCARE DIABETIC SUPPLIES", "practiceaddress1": "4001 WESTFAX DR", "practiceaddress2": "STE A", "practicecity": "CHANTILLY", "practicestate": "VA", "practicezip9code": 201511515, "telephonenumber": 7038631963, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf", "latitude": 38.90181, "longitude": -77.45567, "is_contracted_for_cba": false}, {"provider_id": 20366531, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5951", "practiceaddress1": "11509 CANYON RD E", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983734359, "telephonenumber": 2535394165, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 47.15114, "longitude": -122.35707, "is_contracted_for_cba": false}, {"provider_id": 20366363, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6017", "practiceaddress1": "2840 W AVENUE L", "practiceaddress2": null, "practicecity": "LANCASTER", "practicestate": "CA", "practicezip9code": 935364006, "telephonenumber": 6619438683, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.66013, "longitude": -118.18355, "is_contracted_for_cba": false}, {"provider_id": 20683619, "acceptsassignement": false, "participationbegindate": 1729036800000, "businessname": "DANIA HEALTH INC", "practicename": "DANIA HEALTH INC", "practiceaddress1": "750 E SAMPLE RD", "practiceaddress2": "STE 2-205", "practicecity": "POMPANO BEACH", "practicestate": "FL", "practicezip9code": 330645136, "telephonenumber": 9545321584, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 26.2743080204, "longitude": -80.1114810352, "is_contracted_for_cba": false}, {"provider_id": 26717242, "acceptsassignement": true, "participationbegindate": 1728345600000, "businessname": "PLATINUM MED SUPPLIES LLC", "practicename": "PLATINUM MED SUPPLIES LLC", "practiceaddress1": "620 HILLCREST RD", "practiceaddress2": "STE 100", "practicecity": "LILBURN", "practicestate": "GA", "practicezip9code": 300476892, "telephonenumber": 8002767440, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 33.8983340114, "longitude": -84.147920033, "is_contracted_for_cba": false}, {"provider_id": 20683919, "acceptsassignement": true, "participationbegindate": 1728345600000, "businessname": "PIXI, LLC", "practicename": "PIXI LLC", "practiceaddress1": "1905 CENTRAL DR", "practiceaddress2": "STE 101", "practicecity": "BEDFORD", "practicestate": "TX", "practicezip9code": 760215840, "telephonenumber": 6825034201, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 32.8398737325, "longitude": -97.1339621382, "is_contracted_for_cba": false}, {"provider_id": 26717248, "acceptsassignement": false, "participationbegindate": 1728259200000, "businessname": "SLEEPHAPP INC", "practicename": "SLEEPHAPP INC", "practiceaddress1": "100 LAWRENCE ST", "practiceaddress2": "STE 107", "practicecity": "NANUET", "practicestate": "NY", "practicezip9code": 109545033, "telephonenumber": 84561786001, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Continuous Positive Airway Pressure (CPAP) Devices|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps", "latitude": 41.1076609842, "longitude": -74.0347366845, "is_contracted_for_cba": false}, {"provider_id": 20413187, "acceptsassignement": true, "participationbegindate": 1719100800000, "businessname": "DELMA INC", "practicename": "DELMA RX", "practiceaddress1": "6850 VAN NUYS BLVD", "practiceaddress2": "STE 115", "practicecity": "VAN NUYS", "practicestate": "CA", "practicezip9code": 914054629, "telephonenumber": 8186873999, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34.19525, "longitude": -118.44861, "is_contracted_for_cba": false}, {"provider_id": 23279527, "acceptsassignement": false, "participationbegindate": 1718841600000, "businessname": "OMNIS MEDICAL SERVICES LLC", "practicename": "OMNIS MEDICAL SERVICES LLC", "practiceaddress1": "66 YORK ST", "practiceaddress2": "# 100", "practicecity": "JERSEY CITY", "practicestate": "NJ", "practicezip9code": 73023838, "telephonenumber": 7732428501, "specialitieslist": "MSC With Orthotic-Prosthetic", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Insulin Infusion Pumps and/or Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Urological Supplies|Voice Prosthetics|Limb Prostheses|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.7161030177, "longitude": -74.036213995, "is_contracted_for_cba": false}, {"provider_id": 20304209, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #533", "practiceaddress1": "9484 ELLERBE RD", "practiceaddress2": "STE 100", "practicecity": "SHREVEPORT", "practicestate": "LA", "practicezip9code": 711067404, "telephonenumber": 3185176973, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.3973, "longitude": -93.73012, "is_contracted_for_cba": false}, {"provider_id": 20303735, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY", "practiceaddress1": "6652 YOUREE DR", "practiceaddress2": null, "practicecity": "SHREVEPORT", "practicestate": "LA", "practicezip9code": 711054630, "telephonenumber": 3187959966, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.4445, "longitude": -93.71945, "is_contracted_for_cba": false}, {"provider_id": 20315381, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #03431", "practiceaddress1": "1300 N HOBART ST", "practiceaddress2": null, "practicecity": "PAMPA", "practicestate": "TX", "practicezip9code": 790654122, "telephonenumber": 8066652705, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.54871, "longitude": -100.9718, "is_contracted_for_cba": false}, {"provider_id": 34359290, "acceptsassignement": true, "participationbegindate": 1718064000000, "businessname": "PNW PHARMACY LLC", "practicename": "PNW RX", "practiceaddress1": "400 NE 7TH ST", "practiceaddress2": null, "practicecity": "GRESHAM", "practicestate": "OR", "practicezip9code": 970305604, "telephonenumber": 5035733278, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 45.5020549826, "longitude": -122.426870038, "is_contracted_for_cba": false}, {"provider_id": 20317367, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05962", "practiceaddress1": "3200 TEASLEY LN", "practiceaddress2": null, "practicecity": "DENTON", "practicestate": "TX", "practicezip9code": 762108322, "telephonenumber": 9403821810, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.17352, "longitude": -97.11402, "is_contracted_for_cba": false}, {"provider_id": 23279623, "acceptsassignement": true, "participationbegindate": 1717459200000, "businessname": "CHEROKEE DME INC", "practicename": "CHEROKEE DME INC", "practiceaddress1": "2959 CHEROKEE ST NW", "practiceaddress2": "STE 103E", "practicecity": "KENNESAW", "practicestate": "GA", "practicezip9code": 301446522, "telephonenumber": 4043693020, "specialitieslist": null, "providertypelist": "CERTIFIED ORTH/PROS/PEDORTHIST", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts", "latitude": 34.0260100104, "longitude": -84.6113060064, "is_contracted_for_cba": false}, {"provider_id": 20311931, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARKANSAS CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10432", "practiceaddress1": "3220 N REYNOLDS RD", "practiceaddress2": null, "practicecity": "BRYANT", "practicestate": "AR", "practicezip9code": 720229039, "telephonenumber": 5018470803, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.62385, "longitude": -92.49904, "is_contracted_for_cba": false}, {"provider_id": 20311697, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "MEIJER GREAT LAKES LIMITED PARTNERSHIP", "practicename": "MEIJER PHARMACY #288", "practiceaddress1": "2951 HEARTLAND CROSSING BLVD", "practiceaddress2": null, "practicecity": "OWENSBORO", "practicestate": "KY", "practicezip9code": 423037669, "telephonenumber": 2703597510, "specialitieslist": "Pharmacy|Department Store|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers", "latitude": 37.73675, "longitude": -87.09052, "is_contracted_for_cba": false}, {"provider_id": 20310473, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "WASHINGTON CVS PHARMACY LLC", "practiceaddress1": "17700 NE 76TH ST", "practiceaddress2": null, "practicecity": "REDMOND", "practicestate": "WA", "practicezip9code": 980523300, "telephonenumber": 4252021000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.67179, "longitude": -122.10329, "is_contracted_for_cba": false}, {"provider_id": 20310983, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "UTAH CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 10423", "practiceaddress1": "1269 E 2100 S", "practiceaddress2": null, "practicecity": "SALT LAKE CITY", "practicestate": "UT", "practicezip9code": 841062824, "telephonenumber": 8014860695, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.72551, "longitude": -111.85532, "is_contracted_for_cba": false}, {"provider_id": 20310815, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10747", "practiceaddress1": "11918 AIRPORT RD", "practiceaddress2": null, "practicecity": "EVERETT", "practicestate": "WA", "practicezip9code": 982045509, "telephonenumber": 4253537687, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.88983, "longitude": -122.25946, "is_contracted_for_cba": false}, {"provider_id": 20311847, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARKANSAS CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10975", "practiceaddress1": "2501 MCCAIN BLVD", "practiceaddress2": null, "practicecity": "NORTH LITTLE ROCK", "practicestate": "AR", "practicezip9code": 721167606, "telephonenumber": 5014046059, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.79697, "longitude": -92.23672, "is_contracted_for_cba": false}, {"provider_id": 20303675, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #494", "practiceaddress1": "3300 HAMILTON MILL RD", "practiceaddress2": null, "practicecity": "BUFORD", "practicestate": "GA", "practicezip9code": 305194080, "telephonenumber": 7706141086, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.09425, "longitude": -83.9354, "is_contracted_for_cba": false}, {"provider_id": 20303507, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-529", "practiceaddress1": "965 POPLAR ST", "practiceaddress2": null, "practicecity": "NELSONVILLE", "practicestate": "OH", "practicezip9code": 457641442, "telephonenumber": 7407531984, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.45193, "longitude": -82.22073, "is_contracted_for_cba": false}, {"provider_id": 20311661, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "UTAH CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16936", "practiceaddress1": "608 W MAIN ST", "practiceaddress2": null, "practicecity": "AMERICAN FORK", "practicestate": "UT", "practicezip9code": 840039762, "telephonenumber": 8017565997, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.37565, "longitude": -111.82124, "is_contracted_for_cba": false}, {"provider_id": 20312705, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "MEIJER GREAT LAKES LIMITED PARTNERSHIP", "practicename": "MEIJER PHARMACY #207", "practiceaddress1": "1900 E COLLEGE AVE", "practiceaddress2": null, "practicecity": "NORMAL", "practicestate": "IL", "practicezip9code": 617614577, "telephonenumber": 3098880810, "specialitieslist": "Pharmacy|Department Store|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers", "latitude": 40.51048, "longitude": -88.9438, "is_contracted_for_cba": false}, {"provider_id": 20304047, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #957", "practiceaddress1": "4533 MONROE ST", "practiceaddress2": null, "practicecity": "TOLEDO", "practicestate": "OH", "practicezip9code": 43613, "telephonenumber": 4194719240, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.6886, "longitude": -83.62103, "is_contracted_for_cba": false}, {"provider_id": 20303807, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-966", "practiceaddress1": "4656 CEMETERY RD", "practiceaddress2": null, "practicecity": "HILLIARD", "practicestate": "OH", "practicezip9code": 430261124, "telephonenumber": 6148761248, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.03181, "longitude": -83.14022, "is_contracted_for_cba": false}, {"provider_id": 21611685, "acceptsassignement": true, "participationbegindate": 1727308800000, "businessname": "CROSSROADS PROSTHETICS AND ORTHOTICS", "practicename": "CROSSROADS PROSTHETICS AND ORTHOTIC", "practiceaddress1": "3900 BRISTOL HWY", "practiceaddress2": "STE 8", "practicecity": "JOHNSON CITY", "practicestate": "TN", "practicezip9code": 376011391, "telephonenumber": 4239002425, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses", "latitude": 36.3810455596, "longitude": -82.3665095411, "is_contracted_for_cba": false}, {"provider_id": 20380067, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #18289", "practiceaddress1": "400 PUBLIC RD", "practiceaddress2": null, "practicecity": "YORKVILLE", "practicestate": "OH", "practicezip9code": 439711248, "telephonenumber": 7408592449, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.15926, "longitude": -80.70608, "is_contracted_for_cba": false}, {"provider_id": 20380055, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "109 S VAN BUREN RD", "practiceaddress2": null, "practicecity": "EDEN", "practicestate": "NC", "practicezip9code": 272885026, "telephonenumber": 3366239026, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.50046, "longitude": -79.74291, "is_contracted_for_cba": false}, {"provider_id": 20379701, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #18372", "practiceaddress1": "5706 BERGENLINE AVE", "practiceaddress2": null, "practicecity": "WEST NEW YORK", "practicestate": "NJ", "practicezip9code": 70931230, "telephonenumber": 2018698054, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.78726, "longitude": -74.01739, "is_contracted_for_cba": false}, {"provider_id": 20335709, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11024", "practiceaddress1": "7353 RANGEWOOD DR", "practiceaddress2": null, "practicecity": "COLORADO SPRINGS", "practicestate": "CO", "practicezip9code": 809187702, "telephonenumber": 7195982751, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.93763, "longitude": -104.75487, "is_contracted_for_cba": false}, {"provider_id": 21611691, "acceptsassignement": true, "participationbegindate": 1727222400000, "businessname": "YUBA CITY PHARMACY INC", "practicename": "YUBA CITY PHARMACY", "practiceaddress1": "1000 LINCOLN RD", "practiceaddress2": "STE A", "practicecity": "YUBA CITY", "practicestate": "CA", "practicezip9code": 959916598, "telephonenumber": 5304347494, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.1121540121, "longitude": -121.6266560283, "is_contracted_for_cba": false}, {"provider_id": 21611223, "acceptsassignement": true, "participationbegindate": 1727222400000, "businessname": "HANNA FIRST CARE INC", "practicename": "HANNA FIRST CARE INC", "practiceaddress1": "600 MIDLAND AVE", "practiceaddress2": null, "practicecity": "GARFIELD", "practicestate": "NJ", "practicezip9code": 70261665, "telephonenumber": 9737727966, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.8842799956, "longitude": -74.1002610391, "is_contracted_for_cba": false}, {"provider_id": 20521613, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #114", "practiceaddress1": "1257 GEORGIA RD", "practiceaddress2": null, "practicecity": "FRANKLIN", "practicestate": "NC", "practicezip9code": 287349275, "telephonenumber": 8283491542, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.15737, "longitude": -83.39275, "is_contracted_for_cba": false}, {"provider_id": 20378273, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12437", "practiceaddress1": "1250 FAIRVIEW DR", "practiceaddress2": null, "practicecity": "LEXINGTON", "practicestate": "NC", "practicezip9code": 272925332, "telephonenumber": 3362240424, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.78675, "longitude": -80.26027, "is_contracted_for_cba": false}, {"provider_id": 20378309, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS", "practiceaddress1": "320 W SUMMIT AVE", "practiceaddress2": null, "practicecity": "WALES", "practicestate": "WI", "practicezip9code": 531839436, "telephonenumber": 2629686900, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.00575, "longitude": -88.3793, "is_contracted_for_cba": false}, {"provider_id": 20521325, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS INC", "practiceaddress1": "180 SCENIC PLAZA DR", "practiceaddress2": null, "practicecity": "WEST UNION", "practicestate": "SC", "practicezip9code": 296962536, "telephonenumber": 8646383976, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.75744, "longitude": -83.04918, "is_contracted_for_cba": false}, {"provider_id": 20521367, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #436", "practiceaddress1": "1197 BIG A RD", "practiceaddress2": null, "practicecity": "TOCCOA", "practicestate": "GA", "practicezip9code": 305776028, "telephonenumber": 7068868711, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.57052, "longitude": -83.30675, "is_contracted_for_cba": false}, {"provider_id": 20521289, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS INC", "practiceaddress1": "2455 SALEM RD SE", "practiceaddress2": null, "practicecity": "CONYERS", "practicestate": "GA", "practicezip9code": 300136743, "telephonenumber": 7709223507, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.6233, "longitude": -83.97647, "is_contracted_for_cba": false}, {"provider_id": 20378051, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9297", "practiceaddress1": "10427 BIG BEND RD", "practiceaddress2": null, "practicecity": "RIVERVIEW", "practicestate": "FL", "practicezip9code": 335787415, "telephonenumber": 8133475023, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.79182, "longitude": -82.33585, "is_contracted_for_cba": false}, {"provider_id": 20303957, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "3959 LAVISTA RD", "practiceaddress2": "STE A", "practicecity": "TUCKER", "practicestate": "GA", "practicezip9code": 300845152, "telephonenumber": 7709346442, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.84507, "longitude": -84.25588, "is_contracted_for_cba": false}, {"provider_id": 20303753, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-512", "practiceaddress1": "264 S HOLLYWOOD BLVD", "practiceaddress2": null, "practicecity": "STEUBENVILLE", "practicestate": "OH", "practicezip9code": 439522422, "telephonenumber": 7402662893, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.36843, "longitude": -80.64005, "is_contracted_for_cba": false}, {"provider_id": 20328593, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16966", "practiceaddress1": "3400 WILKES BARRE TOWNSHIP CMNS", "practiceaddress2": null, "practicecity": "WILKES BARRE TOWNSHI", "practicestate": "PA", "practicezip9code": 187026846, "telephonenumber": 5708294983, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.24155, "longitude": -75.84332, "is_contracted_for_cba": false}, {"provider_id": 20304917, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16804", "practiceaddress1": "801 N HOUK RD", "practiceaddress2": null, "practicecity": "DELAWARE", "practicestate": "OH", "practicezip9code": 430154418, "telephonenumber": 7403628426, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.31253, "longitude": -83.10933, "is_contracted_for_cba": false}, {"provider_id": 20303609, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #456", "practiceaddress1": "4400 BROWNSVILLE RD", "practiceaddress2": null, "practicecity": "POWDER SPRINGS", "practicestate": "GA", "practicezip9code": 301273143, "telephonenumber": 7702224205, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.8466, "longitude": -84.69692, "is_contracted_for_cba": false}, {"provider_id": 20303651, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16514", "practiceaddress1": "3588 GENDER RD", "practiceaddress2": null, "practicecity": "CANAL WINCHESTER", "practicestate": "OH", "practicezip9code": 431108679, "telephonenumber": 6149207404, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.90942, "longitude": -82.82423, "is_contracted_for_cba": false}, {"provider_id": 20335031, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 10831", "practiceaddress1": "7950 E HAMPDEN AVE", "practiceaddress2": null, "practicecity": "DENVER", "practicestate": "CO", "practicezip9code": 80231, "telephonenumber": 3036001468, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.65303, "longitude": -104.89668, "is_contracted_for_cba": false}, {"provider_id": 20521385, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS INC", "practiceaddress1": "684 N BROAD ST", "practiceaddress2": null, "practicecity": "BREVARD", "practicestate": "NC", "practicezip9code": 287123102, "telephonenumber": 8288832358, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.23954, "longitude": -82.72995, "is_contracted_for_cba": false}, {"provider_id": 20521745, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #403", "practiceaddress1": "260 TIFT COLLEGE DR", "practiceaddress2": null, "practicecity": "FORSYTH", "practicestate": "GA", "practicezip9code": 310292318, "telephonenumber": 8286692941, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.03479, "longitude": -83.93051, "is_contracted_for_cba": false}, {"provider_id": 20521397, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS PHARMACY #55", "practiceaddress1": "630 CHAMPION DR", "practiceaddress2": null, "practicecity": "CANTON", "practicestate": "NC", "practicezip9code": 287163032, "telephonenumber": 8282352795, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.45148, "longitude": -82.88058, "is_contracted_for_cba": false}, {"provider_id": 20313539, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 06856", "practiceaddress1": "116 W UNIVERSITY DR", "practiceaddress2": null, "practicecity": "DENTON", "practicestate": "TX", "practicezip9code": 762011851, "telephonenumber": 9403879549, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.23066, "longitude": -97.1328, "is_contracted_for_cba": false}, {"provider_id": 20313545, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06854", "practiceaddress1": "601 W 7TH AVE", "practiceaddress2": null, "practicecity": "CORSICANA", "practicestate": "TX", "practicezip9code": 751106360, "telephonenumber": 9038746597, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.089, "longitude": -96.46848, "is_contracted_for_cba": false}, {"provider_id": 20313551, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06851", "practiceaddress1": "119 W MARSHALL AVE", "practiceaddress2": null, "practicecity": "LONGVIEW", "practicestate": "TX", "practicezip9code": 756015340, "telephonenumber": 9037532686, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.50072, "longitude": -94.73959, "is_contracted_for_cba": false}, {"provider_id": 20377973, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "6390 BOULDER HWY", "practiceaddress2": null, "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891227439, "telephonenumber": 7024356263, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.08634, "longitude": -115.03571, "is_contracted_for_cba": false}, {"provider_id": 20377967, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12419", "practiceaddress1": "11795 W OLYMPIC BLVD", "practiceaddress2": null, "practicecity": "LOS ANGELES", "practicestate": "CA", "practicezip9code": 900641211, "telephonenumber": 3103126506, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.03345, "longitude": -118.44945, "is_contracted_for_cba": false}, {"provider_id": 20335955, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY INC", "practiceaddress1": "793 IYANNOUGH RD", "practiceaddress2": null, "practicecity": "HYANNIS", "practicestate": "MA", "practicezip9code": 26015027, "telephonenumber": 5088273147, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.66953, "longitude": -70.29758, "is_contracted_for_cba": false}, {"provider_id": 20334857, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 10879", "practiceaddress1": "1933 HERITAGE TRACE PKWY", "practiceaddress2": null, "practicecity": "FORT WORTH", "practicestate": "TX", "practicezip9code": 761772512, "telephonenumber": 8178409060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.90439, "longitude": -97.35405, "is_contracted_for_cba": false}, {"provider_id": 20334863, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 10946", "practiceaddress1": "4333 W JEFFERSON BLVD", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752114622, "telephonenumber": 9729367997, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.73773, "longitude": -96.89074, "is_contracted_for_cba": false}, {"provider_id": 20344775, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09866", "practiceaddress1": "1190 N MAIN ST", "practiceaddress2": null, "practicecity": "MANTECA", "practicestate": "CA", "practicezip9code": 953363208, "telephonenumber": 2092392018, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.81299, "longitude": -121.21702, "is_contracted_for_cba": false}, {"provider_id": 20345483, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09233", "practiceaddress1": "515 S STATE HIGHWAY 49", "practiceaddress2": null, "practicecity": "JACKSON", "practicestate": "CA", "practicezip9code": 95642, "telephonenumber": 2092232471, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.3437, "longitude": -120.76869, "is_contracted_for_cba": false}, {"provider_id": 20338223, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #03897", "practiceaddress1": "10 YOUNG ST", "practiceaddress2": null, "practicecity": "TONAWANDA", "practicestate": "NY", "practicezip9code": 141502208, "telephonenumber": 7166921894, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.02035, "longitude": -78.87651, "is_contracted_for_cba": false}, {"provider_id": 20378327, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11771", "practiceaddress1": "42820 CREEK VIEW PLZ", "practiceaddress2": null, "practicecity": "ASHBURN", "practicestate": "VA", "practicezip9code": 201474036, "telephonenumber": 7032596683, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.04245, "longitude": -77.52112, "is_contracted_for_cba": false}, {"provider_id": 20386343, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12563", "practiceaddress1": "176 COLUMBIA TPKE", "practiceaddress2": null, "practicecity": "FLORHAM PARK", "practicestate": "NJ", "practicezip9code": 79321366, "telephonenumber": 9738057420, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.78812, "longitude": -74.3893, "is_contracted_for_cba": false}, {"provider_id": 20335469, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #01773", "practiceaddress1": "9551 W 171ST ST", "practiceaddress2": null, "practicecity": "TINLEY PARK", "practicestate": "IL", "practicezip9code": 60487, "telephonenumber": 7088730062, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.57981, "longitude": -87.82791, "is_contracted_for_cba": false}, {"provider_id": 20330819, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 10896", "practiceaddress1": "629 W LANCASTER AVE", "practiceaddress2": null, "practicecity": "WAYNE", "practicestate": "PA", "practicezip9code": 190872527, "telephonenumber": 6107068872, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.03803, "longitude": -75.36165, "is_contracted_for_cba": false}, {"provider_id": 20338217, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #3758", "practiceaddress1": "610 PLEASANT ST", "practiceaddress2": null, "practicecity": "BROCKTON", "practicestate": "MA", "practicezip9code": 23012513, "telephonenumber": 5084276223, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.08915, "longitude": -71.0446, "is_contracted_for_cba": false}, {"provider_id": 20336681, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY # 06485", "practiceaddress1": "300 LIBERTY ST", "practiceaddress2": null, "practicecity": "WALKERTON", "practicestate": "IN", "practicezip9code": 465741246, "telephonenumber": 5745867154, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.47195, "longitude": -86.48145, "is_contracted_for_cba": false}, {"provider_id": 20336663, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06515", "practiceaddress1": "1203 S MAIN ST", "practiceaddress2": null, "practicecity": "BLUFFTON", "practicestate": "IN", "practicezip9code": 467143904, "telephonenumber": 2608241646, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.72559, "longitude": -85.16982, "is_contracted_for_cba": false}, {"provider_id": 34358756, "acceptsassignement": true, "participationbegindate": 1725926400000, "businessname": "FIRST CALL MED SUPPLIES LLC", "practicename": "FIRST CALL MED SUPPLIES LLC", "practiceaddress1": "1210 E MAIN ST", "practiceaddress2": "UNIT B", "practicecity": "LINCOLNTON", "practicestate": "NC", "practicezip9code": 280923840, "telephonenumber": 7042125558, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies", "latitude": 35.475710917, "longitude": -81.2411779357, "is_contracted_for_cba": false}, {"provider_id": 20338091, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #7490", "practiceaddress1": "833 ROOSEVELT AVE", "practiceaddress2": null, "practicecity": "CARTERET", "practicestate": "NJ", "practicezip9code": 70081880, "telephonenumber": 7329691441, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.59075, "longitude": -74.22876, "is_contracted_for_cba": false}, {"provider_id": 20338097, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #7628", "practiceaddress1": "10 W MAIN ST", "practiceaddress2": null, "practicecity": "SMITHTOWN", "practicestate": "NY", "practicezip9code": 117872615, "telephonenumber": 6317240381, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.85496, "longitude": -73.19456, "is_contracted_for_cba": false}, {"provider_id": 20303981, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #344", "practiceaddress1": "3000 OLD ALABAMA RD", "practiceaddress2": null, "practicecity": "ALPHARETTA", "practicestate": "GA", "practicezip9code": 300225860, "telephonenumber": 7707517388, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.02168, "longitude": -84.27166, "is_contracted_for_cba": false}, {"provider_id": 20337701, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "TETER ORTHOTICS & PROSTHETICS, INC", "practicename": "TETER ORTHOTICS AND PROSTHETICS INC", "practiceaddress1": "1415 KILBORN DR", "practiceaddress2": null, "practicecity": "PETOSKEY", "practicestate": "MI", "practicezip9code": 497709258, "telephonenumber": 2313475510, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Neuromuscular Elect Stimulators (NMES)/Supplies|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 45.35659, "longitude": -84.96749, "is_contracted_for_cba": false}, {"provider_id": 20387195, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11828", "practiceaddress1": "909 S MAIN ST", "practiceaddress2": null, "practicecity": "BLOOMINGTON", "practicestate": "IL", "practicezip9code": 617016720, "telephonenumber": 3098291540, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.47138, "longitude": -88.99338, "is_contracted_for_cba": false}, {"provider_id": 20335217, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #02663", "practiceaddress1": "225 W COURT ST", "practiceaddress2": null, "practicecity": "KANKAKEE", "practicestate": "IL", "practicezip9code": 609013710, "telephonenumber": 8159293451, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.12088, "longitude": -87.86822, "is_contracted_for_cba": false}, {"provider_id": 20336771, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #2513", "practiceaddress1": "421 RYDERS LN", "practiceaddress2": null, "practicecity": "EAST BRUNSWICK", "practicestate": "NJ", "practicezip9code": 88162700, "telephonenumber": 7322546609, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.43538, "longitude": -74.42257, "is_contracted_for_cba": false}, {"provider_id": 20344577, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09823", "practiceaddress1": "1350 FLORIN RD", "practiceaddress2": null, "practicecity": "SACRAMENTO", "practicestate": "CA", "practicezip9code": 958224202, "telephonenumber": 9163925184, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.49557, "longitude": -121.50466, "is_contracted_for_cba": false}, {"provider_id": 20336735, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #3900", "practiceaddress1": "227 S MAIN ST", "practiceaddress2": null, "practicecity": "MANCHESTER", "practicestate": "NH", "practicezip9code": 31024838, "telephonenumber": 6036668521, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.97973, "longitude": -71.47692, "is_contracted_for_cba": false}, {"provider_id": 20313077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06727", "practiceaddress1": "1600 S BYPASS 35", "practiceaddress2": null, "practicecity": "ALVIN", "practicestate": "TX", "practicezip9code": 775114602, "telephonenumber": 2813311536, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.40902, "longitude": -95.23332, "is_contracted_for_cba": false}, {"provider_id": 34358486, "acceptsassignement": false, "participationbegindate": 1717027200000, "businessname": "ORIFICE HEALTH SERVICES LLC", "practicename": "ORIFICE HEALTH SERVICES, LLC", "practiceaddress1": "3213 INTERSTATE 30", "practiceaddress2": "STE 202", "practicecity": "MESQUITE", "practicestate": "TX", "practicezip9code": 751502603, "telephonenumber": 4694356924, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 32.8148190085, "longitude": -96.6481300148, "is_contracted_for_cba": false}, {"provider_id": 23282497, "acceptsassignement": true, "participationbegindate": 1716940800000, "businessname": "FRIENDS MEDICAL SUPPLY LLC", "practicename": "FRIENDS MEDICAL SUPPLY LLC", "practiceaddress1": "302 W 3RD ST", "practiceaddress2": "STE C", "practicecity": "MERCEDES", "practicestate": "TX", "practicezip9code": 785703106, "telephonenumber": 9562744070, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 26.1487459793, "longitude": -97.9123889831, "is_contracted_for_cba": false}, {"provider_id": 23279665, "acceptsassignement": false, "participationbegindate": 1716854400000, "businessname": "IMPACT MEDICAL SUPPLIES LLC", "practicename": "IMPACT MEDICAL SUPPLIES LLC", "practiceaddress1": "2470 WINDY HILL RD SE", "practiceaddress2": "STE 361", "practicecity": "MARIETTA", "practicestate": "GA", "practicezip9code": 300678613, "telephonenumber": 4049988374, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Orthoses: Off-The-Shelf|Penile Pumps|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.9019819833, "longitude": -84.4825080058, "is_contracted_for_cba": false}, {"provider_id": 23279671, "acceptsassignement": true, "participationbegindate": 1716422400000, "businessname": "HIGHTECH MEDICAL SUPPLY LLC", "practicename": "HIGHTECH MEDICAL SUPPLY LLC", "practiceaddress1": "2647 CONEY ISLAND AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112235502, "telephonenumber": 7185785787, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.5922019764, "longitude": -73.9605254093, "is_contracted_for_cba": false}, {"provider_id": 20335991, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #06830", "practiceaddress1": "4609 W MAIN ST", "practiceaddress2": null, "practicecity": "BELLEVILLE", "practicestate": "IL", "practicezip9code": 622265208, "telephonenumber": 6183554851, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.54182, "longitude": -90.02519, "is_contracted_for_cba": false}, {"provider_id": 20335211, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #03901", "practiceaddress1": "1711 SHERMAN AVE", "practiceaddress2": null, "practicecity": "EVANSTON", "practicestate": "IL", "practicezip9code": 602013712, "telephonenumber": 8473283105, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.0496, "longitude": -87.68169, "is_contracted_for_cba": false}, {"provider_id": 20336657, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06572", "practiceaddress1": "1375 W 86TH ST", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462602101, "telephonenumber": 3172536427, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.91214, "longitude": -86.1836, "is_contracted_for_cba": false}, {"provider_id": 20313665, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06835", "practiceaddress1": "2674 S 31ST ST", "practiceaddress2": null, "practicecity": "TEMPLE", "practicestate": "TX", "practicezip9code": 765047104, "telephonenumber": 2547739953, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.07518, "longitude": -97.36743, "is_contracted_for_cba": false}, {"provider_id": 20313899, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #08330", "practiceaddress1": "6320 RUFE SNOW DR", "practiceaddress2": null, "practicecity": "NORTH RICHLAND HILLS", "practicestate": "TX", "practicezip9code": 761483317, "telephonenumber": 8176569861, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.86139, "longitude": -97.23789, "is_contracted_for_cba": false}, {"provider_id": 20313887, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 06903", "practiceaddress1": "3350 FOREST HILL CIR", "practiceaddress2": null, "practicecity": "FOREST HILL", "practicestate": "TX", "practicezip9code": 761401105, "telephonenumber": 8178689566, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.66001, "longitude": -97.27268, "is_contracted_for_cba": false}, {"provider_id": 20312825, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 07092", "practiceaddress1": "110 W 20TH ST", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770082510, "telephonenumber": 8326737131, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.80388, "longitude": -95.39859, "is_contracted_for_cba": false}, {"provider_id": 20337935, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06881", "practiceaddress1": "610 N MAIN ST", "practiceaddress2": null, "practicecity": "HUNTINGBURG", "practicestate": "IN", "practicezip9code": 475421044, "telephonenumber": 8126833309, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.29994, "longitude": -86.95555, "is_contracted_for_cba": false}, {"provider_id": 20337911, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY # 6618", "practiceaddress1": "105 N PARK AVE", "practiceaddress2": null, "practicecity": "ALEXANDRIA", "practicestate": "IN", "practicezip9code": 460012055, "telephonenumber": 7657242210, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.26385, "longitude": -85.66728, "is_contracted_for_cba": false}, {"provider_id": 20337953, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY 6599", "practiceaddress1": "715 E BROADWAY ST", "practiceaddress2": null, "practicecity": "FORTVILLE", "practicestate": "IN", "practicezip9code": 460401551, "telephonenumber": 3174857111, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.93609, "longitude": -85.84047, "is_contracted_for_cba": false}, {"provider_id": 20336687, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #6559", "practiceaddress1": "7990 E US HIGHWAY 36", "practiceaddress2": null, "practicecity": "AVON", "practicestate": "IN", "practicezip9code": 461237790, "telephonenumber": 3172720242, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.76339, "longitude": -86.38178, "is_contracted_for_cba": false}, {"provider_id": 20313533, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #04706", "practiceaddress1": "12601 TOMBALL PKWY", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770863326, "telephonenumber": 2812727190, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.91192, "longitude": -95.48115, "is_contracted_for_cba": false}, {"provider_id": 20313509, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07269", "practiceaddress1": "1319 AUSTIN AVE", "practiceaddress2": null, "practicecity": "BROWNWOOD", "practicestate": "TX", "practicezip9code": 768013312, "telephonenumber": 3256431516, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.71047, "longitude": -98.97789, "is_contracted_for_cba": false}, {"provider_id": 20304437, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #16-531", "practiceaddress1": "8730 WATERVILLE SWANTON RD", "practiceaddress2": null, "practicecity": "WATERVILLE", "practicestate": "OH", "practicezip9code": 435669726, "telephonenumber": 4198781040, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.50975, "longitude": -83.75859, "is_contracted_for_cba": false}, {"provider_id": 20336615, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06481", "practiceaddress1": "901 N KARWICK RD", "practiceaddress2": null, "practicecity": "MICHIGAN CITY", "practicestate": "IN", "practicezip9code": 463602191, "telephonenumber": 2198726811, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.73337, "longitude": -86.85549, "is_contracted_for_cba": false}, {"provider_id": 23279737, "acceptsassignement": true, "participationbegindate": 1715904000000, "businessname": "EXCELLENT MEDICAL SUPPLIES INC.", "practicename": "EXCELLENT MEDICAL SUPPLIES INC", "practiceaddress1": "4503 16TH AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112041102, "telephonenumber": 7182478531, "specialitieslist": "Medical Supply Company Other", "providertypelist": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Heat & Cold Applications|Hospital Beds (Manual)|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Limb Prostheses|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.6330852539, "longitude": -73.9831854654, "is_contracted_for_cba": false}, {"provider_id": 20313497, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #03707", "practiceaddress1": "6151 MATLOCK RD", "practiceaddress2": null, "practicecity": "ARLINGTON", "practicestate": "TX", "practicezip9code": 760182206, "telephonenumber": 8174656537, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.64551, "longitude": -97.11492, "is_contracted_for_cba": false}, {"provider_id": 20305007, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER SAV-ON PHARMACY #878", "practiceaddress1": "1094 N MAIN ST", "practiceaddress2": null, "practicecity": "BOWLING GREEN", "practicestate": "OH", "practicezip9code": 434021346, "telephonenumber": 4193535116, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.39118, "longitude": -83.65044, "is_contracted_for_cba": false}, {"provider_id": 20555519, "acceptsassignement": true, "participationbegindate": 1715817600000, "businessname": "CENTER FOR ORTHOTIC & PROSTHETIC EXCELLENCE, LLC", "practicename": "CENTER FOR ORTHOTIC & PROSTHETIC EX", "practiceaddress1": "9615 KEILMAN ST", "practiceaddress2": "STE 200", "practicecity": "ST JOHN", "practicestate": "IN", "practicezip9code": 463739406, "telephonenumber": 2193650248, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 41.44367, "longitude": -87.47256, "is_contracted_for_cba": false}, {"provider_id": 20683745, "acceptsassignement": false, "participationbegindate": 1724889600000, "businessname": "DE LA SHEY LINGERIE, LLC", "practicename": "DE LA SHEY LINGERIE, LLP", "practiceaddress1": "14099 E EXPOSITION AVE", "practiceaddress2": null, "practicecity": "AURORA", "practicestate": "CO", "practicezip9code": 800122522, "telephonenumber": 3039938725, "specialitieslist": "Medical Supply Company Other", "providertypelist": "ALL OTHER SUPPLIES (IE, DRUG STORES, ETC.)", "supplieslist": "Heat & Cold Applications|Pneumatic Compression Devices and/or Supplies|Breast Prostheses and/or Accessories|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 39.7045551193, "longitude": -104.8246978525, "is_contracted_for_cba": false}, {"provider_id": 20336591, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06612", "practiceaddress1": "5110 E 38TH ST", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462181717, "telephonenumber": 3175491891, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.82541, "longitude": -86.0828, "is_contracted_for_cba": false}, {"provider_id": 20338349, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06735", "practiceaddress1": "668 S US HIGHWAY 231", "practiceaddress2": null, "practicecity": "BLOOMFIELD", "practicestate": "IN", "practicezip9code": 474247114, "telephonenumber": 8123844820, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.97997, "longitude": -86.92409, "is_contracted_for_cba": false}, {"provider_id": 20336609, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06556", "practiceaddress1": "651 E MAIN ST", "practiceaddress2": null, "practicecity": "DANVILLE", "practicestate": "IN", "practicezip9code": 461221939, "telephonenumber": 3177455828, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.7599, "longitude": -86.51452, "is_contracted_for_cba": false}, {"provider_id": 20313599, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06374", "practiceaddress1": "290 STRICKLAND DR", "practiceaddress2": null, "practicecity": "ORANGE", "practicestate": "TX", "practicezip9code": 776304750, "telephonenumber": 4098863534, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.10059, "longitude": -93.76866, "is_contracted_for_cba": false}, {"provider_id": 20315147, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07151", "practiceaddress1": "8000 N SAM HOUSTON PKWY E", "practiceaddress2": null, "practicecity": "HUMBLE", "practicestate": "TX", "practicezip9code": 773962900, "telephonenumber": 2814540101, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.93883, "longitude": -95.26645, "is_contracted_for_cba": false}, {"provider_id": 20343779, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #04983", "practiceaddress1": "11600 FM 1960 RD W", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770653516, "telephonenumber": 2815177258, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.92734, "longitude": -95.59535, "is_contracted_for_cba": false}, {"provider_id": 23279851, "acceptsassignement": true, "participationbegindate": 1714953600000, "businessname": "B&R HEALTHCARE TULSA, LLC", "practicename": "VITAL CARE OF TULSA", "practiceaddress1": "7153 S YALE AVE", "practiceaddress2": null, "practicecity": "TULSA", "practicestate": "OK", "practicezip9code": 741366308, "telephonenumber": 5392712160, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 36.0600710777, "longitude": -95.9219520872, "is_contracted_for_cba": false}, {"provider_id": 20683349, "acceptsassignement": true, "participationbegindate": 1724371200000, "businessname": "MAXIMUM A SUPPLIES INC", "practicename": "MAXIMUM A SUPPLIES INC", "practiceaddress1": "18425 NW 2ND AVE", "practiceaddress2": "STE 404C", "practicecity": "MIAMI GARDENS", "practicestate": "FL", "practicezip9code": 331694500, "telephonenumber": 3058166879, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 25.9438029984, "longitude": -80.2045550291, "is_contracted_for_cba": false}, {"provider_id": 24548544, "acceptsassignement": false, "participationbegindate": 1724371200000, "businessname": "METTO LAND LLC", "practicename": "CPAP LV", "practiceaddress1": "5600 SPRING MOUNTAIN RD", "practiceaddress2": "STE 205", "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891468823, "telephonenumber": 7025306170, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": null, "supplieslist": "Continuous Positive Airway Pressure (CPAP) Devices|Respiratory Assist Devices", "latitude": 36.1264849809, "longitude": -115.2181479871, "is_contracted_for_cba": false}, {"provider_id": 24547998, "acceptsassignement": true, "participationbegindate": 1723680000000, "businessname": "CONTOUR SERVICES INC", "practicename": "CONTOUR SERVICES INC", "practiceaddress1": "815 NW 57TH AVE", "practiceaddress2": "STE 200-12", "practicecity": "MIAMI", "practicestate": "FL", "practicezip9code": 331262018, "telephonenumber": 7869637012, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 25.7798129906, "longitude": -80.2876439971, "is_contracted_for_cba": false}, {"provider_id": 20338583, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #2517", "practiceaddress1": "201 MAIN ST", "practiceaddress2": null, "practicecity": "GLOUCESTER", "practicestate": "MA", "practicezip9code": 19306010, "telephonenumber": 9782837361, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.61293, "longitude": -70.6611, "is_contracted_for_cba": false}, {"provider_id": 20307383, "acceptsassignement": true, "participationbegindate": 1675296000000, "businessname": "JRA HEALTH, LLC", "practicename": "JRA HEALTH", "practiceaddress1": "6925 SE US HIGHWAY 301", "practiceaddress2": null, "practicecity": "HAWTHORNE", "practicestate": "FL", "practicezip9code": 326403966, "telephonenumber": 3524431684, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 29.58959, "longitude": -82.0873, "is_contracted_for_cba": false}, {"provider_id": 20307413, "acceptsassignement": true, "participationbegindate": 1675209600000, "businessname": "FINEST MEDICAL SUPPLY CORP", "practicename": "FINEST MEDICAL SUPPLY CORP", "practiceaddress1": "2319 VOORHIES AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112352830, "telephonenumber": 3479662206, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.5867, "longitude": -73.94579, "is_contracted_for_cba": false}, {"provider_id": 24548556, "acceptsassignement": false, "participationbegindate": 1722816000000, "businessname": "FUSION RX LLC", "practicename": "BOIES MEDICAL CENTER PHARMACY", "practiceaddress1": "828 DELBON AVE", "practiceaddress2": null, "practicecity": "TURLOCK", "practicestate": "CA", "practicezip9code": 953822005, "telephonenumber": 2096348511, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 37.5102490175, "longitude": -120.8389029749, "is_contracted_for_cba": false}, {"provider_id": 20569697, "acceptsassignement": true, "participationbegindate": 1722556800000, "businessname": "ATHENS EYE CARE LLC", "practicename": "VISION SOURCE", "practiceaddress1": "416 W UNION ST", "practiceaddress2": null, "practicecity": "ATHENS", "practicestate": "OH", "practicezip9code": 457012328, "telephonenumber": 7405942271, "specialitieslist": "Optometrist", "providertypelist": null, "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 39.33103, "longitude": -82.12075, "is_contracted_for_cba": false}, {"provider_id": 20319923, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17130", "practiceaddress1": "1475 UNIVERSITY DR", "practiceaddress2": null, "practicecity": "BURLINGTON", "practicestate": "NC", "practicezip9code": 272158768, "telephonenumber": 3365851476, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.06736, "longitude": -79.51865, "is_contracted_for_cba": false}, {"provider_id": 20333429, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #08293", "practiceaddress1": "1550 LAKE DR SE", "practiceaddress2": null, "practicecity": "GRAND RAPIDS", "practicestate": "MI", "practicezip9code": 495062704, "telephonenumber": 6162350747, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.95461, "longitude": -85.63038, "is_contracted_for_cba": false}, {"provider_id": 20319917, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17635", "practiceaddress1": "7129 OKELLY CHAPEL RD", "practiceaddress2": null, "practicecity": "CARY", "practicestate": "NC", "practicezip9code": 275196849, "telephonenumber": 9196742215, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.82426, "longitude": -78.87032, "is_contracted_for_cba": false}, {"provider_id": 20307437, "acceptsassignement": true, "participationbegindate": 1675209600000, "businessname": "SHOP RX PHARMACY INC", "practicename": "SHOP RX PHARMACY INC", "practiceaddress1": "8917 JAMAICA AVE", "practiceaddress2": null, "practicecity": "JAMAICA", "practicestate": "NY", "practicezip9code": 114212041, "telephonenumber": 7184806479, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 40.69274, "longitude": -73.85687, "is_contracted_for_cba": false}, {"provider_id": 20307491, "acceptsassignement": true, "participationbegindate": 1675123200000, "businessname": "MOSHOLU PHARMACY INC", "practicename": "MOSHOLU PHARMACY INC.", "practiceaddress1": "3529 JEROME AVE", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104671050, "telephonenumber": 7187490270, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.88195, "longitude": -73.88228, "is_contracted_for_cba": false}, {"provider_id": 20330051, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 00740", "practiceaddress1": "10901C BUSTLETON AVE", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191163305, "telephonenumber": 2156772122, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.11207, "longitude": -75.02356, "is_contracted_for_cba": false}, {"provider_id": 20342555, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01599", "practiceaddress1": "700 W FRONT ST", "practiceaddress2": null, "practicecity": "BERWICK", "practicestate": "PA", "practicezip9code": 186033718, "telephonenumber": 5707527462, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.05049, "longitude": -76.24437, "is_contracted_for_cba": false}, {"provider_id": 20342669, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01615", "practiceaddress1": "1600 MAIN ST", "practiceaddress2": null, "practicecity": "DICKSON CITY", "practicestate": "PA", "practicezip9code": 184471334, "telephonenumber": 5703833211, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.47057, "longitude": -75.6083, "is_contracted_for_cba": false}, {"provider_id": 20304557, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "1475 BUFORD DR", "practiceaddress2": null, "practicecity": "LAWRENCEVILLE", "practicestate": "GA", "practicezip9code": 300433798, "telephonenumber": 7708226959, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.0052, "longitude": -83.9879, "is_contracted_for_cba": false}, {"provider_id": 20305157, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "134 BANKS CROSSING", "practiceaddress2": null, "practicecity": "FAYETTEVILLE", "practicestate": "GA", "practicezip9code": 302147308, "telephonenumber": 7704617632, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.47156, "longitude": -84.44865, "is_contracted_for_cba": false}, {"provider_id": 20331491, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #16290", "practiceaddress1": "1001 13TH ST S", "practiceaddress2": null, "practicecity": "VIRGINIA", "practicestate": "MN", "practicezip9code": 557923254, "telephonenumber": 2187416603, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.51225, "longitude": -92.54823, "is_contracted_for_cba": false}, {"provider_id": 20307545, "acceptsassignement": false, "participationbegindate": 1674604800000, "businessname": "MEGA MEDICAL SUPPLY LLC", "practicename": "MEGA MEDICAL SUPPLY LLC", "practiceaddress1": "1450 S HAVANA ST", "practiceaddress2": "STE 600", "practicecity": "AURORA", "practicestate": "CO", "practicezip9code": 800124032, "telephonenumber": 7204008979, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.69019, "longitude": -104.86585, "is_contracted_for_cba": false}, {"provider_id": 20307599, "acceptsassignement": true, "participationbegindate": 1674345600000, "businessname": "VAP PROFESSIONALS LLC", "practicename": "VAP PROFESSIONALS LLC", "practiceaddress1": "21701 W 11 MILE RD", "practiceaddress2": "STE 2", "practicecity": "SOUTHFIELD", "practicestate": "MI", "practicezip9code": 480763713, "telephonenumber": 2483520000, "specialitieslist": "MSC With Orthotic Personnel|Orthotic Personnel", "providertypelist": "PEDORTHIC PERSONNEL|MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 42.48697, "longitude": -83.25827, "is_contracted_for_cba": false}, {"provider_id": 20341361, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05991", "practiceaddress1": "6706 CARLISLE PIKE", "practiceaddress2": null, "practicecity": "MECHANICSBURG", "practicestate": "PA", "practicezip9code": 170501711, "telephonenumber": 7176971645, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.23771, "longitude": -77.06174, "is_contracted_for_cba": false}, {"provider_id": 20342867, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02002", "practiceaddress1": "239 FOX RUN LN", "practiceaddress2": null, "practicecity": "EAST STROUDSBURG", "practicestate": "PA", "practicezip9code": 183029116, "telephonenumber": 5702236892, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.13858, "longitude": -75.13254, "is_contracted_for_cba": false}, {"provider_id": 34358798, "acceptsassignement": true, "participationbegindate": 1720656000000, "businessname": "MINNEHAHA MEDICAL LLC", "practicename": "MINNEHAHA MEDICAL LLC", "practiceaddress1": "962 UNIVERSITY AVE W", "practiceaddress2": "STE 3", "practicecity": "SAINT PAUL", "practicestate": "MN", "practicezip9code": 55104, "telephonenumber": 6516663972, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "latitude": 44.9555331445, "longitude": -93.1407870041, "is_contracted_for_cba": false}, {"provider_id": 20335001, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04916", "practiceaddress1": "108 PARK RD", "practiceaddress2": null, "practicecity": "PLEASANT GROVE", "practicestate": "AL", "practicezip9code": 351271805, "telephonenumber": 2057441021, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.49203, "longitude": -86.96047, "is_contracted_for_cba": false}, {"provider_id": 21608967, "acceptsassignement": false, "participationbegindate": 1673827200000, "businessname": "UOFL HEALTH-LOUISVILLE INC", "practicename": "UOFL HEALTH - AMBULATORY PHARMACY-M", "practiceaddress1": "1850 BLUEGRASS AVE", "practiceaddress2": null, "practicecity": "LOUISVILLE", "practicestate": "KY", "practicezip9code": 402151161, "telephonenumber": 5023616000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 38.1780839843, "longitude": -85.7937990063, "is_contracted_for_cba": false}, {"provider_id": 20307683, "acceptsassignement": false, "participationbegindate": 1673827200000, "businessname": "SUNRISE SUNSET HEALTHCARE LLC", "practicename": "HOMECARE FOR THE 21ST CENTURY-REDDI", "practiceaddress1": "625 WALNUT ST", "practiceaddress2": null, "practicecity": "RED BLUFF", "practicestate": "CA", "practicezip9code": 960803325, "telephonenumber": 5307681401, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Respiratory Assist Devices|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.17668, "longitude": -122.23885, "is_contracted_for_cba": false}, {"provider_id": 21611277, "acceptsassignement": true, "participationbegindate": 1720656000000, "businessname": "HEDOAP LLC", "practicename": "PRIORITY OXYGEN & MEDICAL SUPPLIES", "practiceaddress1": "3201 CLUB MANOR DR", "practiceaddress2": "STE D", "practicecity": "MAUMELLE", "practicestate": "AR", "practicezip9code": 721136082, "telephonenumber": 5017993495, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps", "latitude": 34.8508697072, "longitude": -92.4078185728, "is_contracted_for_cba": false}, {"provider_id": 21611283, "acceptsassignement": false, "participationbegindate": 1720569600000, "businessname": "PROSTHETIC & ORTHOTIC GROUP BOULDER LLC", "practicename": "PROSTHETIC & ORTHOTIC GROUP BOULDER", "practiceaddress1": "2850 IRIS AVE", "practiceaddress2": "STE I4", "practicecity": "BOULDER", "practicestate": "CO", "practicezip9code": 803011493, "telephonenumber": 3033814500, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Neuromuscular Elect Stimulators (NMES)/Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.0352479797, "longitude": -105.2566490067, "is_contracted_for_cba": false}, {"provider_id": 23283013, "acceptsassignement": true, "participationbegindate": 1719964800000, "businessname": "ELITE RX INC", "practicename": "ELITE RX INC", "practiceaddress1": "19506 47TH AVE", "practiceaddress2": null, "practicecity": "FLUSHING", "practicestate": "NY", "practicezip9code": 113583910, "telephonenumber": 9172852177, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7524508055, "longitude": -73.7859229901, "is_contracted_for_cba": false}, {"provider_id": 20317637, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01419", "practiceaddress1": "3919 CENTREVILLE RD", "practiceaddress2": null, "practicecity": "CHANTILLY", "practicestate": "VA", "practicezip9code": 201513203, "telephonenumber": 7033782337, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.89542, "longitude": -77.43025, "is_contracted_for_cba": false}, {"provider_id": 20317631, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01417", "practiceaddress1": "13031 LEE JACKSON HWY", "practiceaddress2": null, "practicecity": "FAIRFAX", "practicestate": "VA", "practicezip9code": 220332050, "telephonenumber": 7033787550, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.88034, "longitude": -77.39625, "is_contracted_for_cba": false}, {"provider_id": 20307887, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "ARTIFICIAL LIMB SPECIALIST OTTOBOCK", "practiceaddress1": "7600 N 15TH ST", "practiceaddress2": "STE 105", "practicecity": "PHOENIX", "practicestate": "AZ", "practicezip9code": 850204330, "telephonenumber": 6027452080, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 33.54214, "longitude": -112.05042, "is_contracted_for_cba": false}, {"provider_id": 20307803, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "PETER HARSCH PROSTHETICS OTTOBOCK C", "practiceaddress1": "5995 MIRA MESA BLVD", "practiceaddress2": "STE A", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921214305, "telephonenumber": 8584040733, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 32.89792, "longitude": -117.19158, "is_contracted_for_cba": false}, {"provider_id": 20307917, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "OTTO BOCK PATIENT CARE LLC", "practiceaddress1": "73 THOMAS JOHNSON DR", "practiceaddress2": "STE B", "practicecity": "FREDERICK", "practicestate": "MD", "practicezip9code": 217024426, "telephonenumber": 3016984692, "specialitieslist": "MSC With Orthotic-Prosthetic|Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Neuromuscular Elect Stimulators (NMES)/Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 39.45471, "longitude": -77.40145, "is_contracted_for_cba": false}, {"provider_id": 20303453, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "6555 SUGARLOAF PKWY", "practiceaddress2": "STE 200", "practicecity": "DULUTH", "practicestate": "GA", "practicezip9code": 300974929, "telephonenumber": 7704182398, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.99644, "longitude": -84.09177, "is_contracted_for_cba": false}, {"provider_id": 20303375, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER DRUGSTORE # 471", "practiceaddress1": "6055 OLD NATIONAL HWY", "practiceaddress2": null, "practicecity": "ATLANTA", "practicestate": "GA", "practicezip9code": 303494325, "telephonenumber": 7709965488, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.58939, "longitude": -84.46897, "is_contracted_for_cba": false}, {"provider_id": 20303597, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY N-575", "practiceaddress1": "811 GAY ST", "practiceaddress2": null, "practicecity": "PORTSMOUTH", "practicestate": "OH", "practicezip9code": 456624118, "telephonenumber": 7403542262, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.73659, "longitude": -82.99452, "is_contracted_for_cba": false}, {"provider_id": 20303603, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #210", "practiceaddress1": "4498 CHAMBLEE DUNWOODY RD", "practiceaddress2": null, "practicecity": "DUNWOODY", "practicestate": "GA", "practicezip9code": 303386223, "telephonenumber": 7704517408, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.92217, "longitude": -84.31432, "is_contracted_for_cba": false}, {"provider_id": 20329577, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04897", "practiceaddress1": "155 BIRMINGHAM RD", "practiceaddress2": "STE 114", "practicecity": "CENTREVILLE", "practicestate": "AL", "practicezip9code": 350422949, "telephonenumber": 2059264654, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.94787, "longitude": -87.15046, "is_contracted_for_cba": false}, {"provider_id": 20368871, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6228", "practiceaddress1": "2690 GOLF RD", "practiceaddress2": null, "practicecity": "GLENVIEW", "practicestate": "IL", "practicezip9code": 600254744, "telephonenumber": 8476579863, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.05501, "longitude": -87.82344, "is_contracted_for_cba": false}, {"provider_id": 20387525, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "TEAM CARE", "practiceaddress1": "5881 TURKEY LAKE RD", "practiceaddress2": "STE B2-02", "practicecity": "ORLANDO", "practicestate": "FL", "practicezip9code": 328197747, "telephonenumber": 4079031752, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.47966, "longitude": -81.47507, "is_contracted_for_cba": false}, {"provider_id": 20304953, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "50789 VALLEY PLAZA DR", "practiceaddress2": null, "practicecity": "SAINT CLAIRSVILLE", "practicestate": "OH", "practicezip9code": 439501752, "telephonenumber": 7406957170, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.0694, "longitude": -80.86454, "is_contracted_for_cba": false}, {"provider_id": 20303765, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-880", "practiceaddress1": "1608 MARION MOUNT GILEAD RD", "practiceaddress2": null, "practicecity": "MARION", "practicestate": "OH", "practicezip9code": 433025822, "telephonenumber": 7403892144, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.58125, "longitude": -83.08397, "is_contracted_for_cba": false}, {"provider_id": 20303459, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #016", "practiceaddress1": "9610 N KINGS HWY", "practiceaddress2": null, "practicecity": "MYRTLE BEACH", "practicestate": "SC", "practicezip9code": 295724006, "telephonenumber": 8434492158, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.77627, "longitude": -78.79225, "is_contracted_for_cba": false}, {"provider_id": 20304299, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #436", "practiceaddress1": "5341 HIGHWAY 20 S", "practiceaddress2": null, "practicecity": "COVINGTON", "practicestate": "GA", "practicezip9code": 300164409, "telephonenumber": 7707884008, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.54756, "longitude": -84.01691, "is_contracted_for_cba": false}, {"provider_id": 20320835, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "NORTH CAROLINA CVS PHARMACY LLC", "practiceaddress1": "4000 BATTLEGROUND AVE", "practiceaddress2": null, "practicecity": "GREENSBORO", "practicestate": "NC", "practicezip9code": 274109296, "telephonenumber": 3362827908, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.15702, "longitude": -79.87291, "is_contracted_for_cba": false}, {"provider_id": 20320829, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "NORTH CAROLINA CVS PHARMACY LLC", "practiceaddress1": "1106B MAIN STREET EXT", "practiceaddress2": null, "practicecity": "SWANSBORO", "practicestate": "NC", "practicezip9code": 285849114, "telephonenumber": 9107085008, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.69519, "longitude": -77.12582, "is_contracted_for_cba": false}, {"provider_id": 20320823, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 11348", "practiceaddress1": "129 NINE FOOT RD", "practiceaddress2": null, "practicecity": "NEWPORT", "practicestate": "NC", "practicezip9code": 285709251, "telephonenumber": 2527774279, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.78943, "longitude": -76.87802, "is_contracted_for_cba": false}, {"provider_id": 20320037, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 00947", "practiceaddress1": "28 ABBY RD", "practiceaddress2": null, "practicecity": "PALMYRA", "practicestate": "VA", "practicezip9code": 229632085, "telephonenumber": 4345892278, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.89942, "longitude": -78.31225, "is_contracted_for_cba": false}, {"provider_id": 20364359, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7832", "practiceaddress1": "3339 E ANAHEIM ST", "practiceaddress2": null, "practicecity": "LONG BEACH", "practicestate": "CA", "practicezip9code": 908044032, "telephonenumber": 5625975338, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.78268, "longitude": -118.15293, "is_contracted_for_cba": false}, {"provider_id": 20364347, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "INTER PR 3 & PR 5 KM 77", "practiceaddress2": "CENTRO COMERCIAL PLAZA MALL", "practicecity": "HUMACAO", "practicestate": "PR", "practicezip9code": 792, "telephonenumber": 7878521330, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 18.13802, "longitude": -65.78849, "is_contracted_for_cba": false}, {"provider_id": 34356902, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "INT PR1 PR34 AVE DEGETAU", "practiceaddress2": null, "practicecity": "CAGUAS", "practicestate": "PR", "practicezip9code": 725, "telephonenumber": 7877046500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 18.2251685999, "longitude": -66.0481872665, "is_contracted_for_cba": false}, {"provider_id": 20304719, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #463", "practiceaddress1": "2295 TOWNE LAKE PKWY", "practiceaddress2": null, "practicecity": "WOODSTOCK", "practicestate": "GA", "practicezip9code": 301895520, "telephonenumber": 7705172088, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.12845, "longitude": -84.56877, "is_contracted_for_cba": false}, {"provider_id": 20304635, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #418", "practiceaddress1": "311 EAST GWINNETT ST", "practiceaddress2": null, "practicecity": "SAVANNAH", "practicestate": "GA", "practicezip9code": 314015808, "telephonenumber": 9122312266, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.06614, "longitude": -81.09249, "is_contracted_for_cba": false}, {"provider_id": 20563583, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "MARIANO'S PHARMACY #8537", "practiceaddress1": "1300 S NAPER BLVD", "practiceaddress2": null, "practicecity": "NAPERVILLE", "practicestate": "IL", "practicezip9code": 605407354, "telephonenumber": 6306379921, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.75034, "longitude": -88.1149, "is_contracted_for_cba": false}, {"provider_id": 20563967, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "MARIANO'S PHARMACY #8534", "practiceaddress1": "1500N CLYBOURN AVE C-104", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606103030, "telephonenumber": 3124759691, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.90861, "longitude": -87.64649, "is_contracted_for_cba": false}, {"provider_id": 20563925, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "MARIANOS PHARMACY 38532", "practiceaddress1": "2323 CAPITAL DR", "practiceaddress2": null, "practicecity": "NORTHBROOK", "practicestate": "IL", "practicezip9code": 600626144, "telephonenumber": 8475130077, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.11298, "longitude": -87.87581, "is_contracted_for_cba": false}, {"provider_id": 20337035, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06078", "practiceaddress1": "175 W EADS PKWY", "practiceaddress2": null, "practicecity": "LAWRENCEBURG", "practicestate": "IN", "practicezip9code": 470251174, "telephonenumber": 8125375711, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.09665, "longitude": -84.85656, "is_contracted_for_cba": false}, {"provider_id": 20563193, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK 'N SAVE PHARMACY #8118", "practiceaddress1": "2400 W WISCONSIN AVE", "practiceaddress2": null, "practicecity": "GRAND CHUTE", "practicestate": "WI", "practicezip9code": 549143109, "telephonenumber": 9208310400, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.27335, "longitude": -88.44691, "is_contracted_for_cba": false}, {"provider_id": 20563637, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK'N SAVE PHARMACY #6867", "practiceaddress1": "9200N GREEN BAY RD", "practiceaddress2": null, "practicecity": "BROWN DEER", "practicestate": "WI", "practicezip9code": 532091104, "telephonenumber": 4143547213, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.18542, "longitude": -87.96387, "is_contracted_for_cba": false}, {"provider_id": 20340203, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY # 3280", "practiceaddress1": "255 OLD CAPITAL PLZ NW", "practiceaddress2": null, "practicecity": "CORYDON", "practicestate": "IN", "practicezip9code": 471122081, "telephonenumber": 8127387191, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.22682, "longitude": -86.13347, "is_contracted_for_cba": false}, {"provider_id": 20340197, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY # 7791", "practiceaddress1": "8330 CRAWFORDSVILLE RD", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462341714, "telephonenumber": 3172974900, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.81107, "longitude": -86.30897, "is_contracted_for_cba": false}, {"provider_id": 20364941, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2171", "practiceaddress1": "700 E DERENNE AVE", "practiceaddress2": null, "practicecity": "SAVANNAH", "practicestate": "GA", "practicezip9code": 314056716, "telephonenumber": 9123544853, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.02579, "longitude": -81.09717, "is_contracted_for_cba": false}, {"provider_id": 20396705, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #17043", "practiceaddress1": "1115 OLD TOWNE RD", "practiceaddress2": null, "practicecity": "CHARLESTON", "practicestate": "SC", "practicezip9code": 294076062, "telephonenumber": 8437665593, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.79847, "longitude": -79.9965, "is_contracted_for_cba": false}, {"provider_id": 20322041, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07048", "practiceaddress1": "7295 BEACH DRIVE", "practiceaddress2": null, "practicecity": "OCEAN ISLE BEACH", "practicestate": "NC", "practicezip9code": 284695515, "telephonenumber": 9105790970, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.89752, "longitude": -78.48454, "is_contracted_for_cba": false}, {"provider_id": 20329187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01624", "practiceaddress1": "5001 JONESTOWN RD", "practiceaddress2": null, "practicecity": "HARRISBURG", "practicestate": "PA", "practicezip9code": 171122922, "telephonenumber": 7175454229, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.30775, "longitude": -76.80431, "is_contracted_for_cba": false}, {"provider_id": 20331077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHAMACY 01774", "practiceaddress1": "100 PROVIDENCE MAIN ST NW", "practiceaddress2": "STE G", "practicecity": "HUNTSVILLE", "practicestate": "AL", "practicezip9code": 358064827, "telephonenumber": 2568372057, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.74893, "longitude": -86.69338, "is_contracted_for_cba": false}, {"provider_id": 20331335, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #16027", "practiceaddress1": "13201 RIDGEDALE DR", "practiceaddress2": null, "practicecity": "MINNETONKA", "practicestate": "MN", "practicezip9code": 553051809, "telephonenumber": 9525428266, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 44.97048, "longitude": -93.4456, "is_contracted_for_cba": false}, {"provider_id": 20331305, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #17269", "practiceaddress1": "8900 HWY 7", "practiceaddress2": null, "practicecity": "MINNEAPOLIS", "practicestate": "MN", "practicezip9code": 554263919, "telephonenumber": 9529358407, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44.93514, "longitude": -93.3896, "is_contracted_for_cba": false}, {"provider_id": 20398667, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4865", "practiceaddress1": "515 CARLYLE AVE", "practiceaddress2": null, "practicecity": "BELLEVILLE", "practicestate": "IL", "practicezip9code": 622216223, "telephonenumber": 6182221827, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.51612, "longitude": -89.95818, "is_contracted_for_cba": false}, {"provider_id": 20395835, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5156", "practiceaddress1": "7800 N CORTARO RD", "practiceaddress2": null, "practicecity": "TUCSON", "practicestate": "AZ", "practicezip9code": 857438326, "telephonenumber": 5205728699, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.34907, "longitude": -111.0985, "is_contracted_for_cba": false}, {"provider_id": 20395823, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12901", "practiceaddress1": "3411 BROADWAY AVE", "practiceaddress2": null, "practicecity": "NORTH BEND", "practicestate": "OR", "practicezip9code": 974591201, "telephonenumber": 5417560118, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.39092, "longitude": -124.23909, "is_contracted_for_cba": false}, {"provider_id": 20306249, "acceptsassignement": true, "participationbegindate": 1683676800000, "businessname": "5 STARS DME LLC", "practicename": "5 STARS DME LLC", "practiceaddress1": "501 MARINA", "practiceaddress2": "1A", "practicecity": "LAREDO", "practicestate": "TX", "practicezip9code": 780464065, "telephonenumber": 9567013509, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 27.4361, "longitude": -99.48043, "is_contracted_for_cba": false}, {"provider_id": 20395781, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS # 3132", "practiceaddress1": "2415 E UNION HILLS DR", "practiceaddress2": null, "practicecity": "PHOENIX", "practicestate": "AZ", "practicezip9code": 850503146, "telephonenumber": 6028670561, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.65496, "longitude": -112.02939, "is_contracted_for_cba": false}, {"provider_id": 20306309, "acceptsassignement": true, "participationbegindate": 1683504000000, "businessname": "SANFORD HEALTH OF NORTHERN MINNESOTA", "practicename": "SANFORD BEMIDJI INFUSION PHARMACY", "practiceaddress1": "1233 34TH ST NW", "practiceaddress2": "STE B", "practicecity": "BEMIDJI", "practicestate": "MN", "practicezip9code": 566015112, "telephonenumber": 2183334770, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies", "latitude": 47.5015, "longitude": -94.90041, "is_contracted_for_cba": false}, {"provider_id": 20306279, "acceptsassignement": false, "participationbegindate": 1683504000000, "businessname": "THE PINK TENT, LLC", "practicename": "THE PINK TENT", "practiceaddress1": "670 S FERGUSON AVE", "practiceaddress2": "STE 2A", "practicecity": "BOZEMAN", "practicestate": "MT", "practicezip9code": 597186493, "telephonenumber": 4065512178, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Breast Prostheses and/or Accessories|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 45.67234, "longitude": -111.09367, "is_contracted_for_cba": false}, {"provider_id": 20564057, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK 'N SAVE PHARMACY #6368", "practiceaddress1": "17295 W CAPITOL DR", "practiceaddress2": null, "practicecity": "BROOKFIELD", "practicestate": "WI", "practicezip9code": 530452004, "telephonenumber": 2623731080, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.08989, "longitude": -88.12686, "is_contracted_for_cba": false}, {"provider_id": 20563151, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "ROUNDYS SUPERMARKETS INC", "practiceaddress1": "1008 MILWAUKEE AVE", "practiceaddress2": null, "practicecity": "BURLINGTON", "practicestate": "WI", "practicezip9code": 531051362, "telephonenumber": 2627671446, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.68866, "longitude": -88.26912, "is_contracted_for_cba": false}, {"provider_id": 20316611, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06969", "practiceaddress1": "3611 COLLEGE AVE", "practiceaddress2": null, "practicecity": "SNYDER", "practicestate": "TX", "practicezip9code": 795494636, "telephonenumber": 3255732673, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.70519, "longitude": -100.91922, "is_contracted_for_cba": false}, {"provider_id": 20316605, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06971", "practiceaddress1": "4210 COLLEGE HILLS BLVD", "practiceaddress2": null, "practicecity": "SAN ANGELO", "practicestate": "TX", "practicezip9code": 769046509, "telephonenumber": 9159428602, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.42117, "longitude": -100.48453, "is_contracted_for_cba": false}, {"provider_id": 20316587, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 07080", "practiceaddress1": "1000 N FIRST ST", "practiceaddress2": null, "practicecity": "ROBSTOWN", "practicestate": "TX", "practicezip9code": 78380, "telephonenumber": 3613877591, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 27.79909, "longitude": -97.66741, "is_contracted_for_cba": false}, {"provider_id": 20334707, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03999", "practiceaddress1": "401 CHESTNUT ST", "practiceaddress2": null, "practicecity": "CARNEGIE", "practicestate": "PA", "practicezip9code": 151062777, "telephonenumber": 4122795020, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.41011, "longitude": -80.08232, "is_contracted_for_cba": false}, {"provider_id": 20306405, "acceptsassignement": true, "participationbegindate": 1682812800000, "businessname": "PHARMCARE USA OF OHIO LLC", "practicename": "PHARMCARE USA OF BRUNSWICK", "practiceaddress1": "1130 INDUSTRIAL PKWY N", "practiceaddress2": "STE 1", "practicecity": "BRUNSWICK", "practicestate": "OH", "practicezip9code": 442125605, "telephonenumber": 8662193619, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "latitude": 41.24571, "longitude": -81.79846, "is_contracted_for_cba": false}, {"provider_id": 20317523, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06283", "practiceaddress1": "817 W MAIN ST", "practiceaddress2": null, "practicecity": "DANVILLE", "practicestate": "VA", "practicezip9code": 245414204, "telephonenumber": 4347930231, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.56997, "longitude": -79.42322, "is_contracted_for_cba": false}, {"provider_id": 20328791, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02867", "practiceaddress1": "1937 MACDADE BLVD", "practiceaddress2": null, "practicecity": "FOLSOM", "practicestate": "PA", "practicezip9code": 190331214, "telephonenumber": 6102371301, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.89743, "longitude": -75.3176, "is_contracted_for_cba": false}, {"provider_id": 20336267, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 00722", "practiceaddress1": "334 BALTIMORE PIKE", "practiceaddress2": null, "practicecity": "SPRINGFIELD", "practicestate": "PA", "practicezip9code": 190643631, "telephonenumber": 6105431765, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.92216, "longitude": -75.31934, "is_contracted_for_cba": false}, {"provider_id": 20328197, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "PENNSYLVANIA CVS PHARMACY LLC", "practiceaddress1": "8931 ROUTE 30", "practiceaddress2": null, "practicecity": "NORTH HUNTINGDON", "practicestate": "PA", "practicezip9code": 156422704, "telephonenumber": 7248635398, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.32033, "longitude": -79.69142, "is_contracted_for_cba": false}, {"provider_id": 20340293, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY 6565", "practiceaddress1": "1466 W OAK ST", "practiceaddress2": null, "practicecity": "ZIONSVILLE", "practicestate": "IN", "practicezip9code": 460771800, "telephonenumber": 3178736438, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.95015, "longitude": -86.27959, "is_contracted_for_cba": false}, {"provider_id": 20340287, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06597", "practiceaddress1": "10001 E. WASHINGTON STREET", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462292828, "telephonenumber": 3178976323, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.77486, "longitude": -85.98892, "is_contracted_for_cba": false}, {"provider_id": 20340281, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06722", "practiceaddress1": "103 E HACKBERRY ST", "practiceaddress2": null, "practicecity": "SALEM", "practicestate": "IN", "practicezip9code": 471672001, "telephonenumber": 8128836929, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.60865, "longitude": -86.10015, "is_contracted_for_cba": false}, {"provider_id": 20332679, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #08152", "practiceaddress1": "22060 OUTER DR", "practiceaddress2": null, "practicecity": "DEARBORN", "practicestate": "MI", "practicezip9code": 481243932, "telephonenumber": 3132747651, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.28464, "longitude": -83.23265, "is_contracted_for_cba": false}, {"provider_id": 20399975, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4875", "practiceaddress1": "3033 S 14TH ST", "practiceaddress2": null, "practicecity": "ABILENE", "practicestate": "TX", "practicezip9code": 796055144, "telephonenumber": 3257951440, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.43212, "longitude": -99.7589, "is_contracted_for_cba": false}, {"provider_id": 20400287, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5165", "practiceaddress1": "204 HIGHWAY 80 E", "practiceaddress2": null, "practicecity": "CLINTON", "practicestate": "MS", "practicezip9code": 390564716, "telephonenumber": 6019261179, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.33589, "longitude": -90.32416, "is_contracted_for_cba": false}, {"provider_id": 23281057, "acceptsassignement": true, "participationbegindate": 1702339200000, "businessname": "PREMIER HOLDINGS MANAGEMENT INC", "practicename": "PREMIER HOLDINGS MANAGEMENT INC", "practiceaddress1": "146 HENDRICKSON AVE", "practiceaddress2": null, "practicecity": "LYNBROOK", "practicestate": "NY", "practicezip9code": 115631038, "telephonenumber": 5162181247, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Breast Prostheses and/or Accessories|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.6654766578, "longitude": -73.6781636503, "is_contracted_for_cba": false}, {"provider_id": 23281075, "acceptsassignement": true, "participationbegindate": 1702080000000, "businessname": "JACKSON MEDICAL SERVICE SUPPLIES & EQUIPMENT", "practicename": "JACKSON MEDICAL SERVICE SUPPLIES &", "practiceaddress1": "2930 HILLTOP MALL RD", "practiceaddress2": "STE B", "practicecity": "RICHMOND", "practicestate": "CA", "practicezip9code": 948062197, "telephonenumber": 5102221075, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 37.977872001, "longitude": -122.3312419943, "is_contracted_for_cba": false}, {"provider_id": 20317805, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01534", "practiceaddress1": "1301 EAST NINE MILE RD", "practiceaddress2": null, "practicecity": "HIGHLAND SPRINGS", "practicestate": "VA", "practicezip9code": 230752305, "telephonenumber": 8047376493, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.53604, "longitude": -77.31858, "is_contracted_for_cba": false}, {"provider_id": 20318051, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01539", "practiceaddress1": "10805 TIDEWATER TRL", "practiceaddress2": null, "practicecity": "FREDERICKSBURG", "practicestate": "VA", "practicezip9code": 224082048, "telephonenumber": 5403683390, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.25454, "longitude": -77.42763, "is_contracted_for_cba": false}, {"provider_id": 20318045, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01542", "practiceaddress1": "629 COLONIAL HEIGHTS", "practiceaddress2": null, "practicecity": "COLONIAL HEIGHTS", "practicestate": "VA", "practicezip9code": 238343421, "telephonenumber": 8045263506, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.24687, "longitude": -77.40323, "is_contracted_for_cba": false}, {"provider_id": 20359475, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5639", "practiceaddress1": "320 S WATER ST", "practiceaddress2": null, "practicecity": "KENT", "practicestate": "OH", "practicezip9code": 442403528, "telephonenumber": 3306775650, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.1506, "longitude": -81.35898, "is_contracted_for_cba": false}, {"provider_id": 20399717, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #03564", "practiceaddress1": "99 HARVARD ST", "practiceaddress2": null, "practicecity": "BROOKLINE", "practicestate": "MA", "practicezip9code": 24466403, "telephonenumber": 6177314536, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.33619, "longitude": -71.12063, "is_contracted_for_cba": false}, {"provider_id": 20392517, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4926", "practiceaddress1": "7001 FRANKFORD AVE", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191351605, "telephonenumber": 2155430715, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.03448, "longitude": -75.04502, "is_contracted_for_cba": false}, {"provider_id": 20392439, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3136", "practiceaddress1": "1201 CAMP JACKSON RD", "practiceaddress2": null, "practicecity": "CAHOKIA", "practicestate": "IL", "practicezip9code": 622062231, "telephonenumber": 6183322904, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.56089, "longitude": -90.1741, "is_contracted_for_cba": false}, {"provider_id": 20399753, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4351", "practiceaddress1": "112 BROWNS WAY RD", "practiceaddress2": null, "practicecity": "MIDLOTHIAN", "practicestate": "VA", "practicezip9code": 231149507, "telephonenumber": 8048970977, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.49699, "longitude": -77.63827, "is_contracted_for_cba": false}, {"provider_id": 20400299, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04134", "practiceaddress1": "11724 RESEARCH BLVD", "practiceaddress2": null, "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787592446, "telephonenumber": 5122502070, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.42069, "longitude": -97.74771, "is_contracted_for_cba": false}, {"provider_id": 20359463, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5413", "practiceaddress1": "600 COUNTY ROAD 10 NE", "practiceaddress2": null, "practicecity": "BLAINE", "practicestate": "MN", "practicezip9code": 554342329, "telephonenumber": 7637869081, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 45.12666, "longitude": -93.25519, "is_contracted_for_cba": false}, {"provider_id": 20306495, "acceptsassignement": false, "participationbegindate": 1681776000000, "businessname": "MOUNTAIN PEAK ASSOCIATES LLC", "practicename": "YOU CAN HOME MEDICAL", "practiceaddress1": "8086 W BOWLES AVE", "practiceaddress2": "UNIT G1", "practicecity": "LITTLETON", "practicestate": "CO", "practicezip9code": 801233085, "telephonenumber": 7207401836, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Lymphedema Compression Treatment Items", "latitude": 39.60964, "longitude": -105.0868, "is_contracted_for_cba": false}, {"provider_id": 20324309, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17553", "practiceaddress1": "1040 NE CORONADO DR", "practiceaddress2": null, "practicecity": "BLUE SPRINGS", "practicestate": "MO", "practicezip9code": 640142971, "telephonenumber": 8166223401, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.02625, "longitude": -94.24355, "is_contracted_for_cba": false}, {"provider_id": 20339879, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #04368", "practiceaddress1": "801 MAIN ST", "practiceaddress2": null, "practicecity": "MUNSTER", "practicestate": "IN", "practicezip9code": 463214066, "telephonenumber": 2199242491, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.52282, "longitude": -87.50661, "is_contracted_for_cba": false}, {"provider_id": 20359121, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5024", "practiceaddress1": "2415 SW 75TH ST", "practiceaddress2": null, "practicecity": "GAINESVILLE", "practicestate": "FL", "practicezip9code": 326088330, "telephonenumber": 3523339704, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.63137, "longitude": -82.42237, "is_contracted_for_cba": false}, {"provider_id": 20393789, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5291", "practiceaddress1": "13664 23 MILE RD", "practiceaddress2": null, "practicecity": "SHELBY TOWNSHIP", "practicestate": "MI", "practicezip9code": 483152952, "telephonenumber": 5862471199, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.67021, "longitude": -82.99405, "is_contracted_for_cba": false}, {"provider_id": 20322671, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #11312", "practiceaddress1": "1030 MAIN ST", "practiceaddress2": null, "practicecity": "LEXINGTON", "practicestate": "MO", "practicezip9code": 640671345, "telephonenumber": 6602592258, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.18561, "longitude": -93.88278, "is_contracted_for_cba": false}, {"provider_id": 20310893, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16988", "practiceaddress1": "21365 SW BALER WAY", "practiceaddress2": null, "practicecity": "SHERWOOD", "practicestate": "OR", "practicezip9code": 971408989, "telephonenumber": 5036106001, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.36348, "longitude": -122.84292, "is_contracted_for_cba": false}, {"provider_id": 20333825, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #00445", "practiceaddress1": "51000 ROMEO PLANK RD", "practiceaddress2": null, "practicecity": "MACOMB", "practicestate": "MI", "practicezip9code": 480424128, "telephonenumber": 5869928570, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.67236, "longitude": -82.94074, "is_contracted_for_cba": false}, {"provider_id": 20392391, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5028", "practiceaddress1": "3500 GALLATIN PIKE", "practiceaddress2": null, "practicecity": "NASHVILLE", "practicestate": "TN", "practicezip9code": 372162604, "telephonenumber": 6152282982, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.2122, "longitude": -86.73205, "is_contracted_for_cba": false}, {"provider_id": 20373719, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1321 OXFORD ST", "practiceaddress2": null, "practicecity": "WORTHINGTON", "practicestate": "MN", "practicezip9code": 561871761, "telephonenumber": 5073727496, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.63128, "longitude": -95.59494, "is_contracted_for_cba": false}, {"provider_id": 20320001, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY 16992", "practiceaddress1": "4037 DURHAM CHAPEL HILL BLVD", "practiceaddress2": null, "practicecity": "DURHAM", "practicestate": "NC", "practicezip9code": 277072516, "telephonenumber": 9197650009, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.96874, "longitude": -78.96001, "is_contracted_for_cba": false}, {"provider_id": 20320331, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17605", "practiceaddress1": "3001 MARKET CENTER DR", "practiceaddress2": null, "practicecity": "MORRISVILLE", "practicestate": "NC", "practicezip9code": 275607505, "telephonenumber": 9193792181, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.80722, "longitude": -78.81586, "is_contracted_for_cba": false}, {"provider_id": 20320151, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16930", "practiceaddress1": "115 RIVER HILLS RD", "practiceaddress2": null, "practicecity": "ASHEVILLE", "practicestate": "NC", "practicezip9code": 288052550, "telephonenumber": 8282984262, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.57365, "longitude": -82.52062, "is_contracted_for_cba": false}, {"provider_id": 20340125, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #04649", "practiceaddress1": "10580 E 96TH ST", "practiceaddress2": null, "practicecity": "FISHERS", "practicestate": "IN", "practicezip9code": 460379643, "telephonenumber": 3178496406, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.9272, "longitude": -85.98021, "is_contracted_for_cba": false}, {"provider_id": 20355437, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02598", "practiceaddress1": "7685 S RAINBOW BLVD", "practiceaddress2": null, "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891395477, "telephonenumber": 7026143094, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.04959, "longitude": -115.2433, "is_contracted_for_cba": false}, {"provider_id": 20372303, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1196 OLD COUNTRY RD", "practiceaddress2": null, "practicecity": "RIVERHEAD", "practicestate": "NY", "practicezip9code": 119012066, "telephonenumber": 6312080239, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.92991, "longitude": -72.68163, "is_contracted_for_cba": false}, {"provider_id": 20368835, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6181", "practiceaddress1": "5475 MURRELL RD", "practiceaddress2": null, "practicecity": "ROCKLEDGE", "practicestate": "FL", "practicezip9code": 329556665, "telephonenumber": 3216313732, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.26602, "longitude": -80.71743, "is_contracted_for_cba": false}, {"provider_id": 20306579, "acceptsassignement": true, "participationbegindate": 1681430400000, "businessname": "DEZZ INC", "practicename": "DEZZ INC", "practiceaddress1": "735 KINGSBAY RD", "practiceaddress2": null, "practicecity": "SAINT MARYS", "practicestate": "GA", "practicezip9code": 315583807, "telephonenumber": 9126737777, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Surgical Dressings", "latitude": 30.78146, "longitude": -81.59817, "is_contracted_for_cba": false}, {"provider_id": 20319371, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01980", "practiceaddress1": "7048 MECHANICSVILLE", "practiceaddress2": null, "practicecity": "MECHANICSVLLE", "practicestate": "VA", "practicezip9code": 231117101, "telephonenumber": 8047309498, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.61243, "longitude": -77.3378, "is_contracted_for_cba": false}, {"provider_id": 20322281, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16067", "practiceaddress1": "2400 BERNADETTE DR", "practiceaddress2": null, "practicecity": "COLUMBIA", "practicestate": "MO", "practicezip9code": 652034616, "telephonenumber": 5734459545, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.96615, "longitude": -92.3762, "is_contracted_for_cba": false}, {"provider_id": 20371685, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #1002", "practiceaddress1": "3255 VICKSBURG LN N", "practiceaddress2": null, "practicecity": "PLYMOUTH", "practicestate": "MN", "practicezip9code": 554471317, "telephonenumber": 7632538917, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 45.01729, "longitude": -93.48187, "is_contracted_for_cba": false}, {"provider_id": 20371673, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02156", "practiceaddress1": "2551 W MAIN ST", "practiceaddress2": null, "practicecity": "ALHAMBRA", "practicestate": "CA", "practicezip9code": 918011652, "telephonenumber": 6262811637, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.09529, "longitude": -118.15168, "is_contracted_for_cba": false}, {"provider_id": 20371661, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #09762", "practiceaddress1": "2909 MURFREESBORO PIKE", "practiceaddress2": null, "practicecity": "ANTIOCH", "practicestate": "TN", "practicezip9code": 370132227, "telephonenumber": 6153664280, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.06401, "longitude": -86.62852, "is_contracted_for_cba": false}, {"provider_id": 20371655, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "420 S MAIN ST", "practiceaddress2": null, "practicecity": "SPRINGVILLE", "practicestate": "UT", "practicezip9code": 846632251, "telephonenumber": 8018531214, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.16039, "longitude": -111.61077, "is_contracted_for_cba": false}, {"provider_id": 20355329, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #1337", "practiceaddress1": "6421 MARKET AVE N", "practiceaddress2": null, "practicecity": "CANTON", "practicestate": "OH", "practicezip9code": 447212490, "telephonenumber": 3302441435, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.87589, "longitude": -81.36392, "is_contracted_for_cba": false}, {"provider_id": 20355407, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9609", "practiceaddress1": "5305 BUSINESS HIGHWAY 51 S", "practiceaddress2": null, "practicecity": "WESTON", "practicestate": "WI", "practicezip9code": 544761324, "telephonenumber": 7153559640, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.90873, "longitude": -89.60404, "is_contracted_for_cba": false}, {"provider_id": 20322251, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16623", "practiceaddress1": "3849 VOGEL RD", "practiceaddress2": null, "practicecity": "ARNOLD", "practicestate": "MO", "practicezip9code": 630103776, "telephonenumber": 6362871339, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.41567, "longitude": -90.39225, "is_contracted_for_cba": false}, {"provider_id": 20313299, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY INC", "practiceaddress1": "9670 PROMINENT PT", "practiceaddress2": null, "practicecity": "COLORADO SPRINGS", "practicestate": "CO", "practicezip9code": 809245000, "telephonenumber": 7193024267, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.97401, "longitude": -104.74554, "is_contracted_for_cba": false}, {"provider_id": 20313227, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10995", "practiceaddress1": "12051 TIERRA ESTE RD", "practiceaddress2": null, "practicecity": "EL PASO", "practicestate": "TX", "practicezip9code": 799384573, "telephonenumber": 9159216302, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.77448, "longitude": -106.25143, "is_contracted_for_cba": false}, {"provider_id": 20313281, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16711", "practiceaddress1": "1001 E 120TH AVE", "practiceaddress2": null, "practicecity": "THORNTON", "practicestate": "CO", "practicezip9code": 802335711, "telephonenumber": 3032806273, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.91416, "longitude": -104.97425, "is_contracted_for_cba": false}, {"provider_id": 20328323, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08495", "practiceaddress1": "2363 OREGON PIKE", "practiceaddress2": null, "practicecity": "LANCASTER", "practicestate": "PA", "practicezip9code": 176014608, "telephonenumber": 7175601499, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Infusion Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.08948, "longitude": -76.28178, "is_contracted_for_cba": false}, {"provider_id": 20363717, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7160", "practiceaddress1": "4445 IVANREST AVE SW", "practiceaddress2": null, "practicecity": "GRANDVILLE", "practicestate": "MI", "practicezip9code": 494183150, "telephonenumber": 6165321065, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.88392, "longitude": -85.74339, "is_contracted_for_cba": false}, {"provider_id": 20331767, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #03538", "practiceaddress1": "5756 CLARKSTON RD", "practiceaddress2": null, "practicecity": "INDEPENDENCE", "practicestate": "MI", "practicezip9code": 483484706, "telephonenumber": 2486202761, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.75187, "longitude": -83.38177, "is_contracted_for_cba": false}, {"provider_id": 20358611, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5076", "practiceaddress1": "6800 OGDEN AVE", "practiceaddress2": null, "practicecity": "BERWYN", "practicestate": "IL", "practicezip9code": 604023643, "telephonenumber": 7087499061, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.82685, "longitude": -87.79348, "is_contracted_for_cba": false}, {"provider_id": 20354825, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9834", "practiceaddress1": "1098 N FRASER ST", "practiceaddress2": null, "practicecity": "GEORGETOWN", "practicestate": "SC", "practicezip9code": 294402849, "telephonenumber": 8435451732, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.38501, "longitude": -79.28785, "is_contracted_for_cba": false}, {"provider_id": 20355365, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10235", "practiceaddress1": "901 MAIN AVE", "practiceaddress2": null, "practicecity": "DE PERE", "practicestate": "WI", "practicezip9code": 541151305, "telephonenumber": 9209836153, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.45081, "longitude": -88.08472, "is_contracted_for_cba": false}, {"provider_id": 20326121, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARIZONA CVS STORES LLC", "practicename": "CVS PHARMACY #09217", "practiceaddress1": "10720 W BELL RD", "practiceaddress2": null, "practicecity": "SUN CITY", "practicestate": "AZ", "practicezip9code": 853511073, "telephonenumber": 6239722124, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.6382, "longitude": -112.29042, "is_contracted_for_cba": false}, {"provider_id": 20364119, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #06334", "practiceaddress1": "703 NEWBRIDGE RD", "practiceaddress2": null, "practicecity": "NORTH BELLMORE", "practicestate": "NY", "practicezip9code": 117101613, "telephonenumber": 5164099442, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.70513, "longitude": -73.54447, "is_contracted_for_cba": false}, {"provider_id": 20363969, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6942", "practiceaddress1": "6010 N FIGARDEN DR", "practiceaddress2": null, "practicecity": "FRESNO", "practicestate": "CA", "practicezip9code": 937227922, "telephonenumber": 5592714926, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.82358, "longitude": -119.87036, "is_contracted_for_cba": false}, {"provider_id": 20358659, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2875", "practiceaddress1": "1982 EIGHT MILE RD", "practiceaddress2": null, "practicecity": "CINCINNATI", "practicestate": "OH", "practicezip9code": 452552609, "telephonenumber": 5134744723, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.08731, "longitude": -84.32196, "is_contracted_for_cba": false}, {"provider_id": 20317733, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02011", "practiceaddress1": "100 DUNLOP CIRCLE DR", "practiceaddress2": null, "practicecity": "COLONIAL HEIGHTS", "practicestate": "VA", "practicezip9code": 238341818, "telephonenumber": 8045268002, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.26617, "longitude": -77.40009, "is_contracted_for_cba": false}, {"provider_id": 20319299, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01569", "practiceaddress1": "450 CHATHAM HEIGHTS RD", "practiceaddress2": null, "practicecity": "FREDERICKSBURG", "practicestate": "VA", "practicezip9code": 224052575, "telephonenumber": 5403733313, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.31517, "longitude": -77.45101, "is_contracted_for_cba": false}, {"provider_id": 20319527, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02343", "practiceaddress1": "5101 DUKE ST", "practiceaddress2": null, "practicecity": "ALEXANDRIA", "practicestate": "VA", "practicezip9code": 223042905, "telephonenumber": 7038237411, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.81221, "longitude": -77.11903, "is_contracted_for_cba": false}, {"provider_id": 20351357, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2697", "practiceaddress1": "9580 KENWOOD RD", "practiceaddress2": null, "practicecity": "BLUE ASH", "practicestate": "OH", "practicezip9code": 452426140, "telephonenumber": 5137914390, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.23161, "longitude": -84.37689, "is_contracted_for_cba": false}, {"provider_id": 20353103, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6868", "practiceaddress1": "330 W STATE BLVD", "practiceaddress2": null, "practicecity": "FORT WAYNE", "practicestate": "IN", "practicezip9code": 468083135, "telephonenumber": 2604825428, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0962, "longitude": -85.14582, "is_contracted_for_cba": false}, {"provider_id": 20340797, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #08680", "practiceaddress1": "2806 OLD US HIGHWAY 231 S", "practiceaddress2": null, "practicecity": "LAFAYETTE", "practicestate": "IN", "practicezip9code": 479092411, "telephonenumber": 7654776666, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.38915, "longitude": -86.90537, "is_contracted_for_cba": false}, {"provider_id": 20354861, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10347", "practiceaddress1": "901 S BURR ST", "practiceaddress2": null, "practicecity": "MITCHELL", "practicestate": "SD", "practicezip9code": 573014731, "telephonenumber": 6059963179, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.70169, "longitude": -98.01865, "is_contracted_for_cba": false}, {"provider_id": 20355347, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "6435 ALIANTE PKWY", "practiceaddress2": null, "practicecity": "NORTH LAS VEGAS", "practicestate": "NV", "practicezip9code": 890843196, "telephonenumber": 7026576508, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.27785, "longitude": -115.18044, "is_contracted_for_cba": false}, {"provider_id": 20367191, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "9426 S 700 E", "practiceaddress2": null, "practicecity": "SANDY", "practicestate": "UT", "practicezip9code": 840703460, "telephonenumber": 8013070071, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.58045, "longitude": -111.87231, "is_contracted_for_cba": false}, {"provider_id": 23280331, "acceptsassignement": true, "participationbegindate": 1701993600000, "businessname": "MEGACARE PHARMACY INC", "practicename": "MEGACARE PHARMACY INC", "practiceaddress1": "315 E KINGSBRIDGE RD", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104584443, "telephonenumber": 7186845088, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.862472882, "longitude": -73.8938826574, "is_contracted_for_cba": false}, {"provider_id": 20343563, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "LONGS DRUGS #03070", "practiceaddress1": "66-197 KAMEHAMEHA HWY", "practiceaddress2": "STE 1", "practicecity": "HALEIWA", "practicestate": "HI", "practicezip9code": 967121400, "telephonenumber": 8086379393, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 21.59778, "longitude": -158.10302, "is_contracted_for_cba": false}, {"provider_id": 20312477, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 11283", "practiceaddress1": "4025 MERCANTILE DR", "practiceaddress2": "STE 110", "practicecity": "LAKE OSWEGO", "practicestate": "OR", "practicezip9code": 970352518, "telephonenumber": 5033878167, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.4147, "longitude": -122.71723, "is_contracted_for_cba": false}, {"provider_id": 20312471, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 11392", "practiceaddress1": "1821 NE 33RD AVE", "practiceaddress2": null, "practicecity": "PORTLAND", "practicestate": "OR", "practicezip9code": 972125113, "telephonenumber": 5035356031, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.53612, "longitude": -122.63079, "is_contracted_for_cba": false}, {"provider_id": 20319407, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02169", "practiceaddress1": "10901 W BROAD ST", "practiceaddress2": null, "practicecity": "GLEN ALLEN", "practicestate": "VA", "practicezip9code": 230605935, "telephonenumber": 8049356916, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.64385, "longitude": -77.58521, "is_contracted_for_cba": false}, {"provider_id": 20307905, "acceptsassignement": true, "participationbegindate": 1673568000000, "businessname": "MAJOR PHARMACY CORP", "practicename": "MAJOR PHARMACY CORP.", "practiceaddress1": "7919 37TH AVE", "practiceaddress2": null, "practicecity": "JACKSON HEIGHTS", "practicestate": "NY", "practicezip9code": 113726747, "telephonenumber": 3473965413, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7494, "longitude": -73.88852, "is_contracted_for_cba": false}, {"provider_id": 20364821, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7071", "practiceaddress1": "13196 BELLAIRE BLVD", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770725102, "telephonenumber": 2815304918, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.70358, "longitude": -95.61386, "is_contracted_for_cba": false}, {"provider_id": 20313239, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17580", "practiceaddress1": "605 BOSTON POST RD E", "practiceaddress2": null, "practicecity": "MARLBOROUGH", "practicestate": "MA", "practicezip9code": 17523702, "telephonenumber": 5082516958, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.34867, "longitude": -71.50685, "is_contracted_for_cba": false}, {"provider_id": 20314697, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17295", "practiceaddress1": "551 S HOVER ST", "practiceaddress2": null, "practicecity": "LONGMONT", "practicestate": "CO", "practicezip9code": 805017920, "telephonenumber": 7208644394, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.1541, "longitude": -105.13079, "is_contracted_for_cba": false}, {"provider_id": 20313365, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16960", "practiceaddress1": "367 RUSSELL ST", "practiceaddress2": null, "practicecity": "HADLEY", "practicestate": "MA", "practicezip9code": 10359456, "telephonenumber": 4135866681, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.3586, "longitude": -72.5489, "is_contracted_for_cba": false}, {"provider_id": 20359421, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5595", "practiceaddress1": "1617 10TH ST", "practiceaddress2": null, "practicecity": "PORT HURON", "practicestate": "MI", "practicezip9code": 480605844, "telephonenumber": 8109875083, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.96678, "longitude": -82.4326, "is_contracted_for_cba": false}, {"provider_id": 20307959, "acceptsassignement": true, "participationbegindate": 1673481600000, "businessname": "TARLANI CORP", "practicename": "TARLANI HEALTHCARE", "practiceaddress1": "2349 HONOLULU AVE", "practiceaddress2": null, "practicecity": "MONTROSE", "practicestate": "CA", "practicezip9code": 910202512, "telephonenumber": 9514655555, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Surgical Dressings", "latitude": 34.20602, "longitude": -118.22928, "is_contracted_for_cba": false}, {"provider_id": 20321963, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07566", "practiceaddress1": "8765 HWY 52", "practiceaddress2": null, "practicecity": "ROCKWELL", "practicestate": "NC", "practicezip9code": 281388550, "telephonenumber": 7042792581, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.56193, "longitude": -80.41579, "is_contracted_for_cba": false}, {"provider_id": 20360675, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3423", "practiceaddress1": "1911 S FERRY ST", "practiceaddress2": null, "practicecity": "ANOKA", "practicestate": "MN", "practicezip9code": 553032143, "telephonenumber": 7635760388, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 45.19853, "longitude": -93.39317, "is_contracted_for_cba": false}, {"provider_id": 20400125, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04823", "practiceaddress1": "901 E PALM VALLEY BLVD", "practiceaddress2": null, "practicecity": "ROUND ROCK", "practicestate": "TX", "practicezip9code": 786643209, "telephonenumber": 5122488742, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.51818, "longitude": -97.66982, "is_contracted_for_cba": false}, {"provider_id": 20393039, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5802", "practiceaddress1": "100 E MCGALLIARD RD", "practiceaddress2": null, "practicecity": "MUNCIE", "practicestate": "IN", "practicezip9code": 473031166, "telephonenumber": 7652886171, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.2191, "longitude": -85.38621, "is_contracted_for_cba": false}, {"provider_id": 20393033, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5234", "practiceaddress1": "5435 S KEDZIE AVE", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606322642, "telephonenumber": 7734367396, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.79397, "longitude": -87.70345, "is_contracted_for_cba": false}, {"provider_id": 20332943, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #18072", "practiceaddress1": "2239 E COOK ST", "practiceaddress2": "STE 101", "practicecity": "SPRINGFIELD", "practicestate": "IL", "practicezip9code": 627031944, "telephonenumber": 2177531956, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.79473, "longitude": -89.62267, "is_contracted_for_cba": false}, {"provider_id": 20407463, "acceptsassignement": false, "participationbegindate": 1613088000000, "businessname": "B7 HEALTH", "practicename": "B7 HEALTH", "practiceaddress1": "2675 E SLAUSON AVE", "practiceaddress2": "STE A", "practicecity": "HUNTINGTON PARK", "practicestate": "CA", "practicezip9code": 902552926, "telephonenumber": 3234877007, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33.98931, "longitude": -118.22387, "is_contracted_for_cba": false}, {"provider_id": 20407493, "acceptsassignement": true, "participationbegindate": 1612915200000, "businessname": "FLORIDA HOSPITAL HOME INFUSION, LLP", "practicename": "FLORIDA HOSPITAL HOME INFUSION,LLP", "practiceaddress1": "11461 N US HIGHWAY 301", "practiceaddress2": "STE 105", "practicecity": "THONOTOSASSA", "practicestate": "FL", "practicezip9code": 335923541, "telephonenumber": 8134362900, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 28.0534, "longitude": -82.33203, "is_contracted_for_cba": false}, {"provider_id": 20344379, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO WHOLESALE CORPORATION", "practiceaddress1": "125 BEACON DR", "practiceaddress2": null, "practicecity": "HOLBROOK", "practicestate": "NY", "practicezip9code": 117414309, "telephonenumber": 6312448676, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.77182, "longitude": -73.05147, "is_contracted_for_cba": false}, {"provider_id": 20345183, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "PREFERRED ORTHOTIC AND PROSTHETIC SERVICES, INC", "practicename": "PREFERRED ORTHOTIC AND PROSTHETIC S", "practiceaddress1": "922 S 348TH ST", "practiceaddress2": null, "practicecity": "FEDERAL WAY", "practicestate": "WA", "practicezip9code": 980037021, "telephonenumber": 2539523887, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 47.28995, "longitude": -122.32204, "is_contracted_for_cba": false}, {"provider_id": 20312261, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALASKA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17404", "practiceaddress1": "1801 E PARKS HWY", "practiceaddress2": null, "practicecity": "WASILLA", "practicestate": "AK", "practicezip9code": 996547350, "telephonenumber": 9076317201, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 61.57576, "longitude": -149.40468, "is_contracted_for_cba": false}, {"provider_id": 20312249, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALASKA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17436", "practiceaddress1": "150 W 100TH AVE", "practiceaddress2": null, "practicecity": "ANCHORAGE", "practicestate": "AK", "practicezip9code": 995152673, "telephonenumber": 9072677501, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 61.13037, "longitude": -149.88099, "is_contracted_for_cba": false}, {"provider_id": 20331743, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #08307", "practiceaddress1": "1037 WOODWARD AVE", "practiceaddress2": null, "practicecity": "DETROIT", "practicestate": "MI", "practicezip9code": 482261905, "telephonenumber": 3139631007, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.33227, "longitude": -83.04737, "is_contracted_for_cba": false}, {"provider_id": 20393897, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "340 W WASHINGTON ST", "practiceaddress2": null, "practicecity": "BRAINERD", "practicestate": "MN", "practicezip9code": 564012924, "telephonenumber": 2188250027, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 46.35811, "longitude": -94.21607, "is_contracted_for_cba": false}, {"provider_id": 20393795, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "100 12TH AVE NE", "practiceaddress2": null, "practicecity": "NORMAN", "practicestate": "OK", "practicezip9code": 730715235, "telephonenumber": 4053292314, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.22218, "longitude": -97.42369, "is_contracted_for_cba": false}, {"provider_id": 20308097, "acceptsassignement": true, "participationbegindate": 1672876800000, "businessname": "S D AND B MEDICAL INC.", "practicename": "S D AND B MEDICAL INC.", "practiceaddress1": "780 LYNNHAVEN PKWY", "practiceaddress2": "STE 400", "practicecity": "VIRGINIA BEACH", "practicestate": "VA", "practicezip9code": 234527332, "telephonenumber": 7576157685, "specialitieslist": null, "providertypelist": "CERTIFIED ORTH/PROS/PEDORTHIST", "supplieslist": "Orthoses: Custom Fabricated", "latitude": 36.8154919226, "longitude": -76.0658837185, "is_contracted_for_cba": false}, {"provider_id": 20407571, "acceptsassignement": true, "participationbegindate": 1612396800000, "businessname": "R2 MEDICAL", "practicename": "R2 MEDICAL", "practiceaddress1": "2136 S RICHARDS ST", "practiceaddress2": null, "practicecity": "SALT LAKE CITY", "practicestate": "UT", "practicezip9code": 841152606, "telephonenumber": 8013088992, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Heat & Cold Applications|Pneumatic Compression Devices and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf", "latitude": 40.72461, "longitude": -111.89291, "is_contracted_for_cba": false}, {"provider_id": 20407589, "acceptsassignement": true, "participationbegindate": 1612310400000, "businessname": "MANNINGTON PHARMACY", "practicename": "MANNINGTON PHARMACY", "practiceaddress1": "720 E MAIN ST", "practiceaddress2": null, "practicecity": "MANNINGTON", "practicestate": "WV", "practicezip9code": 265821259, "telephonenumber": 3049863811, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Nebulizer Equipment and/or Supplies", "latitude": 39.52532, "longitude": -80.33674, "is_contracted_for_cba": false}, {"provider_id": 20360663, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3363", "practiceaddress1": "1505 E 86TH ST", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462402392, "telephonenumber": 3172549206, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.91243, "longitude": -86.13246, "is_contracted_for_cba": false}, {"provider_id": 20332805, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #16279", "practiceaddress1": "2621 W SCHAUMBURG RD", "practiceaddress2": null, "practicecity": "SCHAUMBURG", "practicestate": "IL", "practicezip9code": 601943894, "telephonenumber": 8477981238, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.02959, "longitude": -88.15395, "is_contracted_for_cba": false}, {"provider_id": 20333843, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 10607", "practiceaddress1": "106 WATTERS DR", "practiceaddress2": null, "practicecity": "DWIGHT", "practicestate": "IL", "practicezip9code": 604202200, "telephonenumber": 8155842140, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.09176, "longitude": -88.44276, "is_contracted_for_cba": false}, {"provider_id": 20318153, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "SHANDAR PHARMACY INC.", "practicename": "SHANDAR PHARMACY INC", "practiceaddress1": "3064 CONEY ISLAND AVE", "practiceaddress2": "# STORE4", "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112356475, "telephonenumber": 7186180540, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.58141, "longitude": -73.96002, "is_contracted_for_cba": false}, {"provider_id": 20313377, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17566", "practiceaddress1": "1021 S HIGHLINE PL", "practiceaddress2": null, "practicecity": "SIOUX FALLS", "practicestate": "SD", "practicezip9code": 571101000, "telephonenumber": 6053335601, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.53774, "longitude": -96.65469, "is_contracted_for_cba": false}, {"provider_id": 20313251, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17124", "practiceaddress1": "6100 PASEO DEL NORTE NE", "practiceaddress2": null, "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871131512, "telephonenumber": 5053460136, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.17431, "longitude": -106.57718, "is_contracted_for_cba": false}, {"provider_id": 20344205, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO PHARMACY #1025", "practiceaddress1": "245 STAFFORD PARK BLVD", "practiceaddress2": null, "practicecity": "STAFFORD TOWNSHIP", "practicestate": "NJ", "practicezip9code": 80502734, "telephonenumber": 6092422011, "specialitieslist": "Medical Supply Company Other|Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.71181, "longitude": -74.28327, "is_contracted_for_cba": false}, {"provider_id": 20312945, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17263", "practiceaddress1": "2171 PRAIRIE CENTER PKWY", "practiceaddress2": null, "practicecity": "BRIGHTON", "practicestate": "CO", "practicezip9code": 806017000, "telephonenumber": 3032199056, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.95418, "longitude": -104.77823, "is_contracted_for_cba": false}, {"provider_id": 20312819, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17116", "practiceaddress1": "10001 COMMONS ST", "practiceaddress2": null, "practicecity": "LONE TREE", "practicestate": "CO", "practicezip9code": 801245547, "telephonenumber": 3032091852, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.53801, "longitude": -104.87845, "is_contracted_for_cba": false}, {"provider_id": 20331833, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "EVERGREEN PROSTHETICS AND ORTHOTICS LLC", "practicename": "EVERGREEN PROSTHETICS & ORTHOTICS L", "practiceaddress1": "8614 E MILL PLAIN BLVD", "practiceaddress2": "STE 110", "practicecity": "VANCOUVER", "practicestate": "WA", "practicezip9code": 986642058, "telephonenumber": 3602132088, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 45.62326, "longitude": -122.58444, "is_contracted_for_cba": false}, {"provider_id": 20407709, "acceptsassignement": true, "participationbegindate": 1612137600000, "businessname": "ITALY FAMILY PHARMACY INC", "practicename": "ITALY FAMILY PHARMACY INC", "practiceaddress1": "102 E DANIELDALE ROAD", "practiceaddress2": "STE 100", "practicecity": "DUNCANVILLE", "practicestate": "TX", "practicezip9code": 75137, "telephonenumber": 4695132499, "specialitieslist": "Medical Supply Company Other|Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Breast Prostheses and/or Accessories|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 32.83725, "longitude": -96.94458, "is_contracted_for_cba": false}, {"provider_id": 20344451, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO WHOLESALE CORPORATION", "practiceaddress1": "1 INDUSTRIAL LN", "practiceaddress2": null, "practicecity": "NEW ROCHELLE", "practicestate": "NY", "practicezip9code": 108051203, "telephonenumber": 9146360291, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.89717, "longitude": -73.79364, "is_contracted_for_cba": false}, {"provider_id": 20345237, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06319", "practiceaddress1": "2902 PALMER HWY", "practiceaddress2": null, "practicecity": "TEXAS CITY", "practicestate": "TX", "practicezip9code": 775906815, "telephonenumber": 4099453426, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.39539, "longitude": -94.93809, "is_contracted_for_cba": false}, {"provider_id": 20333159, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #18009", "practiceaddress1": "5720 N BELT W", "practiceaddress2": null, "practicecity": "BELLEVILLE", "practicestate": "IL", "practicezip9code": 622264661, "telephonenumber": 6182358803, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.5416, "longitude": -90.03523, "is_contracted_for_cba": false}, {"provider_id": 20357975, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN #5149", "practiceaddress1": "1600 W ROOSEVELT RD", "practiceaddress2": null, "practicecity": "BROADVIEW", "practicestate": "IL", "practicezip9code": 601554024, "telephonenumber": 7083435323, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.86398, "longitude": -87.85243, "is_contracted_for_cba": false}, {"provider_id": 20334431, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10784", "practiceaddress1": "3770 SHERIDAN BLVD", "practiceaddress2": null, "practicecity": "DENVER", "practicestate": "CO", "practicezip9code": 802122052, "telephonenumber": 7208558477, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.76844, "longitude": -105.05312, "is_contracted_for_cba": false}, {"provider_id": 20314205, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16889", "practiceaddress1": "3201 PRESTON RD", "practiceaddress2": null, "practicecity": "FRISCO", "practicestate": "TX", "practicezip9code": 750349446, "telephonenumber": 9726686909, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.10435, "longitude": -96.80589, "is_contracted_for_cba": false}, {"provider_id": 20339339, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02138", "practiceaddress1": "8 PILGRIM HILL RD", "practiceaddress2": null, "practicecity": "PLYMOUTH", "practicestate": "MA", "practicezip9code": 23606123, "telephonenumber": 5087471276, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.94855, "longitude": -70.6856, "is_contracted_for_cba": false}, {"provider_id": 20314187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 17452", "practiceaddress1": "6931 FM 1960 RD E", "practiceaddress2": null, "practicecity": "HUMBLE", "practicestate": "TX", "practicezip9code": 773462705, "telephonenumber": 2813182238, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.99885, "longitude": -95.17229, "is_contracted_for_cba": false}, {"provider_id": 20333135, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "750 S RANDALL RD", "practiceaddress2": null, "practicecity": "ALGONQUIN", "practicestate": "IL", "practicezip9code": 601025915, "telephonenumber": 8474585341, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.165, "longitude": -88.33552, "is_contracted_for_cba": false}, {"provider_id": 20318135, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "YELLOWSTONE PHARMACY OF FORSYTH LLC", "practicename": "YELLOWSTONE PHARMACY OF FORSYTH", "practiceaddress1": "1025 MAIN ST", "practiceaddress2": null, "practicecity": "FORSYTH", "practicestate": "MT", "practicezip9code": 593279039, "telephonenumber": 4063462134, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 46.26634, "longitude": -106.67791, "is_contracted_for_cba": false}, {"provider_id": 20407841, "acceptsassignement": false, "participationbegindate": 1612137600000, "businessname": "AEROCARE HOLDINGS LLC", "practicename": "AEROCARE HOLDINGS LLC", "practiceaddress1": "512 YAMPA AVE", "practiceaddress2": null, "practicecity": "CRAIG", "practicestate": "CO", "practicezip9code": 816252612, "telephonenumber": 9708785883, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 40.51518, "longitude": -107.54741, "is_contracted_for_cba": false}, {"provider_id": 20407811, "acceptsassignement": false, "participationbegindate": 1612137600000, "businessname": "AEROCARE HOLDINGS LLC", "practicename": "AEROCARE", "practiceaddress1": "1535 G ST", "practiceaddress2": null, "practicecity": "SALIDA", "practicestate": "CO", "practicezip9code": 812012325, "telephonenumber": 7195393406, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 38.52473, "longitude": -106.00471, "is_contracted_for_cba": false}, {"provider_id": 20342093, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #03932", "practiceaddress1": "150 S MAIN ST", "practiceaddress2": null, "practicecity": "FORT BRAGG", "practicestate": "CA", "practicezip9code": 954374205, "telephonenumber": 7079610464, "specialitieslist": "Medical Supply Company Other|Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.44081, "longitude": -123.80577, "is_contracted_for_cba": false}, {"provider_id": 20313149, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16584", "practiceaddress1": "1 MYSTIC VIEW RD", "practiceaddress2": null, "practicecity": "EVERETT", "practicestate": "MA", "practicezip9code": 21492428, "telephonenumber": 6174200001, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.40213, "longitude": -71.07002, "is_contracted_for_cba": false}, {"provider_id": 20314145, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16866", "practiceaddress1": "1801 HWY 287 N", "practiceaddress2": null, "practicecity": "MANSFIELD", "practicestate": "TX", "practicezip9code": 760637533, "telephonenumber": 8174530259, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.59276, "longitude": -97.14429, "is_contracted_for_cba": false}, {"provider_id": 20331995, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 10881", "practiceaddress1": "35 ARTA DR", "practiceaddress2": null, "practicecity": "WESTLAKE", "practicestate": "TX", "practicezip9code": 762622013, "telephonenumber": 8174917364, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.03476, "longitude": -97.24941, "is_contracted_for_cba": false}, {"provider_id": 20341871, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09548", "practiceaddress1": "2501 ANTHEM VILLAGE DR", "practiceaddress2": null, "practicecity": "HENDERSON", "practicestate": "NV", "practicezip9code": 890525504, "telephonenumber": 7029904613, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.97988, "longitude": -115.09889, "is_contracted_for_cba": false}, {"provider_id": 20341559, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #03069", "practiceaddress1": "451 S REINO RD", "practiceaddress2": null, "practicecity": "NEWBURY PARK", "practicestate": "CA", "practicezip9code": 913204267, "telephonenumber": 8054994006, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.16815, "longitude": -118.95634, "is_contracted_for_cba": false}, {"provider_id": 20333147, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #18077", "practiceaddress1": "1701 E EMPIRE ST", "practiceaddress2": null, "practicecity": "BLOOMINGTON", "practicestate": "IL", "practicezip9code": 617043532, "telephonenumber": 3096627004, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.48799, "longitude": -88.9509, "is_contracted_for_cba": false}, {"provider_id": 20322137, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03593", "practiceaddress1": "2501 W ROOSEVELT BLVD", "practiceaddress2": null, "practicecity": "MONROE", "practicestate": "NC", "practicezip9code": 281105124, "telephonenumber": 7042831506, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.01437, "longitude": -80.56998, "is_contracted_for_cba": false}, {"provider_id": 20320727, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07539", "practiceaddress1": "1924 STATESVILLE BLVD", "practiceaddress2": null, "practicecity": "SALISBURY", "practicestate": "NC", "practicezip9code": 281442035, "telephonenumber": 7046361616, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.69374, "longitude": -80.51202, "is_contracted_for_cba": false}, {"provider_id": 20320925, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07008", "practiceaddress1": "333 W MILLS ST", "practiceaddress2": null, "practicecity": "COLUMBUS", "practicestate": "NC", "practicezip9code": 287228404, "telephonenumber": 8288946352, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.25421, "longitude": -82.19534, "is_contracted_for_cba": false}, {"provider_id": 23283355, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "HOOK- SUPERX, L.L.C.", "practiceaddress1": "436 E WASHINGTON BLVD", "practiceaddress2": "STE P", "practicecity": "FORT WAYNE", "practicestate": "IN", "practicezip9code": 468023210, "telephonenumber": 2602345453, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0779151186, "longitude": -85.1327398443, "is_contracted_for_cba": false}, {"provider_id": 20332685, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10947", "practiceaddress1": "1910 W STATE HIGHWAY 46", "practiceaddress2": null, "practicecity": "NEW BRAUNFELS", "practicestate": "TX", "practicezip9code": 781325245, "telephonenumber": 8306209926, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.72035, "longitude": -98.16807, "is_contracted_for_cba": false}, {"provider_id": 20315003, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17401", "practiceaddress1": "2025 N CENTRAL EXPY", "practiceaddress2": null, "practicecity": "MCKINNEY", "practicestate": "TX", "practicezip9code": 750702911, "telephonenumber": 4695254975, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.17994, "longitude": -96.63934, "is_contracted_for_cba": false}, {"provider_id": 20314943, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 17400", "practiceaddress1": "39739 LBJ FWY", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752373560, "telephonenumber": 4693413921, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.65365, "longitude": -96.86655, "is_contracted_for_cba": false}, {"provider_id": 20320631, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03319", "practiceaddress1": "9915 PARK CEDAR DR", "practiceaddress2": null, "practicecity": "CHARLOTTE", "practicestate": "NC", "practicezip9code": 282108905, "telephonenumber": 7045443263, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.09404, "longitude": -80.86595, "is_contracted_for_cba": false}, {"provider_id": 20333237, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "3100 MADISON AVE", "practiceaddress2": null, "practicecity": "GRANITE CITY", "practicestate": "IL", "practicezip9code": 620403651, "telephonenumber": 6184510521, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.71799, "longitude": -90.12312, "is_contracted_for_cba": false}, {"provider_id": 23282959, "acceptsassignement": true, "participationbegindate": 1611360000000, "businessname": "ELLSWORTH FOOT AND ANKLE CLINIC", "practicename": "ELLSWORTH FOOT AND ANKLE CLINIC", "practiceaddress1": "227 N WESTWOOD BLVD", "practiceaddress2": null, "practicecity": "PRICE", "practicestate": "UT", "practicezip9code": 845015500, "telephonenumber": 8012536886, "specialitieslist": null, "providertypelist": "NURSE PRACTITIONER|PHYSICIAN \u2013 PODIATRY", "supplieslist": "Heat & Cold Applications|Negative Pressure Wound Therapy Pumps/Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 39.6037740491, "longitude": -110.8343384465, "is_contracted_for_cba": false}, {"provider_id": 20341133, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "LONG'S DRUGS #09952", "practiceaddress1": "645 ALEKA LOOP", "practiceaddress2": null, "practicecity": "KAPAA", "practicestate": "HI", "practicezip9code": 967462099, "telephonenumber": 8088224918, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 22.05197, "longitude": -159.33193, "is_contracted_for_cba": false}, {"provider_id": 20363357, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2524", "practiceaddress1": "337 75TH AVE", "practiceaddress2": null, "practicecity": "ST PETE BEACH", "practicestate": "FL", "practicezip9code": 337061829, "telephonenumber": 7273677657, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.74325, "longitude": -82.74985, "is_contracted_for_cba": false}, {"provider_id": 20358269, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4642", "practiceaddress1": "5755 20TH ST", "practiceaddress2": null, "practicecity": "VERO BEACH", "practicestate": "FL", "practicezip9code": 329664636, "telephonenumber": 7727781772, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.63821, "longitude": -80.44607, "is_contracted_for_cba": false}, {"provider_id": 20358107, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4651", "practiceaddress1": "10236 COORS BYP NW", "practiceaddress2": null, "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871144088, "telephonenumber": 5058981730, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.2079, "longitude": -106.65847, "is_contracted_for_cba": false}, {"provider_id": 20358209, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4187", "practiceaddress1": "1941 SOUTHERN BLVD SE", "practiceaddress2": null, "practicecity": "RIO RANCHO", "practicestate": "NM", "practicezip9code": 871243510, "telephonenumber": 5058918186, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.24152, "longitude": -106.69812, "is_contracted_for_cba": false}, {"provider_id": 20437661, "acceptsassignement": true, "participationbegindate": 1546300800000, "businessname": "GERMAN DOBSON CVS LLC", "practicename": "GERMAN DOBSON CVS LLC", "practiceaddress1": "4040 N ORACLE RD", "practiceaddress2": null, "practicecity": "TUCSON", "practicestate": "AZ", "practicezip9code": 857052720, "telephonenumber": 5202021502, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.28012, "longitude": -110.97795, "is_contracted_for_cba": false}, {"provider_id": 20341187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09713", "practiceaddress1": "1043 EMERALD BAY RD", "practiceaddress2": null, "practicecity": "SOUTH LAKE TAHOE", "practicestate": "CA", "practicezip9code": 961506210, "telephonenumber": 5305441445, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.91064, "longitude": -120.00296, "is_contracted_for_cba": false}, {"provider_id": 20341229, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY # 09975", "practiceaddress1": "4400 COFFEE RD", "practiceaddress2": null, "practicecity": "BAKERSFIELD", "practicestate": "CA", "practicezip9code": 933085032, "telephonenumber": 6615881060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.39771, "longitude": -119.09211, "is_contracted_for_cba": false}, {"provider_id": 20314241, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16836", "practiceaddress1": "3909 E 42ND ST", "practiceaddress2": null, "practicecity": "ODESSA", "practicestate": "TX", "practicezip9code": 797625939, "telephonenumber": 4323661913, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.89155, "longitude": -102.3434, "is_contracted_for_cba": false}, {"provider_id": 20361599, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3129", "practiceaddress1": "6201 STELLHORN RD", "practiceaddress2": null, "practicecity": "FORT WAYNE", "practicestate": "IN", "practicezip9code": 468155349, "telephonenumber": 2604850755, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.12198, "longitude": -85.06515, "is_contracted_for_cba": false}, {"provider_id": 20358257, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #274", "practiceaddress1": "3822 PAXTON AVE", "practiceaddress2": null, "practicecity": "CINCINNATI", "practicestate": "OH", "practicezip9code": 452092399, "telephonenumber": 5138714615, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.1472, "longitude": -84.42866, "is_contracted_for_cba": false}, {"provider_id": 20358233, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #07693", "practiceaddress1": "225 N SADDLE CREEK RD", "practiceaddress2": null, "practicecity": "OMAHA", "practicestate": "NE", "practicezip9code": 681312228, "telephonenumber": 4025511797, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.26087, "longitude": -95.98035, "is_contracted_for_cba": false}, {"provider_id": 20362889, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4668", "practiceaddress1": "1003 N MAIN ST", "practiceaddress2": null, "practicecity": "CROWN POINT", "practicestate": "IN", "practicezip9code": 463072712, "telephonenumber": 2196636669, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.42864, "longitude": -87.3646, "is_contracted_for_cba": false}, {"provider_id": 20333321, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11067", "practiceaddress1": "2735 SIENNA PKWY", "practiceaddress2": null, "practicecity": "MISSOURI CITY", "practicestate": "TX", "practicezip9code": 77459, "telephonenumber": 4017651500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.49349, "longitude": -95.51926, "is_contracted_for_cba": false}, {"provider_id": 20384513, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #00700", "practiceaddress1": "CARR 14 KM 3.7", "practiceaddress2": "CENTRO COMERCIAL PONCE SUPER CENTER", "practicecity": "PONCE", "practicestate": "PR", "practicezip9code": 7164279, "telephonenumber": 7877094591, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 18.01061, "longitude": -66.5868, "is_contracted_for_cba": false}, {"provider_id": 20341973, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09397", "practiceaddress1": "4405 1ST ST", "practiceaddress2": null, "practicecity": "LIVERMORE", "practicestate": "CA", "practicezip9code": 945514915, "telephonenumber": 9253738124, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.69748, "longitude": -121.74349, "is_contracted_for_cba": false}, {"provider_id": 20315681, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00765", "practiceaddress1": "399 MAIN STREET", "practiceaddress2": null, "practicecity": "SOUTHBRIDGE", "practicestate": "MA", "practicezip9code": 15503728, "telephonenumber": 5087650646, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.07625, "longitude": -72.03635, "is_contracted_for_cba": false}], "stage_runningstate": "executed", "datacache": 0, "originalcount": 59566, "samplecount": 5929, "samplefile": "/FileStore/platform/sampleData/6781cddd8402090cd8fff5cb/part-00000-762f6ec5-acbf-46af-bfb5-62cf2c0fe966-c000.csv", "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": "{}"}}, {"_id": "6781cddd8402090cd8fff5cc", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/Medical-Equipment-Suppliers.csv", "in": ["6781cddd8402090cd8fff5cb"], "out": ["6781cddd8402090cd8fff5cd"], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "acceptancetrends_AutoFE", "dataPercentage": "10", "comment": "", "pipeline_id": "6781cddc8402090cd8fff5c8", "sub_type": "Feature", "stage_type": "transformation", "stage_attributes": {"AutoFE": {"autoFE_flag": true, "dataPercentage": "10", "sampledata": [{"provider_id": 23280115, "acceptsassignement": 1, "participationbegindate": 1705622400000.0, "businessname": "RELIANT MEDICAL EQUIPMENT DISTRIBUTORS", "practicename": "RELIANT MEDICAL EQUIPMENT DIST", "practiceaddress1": "10806 REAMES RD", "practiceaddress2": "STE H", "practicecity": "CHARLOTTE", "practicestate": "NC", "practicezip9code": 282693766, "telephonenumber": -1540830497, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Orthoses: Off-The-Shelf", "latitude": 35, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 19, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 107, "practicename_stringindexer_transform": 329, "practiceaddress1_stringindexer_transform": 300, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 86, "practicestate_stringindexer_transform": 13, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280121, "acceptsassignement": 1, "participationbegindate": 1705449600000.0, "businessname": "39 PHARMACY CORPORATION", "practicename": "39 PHARMACY", "practiceaddress1": "13671 BEACH BLVD STE B", "practiceaddress2": "UNIT B1", "practicecity": "WESTMINSTER", "practicestate": "CA", "practicezip9code": 926833200, "telephonenumber": -1446143493, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "latitude": 33, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 17, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 106, "practicename_stringindexer_transform": 242, "practiceaddress1_stringindexer_transform": 105, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 15}, {"provider_id": 23280127, "acceptsassignement": 1, "participationbegindate": 1705449600000.0, "businessname": "NV HEALTH, LLC", "practicename": "NV HEALTH, LLC", "practiceaddress1": "12501 PROSPERITY DR", "practiceaddress2": "STE 150", "practicecity": "SILVER SPRING", "practicestate": "MD", "practicezip9code": 209041646, "telephonenumber": -1888550113, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 39, "longitude": -76, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 17, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 91, "practicename_stringindexer_transform": 332, "practiceaddress1_stringindexer_transform": 383, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 12, "specialitieslist_stringindexer_transform": 4, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 21611787, "acceptsassignement": 1, "participationbegindate": 1705363200000.0, "businessname": "MYRTLE RX PLUS INC", "practicename": "MYRTLE RX PLUS INC", "practiceaddress1": "6212 MYRTLE AVE", "practiceaddress2": "UNIT B1", "practicecity": "GLENDALE", "practicestate": "NY", "practicezip9code": 113856236, "telephonenumber": -822022870, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 16, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 26, "practicename_stringindexer_transform": 38, "practiceaddress1_stringindexer_transform": 91, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 59, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280133, "acceptsassignement": 0, "participationbegindate": 1705363200000.0, "businessname": "LONE STAR PROSTHETICS, WICHITA FALLS, LLC", "practicename": "LONE STAR PROSTHETICS, WICHITA FALL", "practiceaddress1": "4020 RHEA RD", "practiceaddress2": "STE 5D", "practicecity": "WICHITA FALLS", "practicestate": "TX", "practicezip9code": 763082728, "telephonenumber": 812920508, "specialitieslist": "Prosthetic Personnel", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Limb Prostheses", "latitude": 33, "longitude": -98, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 16, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 69, "practicename_stringindexer_transform": 263, "practiceaddress1_stringindexer_transform": 362, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 8, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 31}, {"provider_id": 23280139, "acceptsassignement": 1, "participationbegindate": 1705276800000.0, "businessname": "S8 MEDICAL EQUIPMENT LLC", "practicename": "S8 MEDICAL EQUIPMENT LLC", "practiceaddress1": "3155 KEARNEY ST", "practiceaddress2": "STE 170", "practicecity": "FREMONT", "practicestate": "CA", "practicezip9code": 945382285, "telephonenumber": 811737469, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf", "latitude": 37, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 15, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 35, "practicename_stringindexer_transform": 82, "practiceaddress1_stringindexer_transform": 295, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280145, "acceptsassignement": 0, "participationbegindate": 1705190400000.0, "businessname": "QUICKRX LLC", "practicename": "BREWSTER PHARMACY", "practiceaddress1": "811 US HWY 97", "practiceaddress2": "UNIT B1", "practicecity": "BREWSTER", "practicestate": "WA", "practicezip9code": 98812, "telephonenumber": 801925125, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 47, "longitude": -120, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 14, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 24, "practicename_stringindexer_transform": 272, "practiceaddress1_stringindexer_transform": 435, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 21, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20575847, "acceptsassignement": 1, "participationbegindate": 1705017600000.0, "businessname": "APPARO, INC.", "practicename": "EVERCARE MEDICAL SOLUTIONS INC", "practiceaddress1": "2102 BUTTON LN", "practiceaddress2": "STE 105", "practicecity": "LA GRANGE", "practicestate": "KY", "practicezip9code": 400316720, "telephonenumber": 727261926, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 38, "longitude": -85, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 12, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 78, "practicename_stringindexer_transform": 264, "practiceaddress1_stringindexer_transform": 219, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 22, "specialitieslist_stringindexer_transform": 6, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280157, "acceptsassignement": 1, "participationbegindate": 1704931200000.0, "businessname": "SDPM UNITED PHARMACY INC", "practicename": "SDPM UNITED PHARMACY INC", "practiceaddress1": "917 WYCKOFF AVE", "practiceaddress2": "UNIT B1", "practicecity": "RIDGEWOOD", "practicestate": "NY", "practicezip9code": 113855353, "telephonenumber": -1406267892, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 11, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 101, "practicename_stringindexer_transform": 374, "practiceaddress1_stringindexer_transform": 349, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280175, "acceptsassignement": 1, "participationbegindate": 1704844800000.0, "businessname": "PROMEDICA MEDICAL SUPPLY INC", "practicename": "PROMEDICA MEDICAL SUPPLY INC", "practiceaddress1": "1446 FRONT ST", "practiceaddress2": "STE 200", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921013425, "telephonenumber": -1931042, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Orthoses: Off-The-Shelf", "latitude": 32, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 10, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 123, "practicename_stringindexer_transform": 442, "practiceaddress1_stringindexer_transform": 48, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 53, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280169, "acceptsassignement": 1, "participationbegindate": 1704844800000.0, "businessname": "ORTHO ELITE PERFORMANCE & RECOVERY PLLC", "practicename": "ORTHO ELITE PERFORMANCE & RECOVERY", "practiceaddress1": "8575 E PRINCESS DR", "practiceaddress2": "STE 210", "practicecity": "SCOTTSDALE", "practicestate": "AZ", "practicezip9code": 852555441, "telephonenumber": 513116482, "specialitieslist": "Prosthetic Personnel", "providertypelist": "PHYSICIAN ASSISTANT", "supplieslist": "Heat & Cold Applications|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 33, "longitude": -111, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 10, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 114, "practicename_stringindexer_transform": 360, "practiceaddress1_stringindexer_transform": 107, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 93, "practicestate_stringindexer_transform": 31, "specialitieslist_stringindexer_transform": 8, "providertypelist_stringindexer_transform": 4, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23282857, "acceptsassignement": 1, "participationbegindate": 1704844800000.0, "businessname": "WILLOW PHARMACY CORP", "practicename": "WILLOW PHARMACY CORP", "practiceaddress1": "1002 BEACH 20TH ST", "practiceaddress2": "UNIT 1R", "practicecity": "FAR ROCKAWAY", "practicestate": "NY", "practicezip9code": 116913900, "telephonenumber": -818768416, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 10, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 82, "practicename_stringindexer_transform": 291, "practiceaddress1_stringindexer_transform": 214, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 21610989, "acceptsassignement": 1, "participationbegindate": 1704844800000.0, "businessname": "HISPANOS PHARMACY INC", "practicename": "HISPANOS PHARMACY INC", "practiceaddress1": "8011 37TH AVENUE", "practiceaddress2": "UNIT B1", "practicecity": "JACKSON HEIGHTS", "practicestate": "NY", "practicezip9code": 11372, "telephonenumber": -1407378463, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 10, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 86, "practicename_stringindexer_transform": 312, "practiceaddress1_stringindexer_transform": 110, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280163, "acceptsassignement": 1, "participationbegindate": 1704844800000.0, "businessname": "HACKENSACK PHARMACY INC", "practicename": "HACKENSACK PHARMACY", "practiceaddress1": "441 PASSAIC STREET", "practiceaddress2": "UNIT B1", "practicecity": "HACKENSACK", "practicestate": "NJ", "practicezip9code": 7601, "telephonenumber": 2014881230, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 40, "longitude": -74, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 10, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 66, "practicename_stringindexer_transform": 419, "practiceaddress1_stringindexer_transform": 145, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 11, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 34358738, "acceptsassignement": 1, "participationbegindate": 1704758400000.0, "businessname": "BRONX HEALTHPLUS RX INC", "practicename": "BRONX HEALTHPLUS RX INC", "practiceaddress1": "582 E 187TH ST", "practiceaddress2": "UNIT B1", "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104586765, "telephonenumber": -1403090232, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 9, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 102, "practicename_stringindexer_transform": 375, "practiceaddress1_stringindexer_transform": 150, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 17, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 34358396, "acceptsassignement": 1, "participationbegindate": 1704758400000.0, "businessname": "FRESH POND PHARMACY INC", "practicename": "FRESH POND PHARMACY INC", "practiceaddress1": "7106 FRESH POND RD", "practiceaddress2": "UNIT B1", "practicecity": "RIDGEWOOD", "practicestate": "NY", "practicezip9code": 113855968, "telephonenumber": -819671739, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 9, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 70, "practicename_stringindexer_transform": 213, "practiceaddress1_stringindexer_transform": 336, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 21611451, "acceptsassignement": 0, "participationbegindate": 1704672000000.0, "businessname": "SHIFA SPECIALTY INC", "practicename": "SHIFA SPECIALTY INC.", "practiceaddress1": "385 TROY SCHENECTADY RD", "practiceaddress2": "UNIT B1", "practicecity": "LATHAM", "practicestate": "NY", "practicezip9code": 121103228, "telephonenumber": 894935734, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 42, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 97, "practicename_stringindexer_transform": 104, "practiceaddress1_stringindexer_transform": 26, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280337, "acceptsassignement": 1, "participationbegindate": 1701907200000.0, "businessname": "NEB DOCTORS OF WESTERN PENNSYLVANIA LLC", "practicename": "NEB DOCTORS OF WESTERN PENNSYLVANIA", "practiceaddress1": "850 BOYCE RD", "practiceaddress2": "STE 5", "practicecity": "BRIDGEVILLE", "practicestate": "PA", "practicezip9code": 150171541, "telephonenumber": -168433546, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Nebulizer Equipment and/or Supplies", "latitude": 40, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 7, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 46, "practicename_stringindexer_transform": 230, "practiceaddress1_stringindexer_transform": 493, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23282449, "acceptsassignement": 1, "participationbegindate": 1701820800000.0, "businessname": "GOOD MERCY PHARMACY CORP", "practicename": "GOOD MERCY PHARMACY CORP", "practiceaddress1": "1250 WATERS PL", "practiceaddress2": "TOWER ONE", "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104612720, "telephonenumber": -1407540148, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 6, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 27, "practicename_stringindexer_transform": 39, "practiceaddress1_stringindexer_transform": 141, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 17, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280349, "acceptsassignement": 0, "participationbegindate": 1701820800000.0, "businessname": "PROSTHETIC AND ORTHOTIC ASSOCIATES OF SOUTH CAROLINA LLC", "practicename": "PROSTHETIC AND ORTHOTIC ASSOC OF SC", "practiceaddress1": "4900 OHEAR AVE", "practiceaddress2": "STE 100", "practicecity": "CHARLESTON", "practicestate": "SC", "practicezip9code": 294055091, "telephonenumber": -157160673, "specialitieslist": "MSC With Orthotic-Prosthetic", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Orthoses: Custom Fabricated|Limb Prostheses", "latitude": 32, "longitude": -79, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 6, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 96, "practicename_stringindexer_transform": 446, "practiceaddress1_stringindexer_transform": 314, "practiceaddress2_stringindexer_transform": 7, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 27, "specialitieslist_stringindexer_transform": 5, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280343, "acceptsassignement": 1, "participationbegindate": 1701820800000.0, "businessname": "MOBIUS MOBILITY, LLC", "practicename": "MOBIUS MOBILITY LLC", "practiceaddress1": "540 N COMMERCIAL ST", "practiceaddress2": "STE 310", "practicecity": "MANCHESTER", "practicestate": "NH", "practicezip9code": 31011146, "telephonenumber": -256470324, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 6, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 17, "practicename_stringindexer_transform": 156, "practiceaddress1_stringindexer_transform": 155, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 104, "practicestate_stringindexer_transform": 24, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280355, "acceptsassignement": 1, "participationbegindate": 1701820800000.0, "businessname": "COMFORT RX PHARMACY CORP", "practicename": "COMFORT RX PHARMACY CORP", "practiceaddress1": "3811 31ST ST", "practiceaddress2": "UNIT B1", "practicecity": "LONG ISLAND CITY", "practicestate": "NY", "practicezip9code": 111012867, "telephonenumber": 2122303006, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 6, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 94, "practicename_stringindexer_transform": 341, "practiceaddress1_stringindexer_transform": 184, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280361, "acceptsassignement": 1, "participationbegindate": 1701734400000.0, "businessname": "SEARCY RX LLC", "practicename": "MEDICAL CENTER PHARMACY", "practiceaddress1": "2900 HAWKINS DR", "practiceaddress2": "UNIT B1", "practicecity": "SEARCY", "practicestate": "AR", "practicezip9code": 72143, "telephonenumber": 717716015, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs", "latitude": 35, "longitude": -91, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 5, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 83, "practicename_stringindexer_transform": 266, "practiceaddress1_stringindexer_transform": 402, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 23, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20533673, "acceptsassignement": 1, "participationbegindate": 1701648000000.0, "businessname": "OPTUM PHARMACY 705, LLC", "practicename": "OPTUM PHARMACY 705, LLC", "practiceaddress1": "1893 GENERAL GEORGE PATTON DR", "practiceaddress2": "STE 106", "practicecity": "FRANKLIN", "practicestate": "TN", "practicezip9code": 370672655, "telephonenumber": 1862951383, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 35, "longitude": -86, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 4, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 9, "practicename_stringindexer_transform": 2, "practiceaddress1_stringindexer_transform": 74, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 28, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 20533679, "acceptsassignement": 1, "participationbegindate": 1701648000000.0, "businessname": "OPTUM PHARMACY 705, LLC", "practicename": "OPTUM PHARMACY 705, LLC", "practiceaddress1": "1100 LEE BRANCH LN", "practiceaddress2": "UNIT B1", "practicecity": "BIRMINGHAM", "practicestate": "AL", "practicezip9code": 352427298, "telephonenumber": 294298205, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33, "longitude": -86, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 4, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 9, "practicename_stringindexer_transform": 2, "practiceaddress1_stringindexer_transform": 247, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 20, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 46}, {"provider_id": 20643395, "acceptsassignement": 1, "participationbegindate": 1701648000000.0, "businessname": "EMPIRE PHARMACY INC", "practicename": "NEW ROCHELLE PHARMACY", "practiceaddress1": "140 LOCKWOOD AVE", "practiceaddress2": "STE 108", "practicecity": "NEW ROCHELLE", "practicestate": "NY", "practicezip9code": 108014907, "telephonenumber": 556606630, "specialitieslist": "MSC With Orthotic-Prosthetic|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 4, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 53, "practicename_stringindexer_transform": 219, "practiceaddress1_stringindexer_transform": 218, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 15, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20533685, "acceptsassignement": 1, "participationbegindate": 1701648000000.0, "businessname": "OPTUM PHARMACY 705, LLC", "practicename": "OPTUM PHARMACY 705, LLC", "practiceaddress1": "3539 BLUECUTT RD", "practiceaddress2": "UNIT B1", "practicecity": "COLUMBUS", "practicestate": "MS", "practicezip9code": 397051324, "telephonenumber": 73134308, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 4, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 9, "practicename_stringindexer_transform": 2, "practiceaddress1_stringindexer_transform": 313, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 10, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 34359140, "acceptsassignement": 1, "participationbegindate": 1701648000000.0, "businessname": "THRIVE SPECIALTY PHARMACY LLC", "practicename": "THRIVE SPECIALTY PHARMACY LLC", "practiceaddress1": "7368 NW 5TH ST", "practiceaddress2": "UNIT B1", "practicecity": "PLANTATION", "practicestate": "FL", "practicezip9code": 333171605, "telephonenumber": 954467800, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 26, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 4, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 112, "practicename_stringindexer_transform": 408, "practiceaddress1_stringindexer_transform": 284, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280367, "acceptsassignement": 1, "participationbegindate": 1701648000000.0, "businessname": "FIT TO GO LLC", "practicename": "FIT TO GO LLC", "practiceaddress1": "335 CHESTNUT ST", "practiceaddress2": "UNIT B1", "practicecity": "NORWOOD", "practicestate": "NJ", "practicezip9code": 76482001, "telephonenumber": -282787564, "specialitieslist": "Prosthetic Personnel", "providertypelist": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 4, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 22, "practicename_stringindexer_transform": 28, "practiceaddress1_stringindexer_transform": 337, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 11, "specialitieslist_stringindexer_transform": 8, "providertypelist_stringindexer_transform": 2, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280391, "acceptsassignement": 0, "participationbegindate": 1701388800000.0, "businessname": "JERICHO CHEMISTS INC", "practicename": "JERICHO CHEMISTS INC.", "practiceaddress1": "24725 JAMAICA AVENUE", "practiceaddress2": "UNIT B1", "practicecity": "BELLEROSE", "practicestate": "NY", "practicezip9code": 114261541, "telephonenumber": 873856481, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 71, "practicename_stringindexer_transform": 186, "practiceaddress1_stringindexer_transform": 18, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280385, "acceptsassignement": 1, "participationbegindate": 1701388800000.0, "businessname": "PARKVIEW NOCO RX, LLC", "practicename": "PARKVIEW NOCO RX, LLC", "practiceaddress1": "238 ARSENAL ST", "practiceaddress2": "STE 100", "practicecity": "WATERTOWN", "practicestate": "NY", "practicezip9code": 136012504, "telephonenumber": -1139100973, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 43, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 95, "practicename_stringindexer_transform": 345, "practiceaddress1_stringindexer_transform": 430, "practiceaddress2_stringindexer_transform": 7, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280373, "acceptsassignement": 1, "participationbegindate": 1701388800000.0, "businessname": "MAC RX OF MISSOURI LLC", "practicename": "MAC RX OF MISSOURI, LLC", "practiceaddress1": "3196 RIVERPORT TECH CENTER DR", "practiceaddress2": "UNIT B1", "practicecity": "MARYLAND HEIGHTS", "practicestate": "MO", "practicezip9code": 630434825, "telephonenumber": -1146095576, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 38, "longitude": -90, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 12, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 45, "practicename_stringindexer_transform": 449, "practiceaddress1_stringindexer_transform": 79, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 176, "practicestate_stringindexer_transform": 30, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280397, "acceptsassignement": 1, "participationbegindate": 1701302400000.0, "businessname": "FIRSTCARE MEDICAL SUPPLY LLC", "practicename": "FIRSTCARE MEDICAL SUPPLY LLC", "practiceaddress1": "4606 FM 1960 RD W", "practiceaddress2": "STE 415", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770691369, "telephonenumber": -1476601920, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 30, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 93, "practicename_stringindexer_transform": 336, "practiceaddress1_stringindexer_transform": 325, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 46, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 11, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20420801, "acceptsassignement": 1, "participationbegindate": 1701302400000.0, "businessname": "JADD PHARMACY CORP", "practicename": "ROCK HILL PHARMACY", "practiceaddress1": "253 ROCK HILL DR", "practiceaddress2": "UNIT B1", "practicecity": "ROCK HILL", "practicestate": "NY", "practicezip9code": 127756620, "telephonenumber": -132023077, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 41, "longitude": -74, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 30, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 84, "practicename_stringindexer_transform": 275, "practiceaddress1_stringindexer_transform": 37, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 164, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 20303219, "acceptsassignement": 0, "participationbegindate": 1701216000000.0, "businessname": "SNEDS PEDORTHICS LLC", "practicename": "SNEDS PEDORTHIC LLC", "practiceaddress1": "336 THOMPSON RD", "practiceaddress2": "STE 4", "practicecity": "WEBSTER", "practicestate": "MA", "practicezip9code": 15701586, "telephonenumber": 789650215, "specialitieslist": "Prosthetic Personnel", "providertypelist": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 29, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 30, "practicename_stringindexer_transform": 54, "practiceaddress1_stringindexer_transform": 254, "practiceaddress2_stringindexer_transform": 5, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 8, "providertypelist_stringindexer_transform": 2, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280403, "acceptsassignement": 1, "participationbegindate": 1701216000000.0, "businessname": "PROSUM DME LLC", "practicename": "PROSUM DME", "practiceaddress1": "171 N ALTADENA DR", "practiceaddress2": "STE 265", "practicecity": "PASADENA", "practicestate": "CA", "practicezip9code": 911077352, "telephonenumber": -1117915230, "specialitieslist": "MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Continuous Positive Airway Pressure (CPAP) Devices|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "latitude": 34, "longitude": -118, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 29, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 20, "practicename_stringindexer_transform": 402, "practiceaddress1_stringindexer_transform": 428, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 12, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 34358522, "acceptsassignement": 0, "participationbegindate": 1701216000000.0, "businessname": "S S HEALTHCARE INC", "practicename": "S S HEALTHCARE INC", "practiceaddress1": "4925 N 5TH ST", "practiceaddress2": "UNIT B1", "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191203809, "telephonenumber": -2138061896, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings", "latitude": 40, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 29, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 119, "practicename_stringindexer_transform": 432, "practiceaddress1_stringindexer_transform": 454, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 299, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280415, "acceptsassignement": 1, "participationbegindate": 1701129600000.0, "businessname": "ALLIANCE MEDICAL SUPPLY LLC", "practicename": "ALLIANCE MEDICAL SUPPLY LLC", "practiceaddress1": "9725 E HAMPDEN AVE", "practiceaddress2": "STE 102B", "practicecity": "DENVER", "practicestate": "CO", "practicezip9code": 802314916, "telephonenumber": -1384907971, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -104, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 28, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 121, "practicename_stringindexer_transform": 435, "practiceaddress1_stringindexer_transform": 111, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 174, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280409, "acceptsassignement": 1, "participationbegindate": 1701129600000.0, "businessname": "OEI PROSTHETICS AND ORTHOTICS", "practicename": "HQ", "practiceaddress1": "9320 DEERING AVE", "practiceaddress2": "UNIT B1", "practicecity": "CHATSWORTH", "practicestate": "CA", "practicezip9code": 913115857, "telephonenumber": -407395683, "specialitieslist": "MSC With Orthotic-Prosthetic", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 34, "longitude": -118, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 28, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 28, "practicename_stringindexer_transform": 168, "practiceaddress1_stringindexer_transform": 399, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 5, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 52}, {"provider_id": 23282977, "acceptsassignement": 1, "participationbegindate": 1701129600000.0, "businessname": "SINGH PHARMACY INC", "practicename": "SINGH PHARMACY INC.", "practiceaddress1": "10532 ROCKAWAY BLVD", "practiceaddress2": "UNIT B1", "practicecity": "OZONE PARK", "practicestate": "NY", "practicezip9code": 114172319, "telephonenumber": -1400692017, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 28, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 75, "practicename_stringindexer_transform": 409, "practiceaddress1_stringindexer_transform": 183, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 20507753, "acceptsassignement": 1, "participationbegindate": 1701129600000.0, "businessname": "ROCHESTER HOME INFUSION INC", "practicename": "ROCHESTER HOME INFUSION", "practiceaddress1": "221 1ST AVE SW", "practiceaddress2": "SUITE 105", "practicecity": "ROCHESTER", "practicestate": "MN", "practicezip9code": 559023107, "telephonenumber": 778192705, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 44, "longitude": -92, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 28, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 42, "practicename_stringindexer_transform": 261, "practiceaddress1_stringindexer_transform": 413, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 127, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 47}, {"provider_id": 23280427, "acceptsassignement": 1, "participationbegindate": 1701043200000.0, "businessname": "RXMTS LLC", "practicename": "RXMTS", "practiceaddress1": "13401 RAILWAY DR", "practiceaddress2": "UNIT B1", "practicecity": "OKLAHOMA CITY", "practicestate": "OK", "practicezip9code": 731142272, "telephonenumber": -236482166, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Continuous Passive Motion (CPM) Devices|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Orthoses: Off-The-Shelf", "latitude": 35, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 27, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 31, "practicename_stringindexer_transform": 238, "practiceaddress1_stringindexer_transform": 207, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 33, "practicestate_stringindexer_transform": 18, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20303243, "acceptsassignement": 1, "participationbegindate": 1701043200000.0, "businessname": "SOUTHWEST FLORIDA EYE CARE, L.L.C.", "practicename": "SOUTHWEST FLORIDA EYE CARE", "practiceaddress1": "6850 INTERNATIONAL CENTER BLVD", "practiceaddress2": "UNIT B1", "practicecity": "FORT MYERS", "practicestate": "FL", "practicezip9code": 339127129, "telephonenumber": -1897287290, "specialitieslist": "Optometrist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "latitude": 26, "longitude": -81, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 27, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 11, "practicename_stringindexer_transform": 8, "practiceaddress1_stringindexer_transform": 229, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 311, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 7, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 55}, {"provider_id": 20303237, "acceptsassignement": 1, "participationbegindate": 1701043200000.0, "businessname": "SOUTHWEST FLORIDA EYE CARE, L.L.C.", "practicename": "SOUTHWEST FLORIDA EYE CARE", "practiceaddress1": "2221 SANTA BARBARA BLVD", "practiceaddress2": "STE 107", "practicecity": "CAPE CORAL", "practicestate": "FL", "practicezip9code": 339914318, "telephonenumber": -1899221890, "specialitieslist": "Optometrist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "latitude": 26, "longitude": -81, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 27, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 11, "practicename_stringindexer_transform": 8, "practiceaddress1_stringindexer_transform": 405, "practiceaddress2_stringindexer_transform": 21, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 7, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 55}, {"provider_id": 20303231, "acceptsassignement": 1, "participationbegindate": 1701043200000.0, "businessname": "SOUTHWEST FLORIDA EYE CARE, L.L.C.", "practicename": "SOUTHWEST FLORIDA EYE CARE LLC", "practiceaddress1": "11176 TAMIAMI TRL N", "practiceaddress2": "UNIT B1", "practicecity": "NAPLES", "practicestate": "FL", "practicezip9code": 341101640, "telephonenumber": -1899027172, "specialitieslist": "Optometrist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "latitude": 26, "longitude": -81, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 27, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 11, "practicename_stringindexer_transform": 327, "practiceaddress1_stringindexer_transform": 31, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 226, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 7, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 55}, {"provider_id": 23280439, "acceptsassignement": 1, "participationbegindate": 1700611200000.0, "businessname": "INFUSED THERAPIES LLC", "practicename": "VITAL CARE OF HENDERSON", "practiceaddress1": "9029 S PECOS RD", "practiceaddress2": "STE 2700", "practicecity": "HENDERSON", "practicestate": "NV", "practicezip9code": 890747198, "telephonenumber": -1337880034, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 36, "longitude": -115, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 22, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 61, "practicename_stringindexer_transform": 453, "practiceaddress1_stringindexer_transform": 275, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 17, "specialitieslist_stringindexer_transform": 4, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280433, "acceptsassignement": 1, "participationbegindate": 1700611200000.0, "businessname": "HEALARIAN LLC", "practicename": "HEALARIAN PHARMACY", "practiceaddress1": "1658 3RD AVE", "practiceaddress2": "UNIT B1", "practicecity": "NEW YORK", "practicestate": "NY", "practicezip9code": 101283605, "telephonenumber": 2123170828, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 22, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 72, "practicename_stringindexer_transform": 463, "practiceaddress1_stringindexer_transform": 23, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280457, "acceptsassignement": 1, "participationbegindate": 1700524800000.0, "businessname": "DIVINE MEDICAL SUPPLY AND EQUIPMENTS LLC", "practicename": "DIVINE MEDICAL SUPPLY AND EQUIPMENT", "practiceaddress1": "9550 FOREST LN", "practiceaddress2": "STE 336", "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752435905, "telephonenumber": 2142105595, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 21, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 43, "practicename_stringindexer_transform": 163, "practiceaddress1_stringindexer_transform": 8, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20303249, "acceptsassignement": 1, "participationbegindate": 1700524800000.0, "businessname": "PHOENIX MEDICAL EQUIPMENT, INC.", "practicename": "PHOENIX MEDICAL EQUIPMENT INC", "practiceaddress1": "23917 FORD RD", "practiceaddress2": "UNIT B1", "practicecity": "DEARBORN", "practicestate": "MI", "practicezip9code": 481281207, "telephonenumber": -1157667289, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Seat Lift Mechanisms|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 42, "longitude": -83, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 21, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 64, "practicename_stringindexer_transform": 383, "practiceaddress1_stringindexer_transform": 30, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 33, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280469, "acceptsassignement": 1, "participationbegindate": 1700438400000.0, "businessname": "HEAL MEDICAL SUPPLY LLC", "practicename": "HEAL MEDICAL SUPPLY LLC", "practiceaddress1": "17541 17TH ST", "practiceaddress2": "STE 202", "practicecity": "TUSTIN", "practicestate": "CA", "practicezip9code": 927801984, "telephonenumber": -2014932569, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Pneumatic Compression Devices and/or Supplies|Ultraviolet Light Devices and/or Supplies|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 33, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 20, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 76, "practicename_stringindexer_transform": 273, "practiceaddress1_stringindexer_transform": 443, "practiceaddress2_stringindexer_transform": 10, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 11, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280463, "acceptsassignement": 1, "participationbegindate": 1700438400000.0, "businessname": "ST. RAPHAEL PHARMACY INC", "practicename": "ST. RAPHAEL CHEMISTS", "practiceaddress1": "3504C JUNCTION BLVD", "practiceaddress2": "UNIT B1", "practicecity": "CORONA", "practicestate": "NY", "practicezip9code": 113685362, "telephonenumber": -1405690054, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 20, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 33, "practicename_stringindexer_transform": 290, "practiceaddress1_stringindexer_transform": 22, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23282983, "acceptsassignement": 1, "participationbegindate": 1700352000000.0, "businessname": "CHUBBUCK'S PHARMACY INC", "practicename": "CHUBBUCK'S PHARMACY INC", "practiceaddress1": "51 S MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "FREEPORT", "practicestate": "NY", "practicezip9code": 115203854, "telephonenumber": 868826037, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 19, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 117, "practicename_stringindexer_transform": 425, "practiceaddress1_stringindexer_transform": 235, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280475, "acceptsassignement": 1, "participationbegindate": 1700265600000.0, "businessname": "SEVENTEEN MEDICAL SUPPLY LLC", "practicename": "SEVENTEEN MEDICAL SUPPLY LLC", "practiceaddress1": "6801 LAKE WORTH RD", "practiceaddress2": "STE 126", "practicecity": "GREENACRES", "practicestate": "FL", "practicezip9code": 334672971, "telephonenumber": 1319117028, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Canes and/or Crutches|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 26, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 18, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 80, "practicename_stringindexer_transform": 279, "practiceaddress1_stringindexer_transform": 193, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20303255, "acceptsassignement": 1, "participationbegindate": 1700179200000.0, "businessname": "WOOSTER PHARMACY LLC", "practicename": "WOOSTER PHARMACY LLC", "practiceaddress1": "3431 COMMERCE PARKWAY", "practiceaddress2": "SUITE D", "practicecity": "WOOSTER", "practicestate": "OH", "practicezip9code": 446917114, "telephonenumber": -990572157, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs", "latitude": 40, "longitude": -81, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 17, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 21, "practicename_stringindexer_transform": 26, "practiceaddress1_stringindexer_transform": 211, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 35, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280481, "acceptsassignement": 1, "participationbegindate": 1700179200000.0, "businessname": "SHIV HARI RX INC", "practicename": "SHIV HARI RX INC", "practiceaddress1": "255B E 165TH ST", "practiceaddress2": "UNIT B1", "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104566057, "telephonenumber": -1404564227, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 17, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 29, "practicename_stringindexer_transform": 40, "practiceaddress1_stringindexer_transform": 94, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 17, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280487, "acceptsassignement": 0, "participationbegindate": 1700179200000.0, "businessname": "MEDIX SUPPLIES INC", "practicename": "MEDIX SUPPLIES INC", "practiceaddress1": "5301 LAUREL CANYON BLVD", "practiceaddress2": "STE 136", "practicecity": "VALLEY VILLAGE", "practicestate": "CA", "practicezip9code": 916072778, "telephonenumber": -401691370, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 34, "longitude": -118, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 17, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 124, "practicename_stringindexer_transform": 452, "practiceaddress1_stringindexer_transform": 397, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 11, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280493, "acceptsassignement": 1, "participationbegindate": 1700092800000.0, "businessname": "MR PHARMACIST LLC", "practicename": "MR PHARMACIST LLC", "practiceaddress1": "3552 E TREMONT AVE", "practiceaddress2": "STORE #2", "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104652059, "telephonenumber": -822031555, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 16, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 105, "practicename_stringindexer_transform": 381, "practiceaddress1_stringindexer_transform": 104, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 17, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280505, "acceptsassignement": 1, "participationbegindate": 1700092800000.0, "businessname": "BRISTOL CARE PHARMACY LLC", "practicename": "BRISTOL CARE PHARMACY LLC", "practiceaddress1": "3227 WESTCHESTER AVE", "practiceaddress2": "UNIT B1", "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104614507, "telephonenumber": -822151965, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 16, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 89, "practicename_stringindexer_transform": 324, "practiceaddress1_stringindexer_transform": 354, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 17, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280499, "acceptsassignement": 1, "participationbegindate": 1700092800000.0, "businessname": "VINITA FAMILY EYECARE, PLLC", "practicename": "VINITA FAMILY EYECARE, PLLC", "practiceaddress1": "529 N WILSON ST", "practiceaddress2": "UNIT B1", "practicecity": "VINITA", "practicestate": "OK", "practicezip9code": 743012428, "telephonenumber": 593797575, "specialitieslist": "Optometrist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "latitude": 36, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 16, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 100, "practicename_stringindexer_transform": 372, "practiceaddress1_stringindexer_transform": 7, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 18, "specialitieslist_stringindexer_transform": 7, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 55}, {"provider_id": 20303273, "acceptsassignement": 1, "participationbegindate": 1700006400000.0, "businessname": "MS EYE CARE PA", "practicename": "MS EYE CARE PA", "practiceaddress1": "504 EASEL ST", "practiceaddress2": "UNIT B1", "practicecity": "TAYLOR", "practicestate": "MS", "practicezip9code": 386731003, "telephonenumber": -1967585198, "specialitieslist": "Optometrist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 34, "longitude": -89, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 15, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 7, "practicename_stringindexer_transform": 7, "practiceaddress1_stringindexer_transform": 372, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 10, "specialitieslist_stringindexer_transform": 7, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 11}, {"provider_id": 20303267, "acceptsassignement": 1, "participationbegindate": 1700006400000.0, "businessname": "MS EYE CARE PA", "practicename": "MISSISSIPPI EYE CARE CARTHAGE", "practiceaddress1": "110 N VAN BUREN ST", "practiceaddress2": "UNIT B1", "practicecity": "CARTHAGE", "practicestate": "MS", "practicezip9code": 390514126, "telephonenumber": 1717710481, "specialitieslist": "Optometrist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 32, "longitude": -89, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 15, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 7, "practicename_stringindexer_transform": 353, "practiceaddress1_stringindexer_transform": 177, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 259, "practicestate_stringindexer_transform": 10, "specialitieslist_stringindexer_transform": 7, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 11}, {"provider_id": 20545805, "acceptsassignement": 1, "participationbegindate": 1700006400000.0, "businessname": "PICC LINES PLUS LLC", "practicename": "PICC LINES PLUS LLC", "practiceaddress1": "300 BUSINESS PARK WAY", "practiceaddress2": "STE A-1", "practicecity": "ROYAL PALM BEACH", "practicestate": "FL", "practicezip9code": 334111756, "telephonenumber": 1322397865, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 26, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 15, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 68, "practicename_stringindexer_transform": 203, "practiceaddress1_stringindexer_transform": 68, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 4, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20303261, "acceptsassignement": 1, "participationbegindate": 1700006400000.0, "businessname": "MS EYE CARE PA", "practicename": "LOUISVILLE EYE CARE", "practiceaddress1": "14994 W MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "LOUISVILLE", "practicestate": "MS", "practicezip9code": 393392616, "telephonenumber": -1962201098, "specialitieslist": "Optometrist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 33, "longitude": -89, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 15, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 7, "practicename_stringindexer_transform": 154, "practiceaddress1_stringindexer_transform": 463, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 381, "practicestate_stringindexer_transform": 10, "specialitieslist_stringindexer_transform": 7, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 11}, {"provider_id": 20303279, "acceptsassignement": 1, "participationbegindate": 1700006400000.0, "businessname": "MS EYE CARE PA", "practicename": "MS EYE CARE PA", "practiceaddress1": "1010 HIGHWAY 12 W", "practiceaddress2": "UNIT B1", "practicecity": "STARKVILLE", "practicestate": "MS", "practicezip9code": 397599167, "telephonenumber": -1963600364, "specialitieslist": "Optometrist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 33, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 15, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 7, "practicename_stringindexer_transform": 7, "practiceaddress1_stringindexer_transform": 164, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 10, "specialitieslist_stringindexer_transform": 7, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 11}, {"provider_id": 20303285, "acceptsassignement": 1, "participationbegindate": 1699920000000.0, "businessname": "BOSTON DME COMPANY LLC", "practicename": "BOSTON DME COMPANY LLC", "practiceaddress1": "67 MAPLEWOOD ST", "practiceaddress2": "STE 120", "practicecity": "MALDEN", "practicestate": "MA", "practicezip9code": 21484377, "telephonenumber": -251602871, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 14, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 108, "practicename_stringindexer_transform": 387, "practiceaddress1_stringindexer_transform": 339, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 9, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280511, "acceptsassignement": 0, "participationbegindate": 1699920000000.0, "businessname": "PEACH VALLEY PHARMACY LLC", "practicename": "U SAVE IT PHARMACY PEACH VALLEY", "practiceaddress1": "2310 CHESNEE HWY", "practiceaddress2": "UNIT B1", "practicecity": "SPARTANBURG", "practicestate": "SC", "practicezip9code": 293035505, "telephonenumber": 55835495, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Urological Supplies", "latitude": 35, "longitude": -81, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 14, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 110, "practicename_stringindexer_transform": 57, "practiceaddress1_stringindexer_transform": 412, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 27, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 21611013, "acceptsassignement": 1, "participationbegindate": 1699920000000.0, "businessname": "ROCKAWAY DRUGS RX INC", "practicename": "ROCKAWAY DRUGS RX INC", "practiceaddress1": "13214 ROCKAWAY BLVD", "practiceaddress2": "UNIT B1", "practicecity": "SOUTH OZONE PARK", "practicestate": "NY", "practicezip9code": 114202915, "telephonenumber": -820162193, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 14, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 58, "practicename_stringindexer_transform": 177, "practiceaddress1_stringindexer_transform": 266, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 34359440, "acceptsassignement": 0, "participationbegindate": 1699833600000.0, "businessname": "C AND M HEALTH INC", "practicename": "C AND M HEALTH INC", "practiceaddress1": "102 E EDWARDS ST", "practiceaddress2": "UNIT B1", "practicecity": "PRINCETON", "practicestate": "NC", "practicezip9code": 275697279, "telephonenumber": 609428559, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 35, "longitude": -78, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 13, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 25, "practicename_stringindexer_transform": 37, "practiceaddress1_stringindexer_transform": 446, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 13, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20303291, "acceptsassignement": 1, "participationbegindate": 1699833600000.0, "businessname": "ILS HHA OF REGION 11 LLC", "practicename": "ILS HHA OF REGION 11 LLC", "practiceaddress1": "4601 NW 77TH AVE", "practiceaddress2": "UNIT B1", "practicecity": "MIAMI", "practicestate": "FL", "practicezip9code": 331666449, "telephonenumber": -943721768, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies", "latitude": 25, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 13, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 38, "practicename_stringindexer_transform": 111, "practiceaddress1_stringindexer_transform": 63, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 382, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23282989, "acceptsassignement": 0, "participationbegindate": 1699833600000.0, "businessname": "POLARIS PHARMACY SERVICES OF VIRGINIA LLC", "practicename": "POLARIS PHARMACY SERVICES OF VIRGIN", "practiceaddress1": "5375B HENNEMAN DR", "practiceaddress2": "UNIT B1", "practicecity": "NORFOLK", "practicestate": "VA", "practicezip9code": 235132401, "telephonenumber": -1010920492, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 36, "longitude": -76, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 13, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 67, "practicename_stringindexer_transform": 282, "practiceaddress1_stringindexer_transform": 396, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 209, "practicestate_stringindexer_transform": 9, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280517, "acceptsassignement": 1, "participationbegindate": 1699660800000.0, "businessname": "STARLIGHT RX INC", "practicename": "STARLIGHT RX INC", "practiceaddress1": "5705 6TH AVE", "practiceaddress2": "UNIT B1", "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112203807, "telephonenumber": -816976178, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -74, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 11, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 92, "practicename_stringindexer_transform": 335, "practiceaddress1_stringindexer_transform": 280, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 10, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280529, "acceptsassignement": 0, "participationbegindate": 1699574400000.0, "businessname": "SHALOM RX INC", "practicename": "SHALOM PHARMACY", "practiceaddress1": "18000 VENTURA BLVD", "practiceaddress2": "STE 2", "practicecity": "ENCINO", "practicestate": "CA", "practicezip9code": 913163533, "telephonenumber": -402192792, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34, "longitude": -118, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 10, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 57, "practicename_stringindexer_transform": 321, "practiceaddress1_stringindexer_transform": 473, "practiceaddress2_stringindexer_transform": 3, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280523, "acceptsassignement": 1, "participationbegindate": 1699574400000.0, "businessname": "ARKANSAS COMPRESSION SHOP LLC", "practicename": "ARKANSAS COMPRESSION SHOP LLC", "practiceaddress1": "119 W H AVE", "practiceaddress2": "UNIT B1", "practicecity": "NORTH LITTLE ROCK", "practicestate": "AR", "practicezip9code": 721168733, "telephonenumber": 722755928, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Pneumatic Compression Devices and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 34, "longitude": -92, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 10, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 77, "practicename_stringindexer_transform": 276, "practiceaddress1_stringindexer_transform": 240, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 23, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280181, "acceptsassignement": 1, "participationbegindate": 1704412800000.0, "businessname": "BARGAIN MEDICAL SUPPLY, INC", "practicename": "BARGAIN MEDICAL SUPPLY, INC", "practiceaddress1": "510-512 FULTON STREET", "practiceaddress2": "UNIT B1", "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 11201, "telephonenumber": -822688401, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT|PEDORTHIC PERSONNEL|MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Limb Prostheses|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 5, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 73, "practicename_stringindexer_transform": 235, "practiceaddress1_stringindexer_transform": 407, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 10, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 6, "providertypelist_stringindexer_transform": 3, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280187, "acceptsassignement": 1, "participationbegindate": 1704326400000.0, "businessname": "MAASP  INC.", "practicename": "MAA PHARMACY", "practiceaddress1": "282 UNION AVE", "practiceaddress2": "UNIT B1", "practicecity": "PATERSON", "practicestate": "NJ", "practicezip9code": 75022092, "telephonenumber": 1143094438, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -74, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 4, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 36, "practicename_stringindexer_transform": 305, "practiceaddress1_stringindexer_transform": 335, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 123, "practicestate_stringindexer_transform": 11, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280193, "acceptsassignement": 1, "participationbegindate": 1704326400000.0, "businessname": "DEVINES PHARMACY INC", "practicename": "DEVINE'S PHARMACY", "practiceaddress1": "1949 OAK TREE RD", "practiceaddress2": "UNIT B1", "practicecity": "EDISON", "practicestate": "NJ", "practicezip9code": 88202036, "telephonenumber": -1264437475, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Urological Supplies", "latitude": 40, "longitude": -74, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 4, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 39, "practicename_stringindexer_transform": 401, "practiceaddress1_stringindexer_transform": 265, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 11, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280199, "acceptsassignement": 1, "participationbegindate": 1704326400000.0, "businessname": "VIVITAL, INC.", "practicename": "VIVITAL, INC.", "practiceaddress1": "1450 N TUSTIN AVE", "practiceaddress2": "STE 150", "practicecity": "SANTA ANA", "practicestate": "CA", "practicezip9code": 927058653, "telephonenumber": -2017576337, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "latitude": 33, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 4, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 125, "practicename_stringindexer_transform": 457, "practiceaddress1_stringindexer_transform": 165, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 34359026, "acceptsassignement": 1, "participationbegindate": 1704153600000.0, "businessname": "BILLINGS FAMILY EYECARE SHILOH PLLC", "practicename": "BILLINGS FAMILY EYECARE SHILOH", "practiceaddress1": "1686 SHILOH RD", "practiceaddress2": "STE 3", "practicecity": "BILLINGS", "practicestate": "MT", "practicezip9code": 591061761, "telephonenumber": -232514860, "specialitieslist": "Optometrist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 45, "longitude": -108, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 2, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 40, "practicename_stringindexer_transform": 370, "practiceaddress1_stringindexer_transform": 447, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 3, "practicestate_stringindexer_transform": 36, "specialitieslist_stringindexer_transform": 7, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 11}, {"provider_id": 20683295, "acceptsassignement": 1, "participationbegindate": 1704153600000.0, "businessname": "STARLING PHARMACY II, INC.", "practicename": "STARLING PHARMACY II, INC.", "practiceaddress1": "1049 BROADWAY ST", "practiceaddress2": "UNIT B1", "practicecity": "BUFFALO", "practicestate": "NY", "practicezip9code": 142121462, "telephonenumber": -1422232368, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 42, "longitude": -78, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 2, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 99, "practicename_stringindexer_transform": 362, "practiceaddress1_stringindexer_transform": 298, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 34358402, "acceptsassignement": 0, "participationbegindate": 1704153600000.0, "businessname": "ASTORIA RX HOLDINGS INC", "practicename": "ASTORIA RX HOLDINGS INC", "practiceaddress1": "2620 HOYT AVE S", "practiceaddress2": "UNIT B1", "practicecity": "ASTORIA", "practicestate": "NY", "practicezip9code": 111022870, "telephonenumber": -819895616, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 2, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 48, "practicename_stringindexer_transform": 134, "practiceaddress1_stringindexer_transform": 487, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 24548664, "acceptsassignement": 0, "participationbegindate": 1704153600000.0, "businessname": "DUFFY RX LLC", "practicename": "DUFFY RX LLC", "practiceaddress1": "399 W JOHN ST", "practiceaddress2": "STE 100", "practicecity": "HICKSVILLE", "practicestate": "NY", "practicezip9code": 118011043, "telephonenumber": 874033340, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 2, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 37, "practicename_stringindexer_transform": 110, "practiceaddress1_stringindexer_transform": 224, "practiceaddress2_stringindexer_transform": 7, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280205, "acceptsassignement": 0, "participationbegindate": 1704153600000.0, "businessname": "FALCON MED EQPT LLC", "practicename": "FALCON MED EQPT LLC", "practiceaddress1": "9415 BURNET RD", "practiceaddress2": "STE 322A", "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787585397, "telephonenumber": 828717326, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 2, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 44, "practicename_stringindexer_transform": 127, "practiceaddress1_stringindexer_transform": 370, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 0, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280211, "acceptsassignement": 0, "participationbegindate": 1704153600000.0, "businessname": "WB DRUG COMPANY INC", "practicename": "WB DRUG COMPANY INC", "practiceaddress1": "1071 W BROADWAY", "practiceaddress2": "UNIT B1", "practicecity": "CENTRALIA", "practicestate": "IL", "practicezip9code": 628015309, "telephonenumber": 1890354904, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -89, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 2, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 120, "practicename_stringindexer_transform": 433, "practiceaddress1_stringindexer_transform": 470, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680631, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #756", "practiceaddress1": "101 CLEVELAND AVE E", "practiceaddress2": "UNIT B1", "practicecity": "KARLSTAD", "practicestate": "MN", "practicezip9code": 567324502, "telephonenumber": -2110604858, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 48, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 304, "practiceaddress1_stringindexer_transform": 382, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680655, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #768", "practiceaddress1": "183 N TYLER ST", "practiceaddress2": "UNIT B1", "practicecity": "TYLER", "practicestate": "MN", "practicezip9code": 561781160, "telephonenumber": 777508208, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 44, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 32, "practiceaddress1_stringindexer_transform": 452, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680619, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #742", "practiceaddress1": "3 E HIGHWAY 28", "practiceaddress2": "UNIT B1", "practicecity": "MORRIS", "practicestate": "MN", "practicezip9code": 562671186, "telephonenumber": -1089072746, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 45, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 121, "practiceaddress1_stringindexer_transform": 422, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680673, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #762", "practiceaddress1": "6701 EVENSTAD DR N", "practiceaddress2": "STE 200", "practicecity": "MAPLE GROVE", "practicestate": "MN", "practicezip9code": 553696013, "telephonenumber": -955300192, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 45, "longitude": -93, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 226, "practiceaddress1_stringindexer_transform": 283, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680415, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #760", "practiceaddress1": "760 PRENTICE ST", "practiceaddress2": "UNIT B1", "practicecity": "GRANITE FALLS", "practicestate": "MN", "practicezip9code": 562411541, "telephonenumber": -1089324957, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 44, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 311, "practiceaddress1_stringindexer_transform": 379, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680661, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY 767", "practiceaddress1": "127 2ND AVE SW", "practiceaddress2": "UNIT B1", "practicecity": "MILACA", "practicestate": "MN", "practicezip9code": 563531105, "telephonenumber": -1085143996, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45, "longitude": -93, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 331, "practiceaddress1_stringindexer_transform": 425, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680583, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #758", "practiceaddress1": "18 S MARSHALL AVE", "practiceaddress2": "UNIT B1", "practicecity": "SPRINGFIELD", "practicestate": "MN", "practicezip9code": 560871613, "telephonenumber": 782267017, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 44, "longitude": -94, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 173, "practiceaddress1_stringindexer_transform": 391, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 28, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680505, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #736", "practiceaddress1": "201 HORACE AVE N", "practiceaddress2": "UNIT B1", "practicecity": "THIEF RIVER FALLS", "practicestate": "MN", "practicezip9code": 567012024, "telephonenumber": -2108154364, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 48, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 180, "practiceaddress1_stringindexer_transform": 130, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680643, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY # 769", "practiceaddress1": "2000 PAUL BUNYAN DR NW", "practiceaddress2": "UNIT B1", "practicecity": "BEMIDJI", "practicestate": "MN", "practicezip9code": 566015603, "telephonenumber": -2107450916, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47, "longitude": -94, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 98, "practiceaddress1_stringindexer_transform": 222, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680433, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #754", "practiceaddress1": "60 ARROWHEAD LN", "practiceaddress2": "UNIT B1", "practicecity": "MOOSE LAKE", "practicestate": "MN", "practicezip9code": 557679453, "telephonenumber": -2110112895, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 46, "longitude": -92, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 437, "practiceaddress1_stringindexer_transform": 55, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680553, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #752", "practiceaddress1": "211 SOUTH MAIN STREET", "practiceaddress2": "UNIT B1", "practicecity": "MAHNOMEN", "practicestate": "MN", "practicezip9code": 565570457, "telephonenumber": -2105614771, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 45, "practiceaddress1_stringindexer_transform": 204, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680625, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #750", "practiceaddress1": "203 N MILL ST", "practiceaddress2": "UNIT B1", "practicecity": "FERTILE", "practicestate": "MN", "practicezip9code": 56540, "telephonenumber": -2105511122, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 229, "practiceaddress1_stringindexer_transform": 269, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680679, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #748", "practiceaddress1": "216 SEVENTH ST S", "practiceaddress2": "PO BOX 1267", "practicecity": "WALKER", "practicestate": "MN", "practicezip9code": 56484, "telephonenumber": -2109496280, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47, "longitude": -94, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 215, "practiceaddress1_stringindexer_transform": 238, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680529, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #728", "practiceaddress1": "1105 S POKEGAMA AVE", "practiceaddress2": "UNIT B1", "practicecity": "GRAND RAPIDS", "practicestate": "MN", "practicezip9code": 557443905, "telephonenumber": -2111697865, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47, "longitude": -93, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 31, "practiceaddress1_stringindexer_transform": 136, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680475, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #755", "practiceaddress1": "205 6TH AVE", "practiceaddress2": "UNIT B1", "practicecity": "MADISON", "practicestate": "MN", "practicezip9code": 562561308, "telephonenumber": -1088983432, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 162, "practiceaddress1_stringindexer_transform": 279, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 204, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680595, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #772", "practiceaddress1": "707 LUNDORFF DR", "practiceaddress2": "UNIT B1", "practicecity": "SANDSTONE", "practicestate": "MN", "practicezip9code": 550725099, "telephonenumber": -1092511796, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 46, "longitude": -92, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 346, "practiceaddress1_stringindexer_transform": 377, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680559, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #770", "practiceaddress1": "724 E HIGHWAY 7", "practiceaddress2": "UNIT B1", "practicecity": "MONTEVIDEO", "practicestate": "MN", "practicezip9code": 562651638, "telephonenumber": -1092270884, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 420, "practiceaddress1_stringindexer_transform": 158, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680565, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #774", "practiceaddress1": "2622 BROADWAY AVE", "practiceaddress2": "UNIT B1", "practicecity": "SLAYTON", "practicestate": "MN", "practicezip9code": 561721312, "telephonenumber": 783399406, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 85, "practiceaddress1_stringindexer_transform": 121, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680577, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #779", "practiceaddress1": "112A MAIN ST S", "practiceaddress2": "UNIT B1", "practicecity": "PIERZ", "practicestate": "MN", "practicezip9code": 563644400, "telephonenumber": -1090285224, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 45, "longitude": -94, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 105, "practiceaddress1_stringindexer_transform": 394, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20411501, "acceptsassignement": 0, "participationbegindate": 1704067200000.0, "businessname": "DOVE MEDICAL SUPPLY RETAIL LLC", "practicename": "DOVE MEDICAL SUPPLY RETAIL LLC", "practiceaddress1": "2172 LAWNDALE DR", "practiceaddress2": "UNIT B1", "practicecity": "GREENSBORO", "practicestate": "NC", "practicezip9code": 274087102, "telephonenumber": -929225807, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36, "longitude": -79, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 47, "practicename_stringindexer_transform": 132, "practiceaddress1_stringindexer_transform": 244, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 13, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680607, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #741", "practiceaddress1": "3517 E BELTLINE", "practiceaddress2": "UNIT B1", "practicecity": "HIBBING", "practicestate": "MN", "practicezip9code": 557462337, "telephonenumber": -2112341156, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47, "longitude": -92, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 44, "practiceaddress1_stringindexer_transform": 260, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20591225, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "WENDY SOWELL GIBSON OD", "practicename": "DR. WENDY SOWELL GIBSON", "practiceaddress1": "1512 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "BENTON", "practicestate": "KY", "practicezip9code": 420251607, "telephonenumber": -1589696345, "specialitieslist": "Optometrist|Optician", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 36, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 98, "practicename_stringindexer_transform": 119, "practiceaddress1_stringindexer_transform": 479, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 22, "specialitieslist_stringindexer_transform": 14, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 11}, {"provider_id": 20587631, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "PREMIER KIDS CARE, INC.", "practicename": "PREMIER KIDS CARE, INC.", "practiceaddress1": "3148 PARK CENTER DR", "practiceaddress2": "UNIT B1", "practicecity": "TYLER", "practicestate": "TX", "practicezip9code": 757018482, "telephonenumber": 298994409, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 13, "practicename_stringindexer_transform": 9, "practiceaddress1_stringindexer_transform": 299, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 4, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20403257, "acceptsassignement": 0, "participationbegindate": 1704067200000.0, "businessname": "SAAD ENTERPRISES, INC.", "practicename": "SAAD MEDICAL EQUIPMENT - SPANISH FO", "practiceaddress1": "6450 US HIGHWAY 90", "practiceaddress2": "STE F", "practicecity": "SPANISH FORT", "practicestate": "AL", "practicezip9code": 365279480, "telephonenumber": -1778702738, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 30, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 8, "practicename_stringindexer_transform": 422, "practiceaddress1_stringindexer_transform": 272, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 20, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20403251, "acceptsassignement": 0, "participationbegindate": 1704067200000.0, "businessname": "SAAD ENTERPRISES, INC.", "practicename": "SAAD MEDICAL EQUIPMENT - UNIVERSITY", "practiceaddress1": "1515 S UNIVERSITY BLVD", "practiceaddress2": "UNIT B1", "practicecity": "MOBILE", "practicestate": "AL", "practicezip9code": 366092958, "telephonenumber": -1781527696, "specialitieslist": "Medical Supply Company Other|Orthotic Personnel", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 30, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 8, "practicename_stringindexer_transform": 300, "practiceaddress1_stringindexer_transform": 378, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 356, "practicestate_stringindexer_transform": 20, "specialitieslist_stringindexer_transform": 10, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 21610845, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "BOTICA PHARMACY CORP.", "practicename": "BOTICA PHARMACY CORP.", "practiceaddress1": "556 MORRIS AVE", "practiceaddress2": "UNIT B1", "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104514778, "telephonenumber": -1402435139, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 59, "practicename_stringindexer_transform": 178, "practiceaddress1_stringindexer_transform": 410, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 17, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 20403233, "acceptsassignement": 0, "participationbegindate": 1704067200000.0, "businessname": "SAAD ENTERPRISES, INC.", "practicename": "SAAD MEDICAL EQUIPMENT -D'IBERVILLE", "practiceaddress1": "10598 DIBERVILLE BLVD", "practiceaddress2": "STE A", "practicecity": "DIBERVILLE", "practicestate": "MS", "practicezip9code": 395402465, "telephonenumber": -2010641674, "specialitieslist": "Medical Supply Company Other|Orthotic Personnel", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 30, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 8, "practicename_stringindexer_transform": 364, "practiceaddress1_stringindexer_transform": 356, "practiceaddress2_stringindexer_transform": 2, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 10, "specialitieslist_stringindexer_transform": 10, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680649, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG 729", "practiceaddress1": "206 N MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "CROOKSTON", "practicestate": "MN", "practicezip9code": 567161743, "telephonenumber": -2112154756, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 142, "practiceaddress1_stringindexer_transform": 348, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20587619, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "PREMIER KIDS CARE, INC.", "practicename": "PREMIER KIDS CARE, INC.", "practiceaddress1": "221 PLAZA DR", "practiceaddress2": "UNIT B1", "practicecity": "MONROE", "practicestate": "GA", "practicezip9code": 306553184, "telephonenumber": 1202639798, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies|Surgical Dressings", "latitude": 33, "longitude": -83, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 13, "practicename_stringindexer_transform": 9, "practiceaddress1_stringindexer_transform": 216, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 131, "practicestate_stringindexer_transform": 15, "specialitieslist_stringindexer_transform": 4, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680685, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #727", "practiceaddress1": "223 STATE ST N", "practiceaddress2": "UNIT B1", "practicecity": "WASECA", "practicestate": "MN", "practicezip9code": 560932930, "telephonenumber": 783384314, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 44, "longitude": -93, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 377, "practiceaddress1_stringindexer_transform": 71, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20303297, "acceptsassignement": 1, "participationbegindate": 1699488000000.0, "businessname": "DYNAMEDICS MEDICAL SOLUTIONS, INC.", "practicename": "DYNAMEDICS MEDICAL SOLUTIONS INC", "practiceaddress1": "1053 BULLARD CT", "practiceaddress2": "STE AB", "practicecity": "RALEIGH", "practicestate": "NC", "practicezip9code": 276156801, "telephonenumber": -583254571, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 35, "longitude": -78, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 9, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 56, "practicename_stringindexer_transform": 170, "practiceaddress1_stringindexer_transform": 492, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 129, "practicestate_stringindexer_transform": 13, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20578187, "acceptsassignement": 0, "participationbegindate": 1699401600000.0, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "20145 ASHBROOK PL", "practiceaddress2": "STE 165", "practicecity": "ASHBURN", "practicestate": "VA", "practicezip9code": 201473374, "telephonenumber": -1017314193, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "latitude": 37, "longitude": -76, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 5, "practicename_stringindexer_transform": 1, "practiceaddress1_stringindexer_transform": 194, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 243, "practicestate_stringindexer_transform": 9, "specialitieslist_stringindexer_transform": 6, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280553, "acceptsassignement": 1, "participationbegindate": 1699401600000.0, "businessname": "YONKERS EXPRESS PHARMACY INC", "practicename": "YONKERS EXPRESS PHARMACY INC", "practiceaddress1": "62 WARBURTON AVE", "practiceaddress2": "UNIT B1", "practicecity": "YONKERS", "practicestate": "NY", "practicezip9code": 107017037, "telephonenumber": 554643376, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Nebulizer Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 19, "practicename_stringindexer_transform": 17, "practiceaddress1_stringindexer_transform": 451, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280547, "acceptsassignement": 1, "participationbegindate": 1699401600000.0, "businessname": "BLOOMING LIGHT RX INC", "practicename": "BLOOMING LIGHT RX INC", "practiceaddress1": "3907 PRINCE ST", "practiceaddress2": "STE 1B", "practicecity": "FLUSHING", "practicestate": "NY", "practicezip9code": 113545321, "telephonenumber": 589898046, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 79, "practicename_stringindexer_transform": 277, "practiceaddress1_stringindexer_transform": 312, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 20578217, "acceptsassignement": 0, "participationbegindate": 1699401600000.0, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "135 IMBODEN DR", "practiceaddress2": "UNIT B1", "practicecity": "WINCHESTER", "practicestate": "VA", "practicezip9code": 226035784, "telephonenumber": 1112269615, "specialitieslist": "MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -78, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 5, "practicename_stringindexer_transform": 1, "practiceaddress1_stringindexer_transform": 42, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 203, "practicestate_stringindexer_transform": 9, "specialitieslist_stringindexer_transform": 12, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20578175, "acceptsassignement": 0, "participationbegindate": 1699401600000.0, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "20465 SENECA MEADOWS PKWY", "practiceaddress2": "UNIT B1", "practicecity": "GERMANTOWN", "practicestate": "MD", "practicezip9code": 208767005, "telephonenumber": -1281436996, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist|Orthotic Personnel", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "latitude": 39, "longitude": -77, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 5, "practicename_stringindexer_transform": 1, "practiceaddress1_stringindexer_transform": 83, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 37, "practicestate_stringindexer_transform": 12, "specialitieslist_stringindexer_transform": 15, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680439, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #735", "practiceaddress1": "111 W VERNON AVE", "practiceaddress2": "UNIT B1", "practicecity": "FERGUS FALLS", "practicestate": "MN", "practicezip9code": 565372718, "telephonenumber": -2107601526, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 46, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 175, "practiceaddress1_stringindexer_transform": 133, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20347331, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "SOUTH BROWARD HOSPITAL DISTRICT", "practicename": "MEMORIAL REGIONAL HOSPITAL SOUTH PH", "practiceaddress1": "777 S DOUGLAS RD", "practiceaddress2": "UNIT B1", "practicecity": "PEMBROKE PINES", "practicestate": "FL", "practicezip9code": 330251353, "telephonenumber": 955251083, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 26, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 63, "practicename_stringindexer_transform": 30, "practiceaddress1_stringindexer_transform": 322, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 20412767, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "29 E MAIN STREET", "practiceaddress2": "UNIT B1", "practicecity": "GOUVERNEUR", "practicestate": "NY", "practicezip9code": 13642, "telephonenumber": -1142092294, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Nebulizer Equipment and/or Supplies", "latitude": 44, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 369, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412773, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "515 STEWARD DRIVE WEST", "practiceaddress2": "UNIT B1", "practicecity": "N SYRACUSE", "practicestate": "NY", "practicezip9code": 13212, "telephonenumber": 72272791, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43, "longitude": -76, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 148, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680667, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #746", "practiceaddress1": "31 MAIN AVE N", "practiceaddress2": "UNIT B1", "practicecity": "BAGLEY", "practicestate": "MN", "practicezip9code": 566218315, "telephonenumber": -2108021086, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 21, "practiceaddress1_stringindexer_transform": 93, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680463, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #738", "practiceaddress1": "209 WASHINGTON ST", "practiceaddress2": "UNIT B1", "practicecity": "BRAINERD", "practicestate": "MN", "practicezip9code": 564013393, "telephonenumber": -2106673767, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 46, "longitude": -94, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 371, "practiceaddress1_stringindexer_transform": 33, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20538563, "acceptsassignement": 0, "participationbegindate": 1704067200000.0, "businessname": "BALL GROUND PHARMACY LLC", "practicename": "BALL GROUND PHARMACY LLC", "practiceaddress1": "470 VALLEY ST", "practiceaddress2": "STE 100", "practicecity": "BALL GROUND", "practicestate": "GA", "practicezip9code": 301074061, "telephonenumber": -882578431, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 34, "longitude": -84, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 23, "practicename_stringindexer_transform": 29, "practiceaddress1_stringindexer_transform": 50, "practiceaddress2_stringindexer_transform": 7, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 15, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20599337, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HOSPITAL PHARMACY INC", "practicename": "HOSPITAL PHARMACY WEST", "practiceaddress1": "1333 W 5TH ST", "practiceaddress2": "STE 107", "practicecity": "SHERIDAN", "practicestate": "WY", "practicezip9code": 828012752, "telephonenumber": -1218234108, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 44, "longitude": -106, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 14, "practicename_stringindexer_transform": 60, "practiceaddress1_stringindexer_transform": 45, "practiceaddress2_stringindexer_transform": 21, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 25, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20599349, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HOSPITAL PHARMACY INC", "practicename": "HOSPITAL PHARMACY INC", "practiceaddress1": "1 S MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "SHERIDAN", "practicestate": "WY", "practicezip9code": 828014221, "telephonenumber": -1218244870, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44, "longitude": -106, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 14, "practicename_stringindexer_transform": 107, "practiceaddress1_stringindexer_transform": 482, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 25, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20587637, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "PREMIER KIDS CARE, INC.", "practicename": "PREMIER KIDS CARE", "practiceaddress1": "601 N 21ST AVE", "practiceaddress2": "UNIT B1", "practicecity": "HOLLYWOOD", "practicestate": "FL", "practicezip9code": 330204049, "telephonenumber": 298994409, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies|Surgical Dressings", "latitude": 26, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 13, "practicename_stringindexer_transform": 319, "practiceaddress1_stringindexer_transform": 268, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 36, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20518607, "acceptsassignement": 0, "participationbegindate": 1704067200000.0, "businessname": "CONCORD PHARMACY INC", "practicename": "WEST CONCORD PHARMACY", "practiceaddress1": "1212 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "CONCORD", "practicestate": "MA", "practicezip9code": 17423008, "telephonenumber": 1193758508, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 85, "practicename_stringindexer_transform": 124, "practiceaddress1_stringindexer_transform": 65, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20522957, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "PHARMCAREOK OF TULSA, INC.", "practicename": "PHARMCAREOK OF TULSA INC", "practiceaddress1": "2760 N S HIGHWAY 167", "practiceaddress2": "UNIT B1", "practicecity": "CATOOSA", "practicestate": "OK", "practicezip9code": 740152461, "telephonenumber": 593855812, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "latitude": 36, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 113, "practicename_stringindexer_transform": 48, "practiceaddress1_stringindexer_transform": 69, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 18, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680523, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #740", "practiceaddress1": "105 INTERNATIONAL DR STE 102", "practiceaddress2": "UNIT B1", "practicecity": "RED LAKE FALLS", "practicestate": "MN", "practicezip9code": 567504665, "telephonenumber": -2112433816, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 386, "practiceaddress1_stringindexer_transform": 457, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680637, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #776", "practiceaddress1": "400 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "COLD SPRING", "practicestate": "MN", "practicezip9code": 563202324, "telephonenumber": -1088110281, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45, "longitude": -94, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 68, "practiceaddress1_stringindexer_transform": 210, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412809, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "40 TERRILL PARK DR", "practiceaddress2": "UNIT B1", "practicecity": "CONCORD", "practicestate": "NH", "practicezip9code": 33017315, "telephonenumber": -35000769, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 34, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 24, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680589, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #778", "practiceaddress1": "321 JEFFERSON ST N", "practiceaddress2": "UNIT B1", "practicecity": "WADENA", "practicestate": "MN", "practicezip9code": 564821372, "telephonenumber": -2108653246, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 46, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 359, "practiceaddress1_stringindexer_transform": 90, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412839, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "1721 MILLER ST", "practiceaddress2": "UNIT B1", "practicecity": "LA CROSSE", "practicestate": "WI", "practicezip9code": 546015217, "telephonenumber": 1792879204, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43, "longitude": -91, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 318, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 377, "practicestate_stringindexer_transform": 19, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680481, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #734", "practiceaddress1": "1484 W LINCOLN AVE", "practiceaddress2": "UNIT B1", "practicecity": "FERGUS FALLS", "practicestate": "MN", "practicezip9code": 565371032, "telephonenumber": -2107601731, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 46, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 343, "practiceaddress1_stringindexer_transform": 448, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20637521, "acceptsassignement": 0, "participationbegindate": 1704067200000.0, "businessname": "OXYTECH OF NORTH CAROLINA, LLC", "practicename": "ROTECH", "practiceaddress1": "1115 S 3RD ST", "practiceaddress2": "STE C", "practicecity": "WILMINGTON", "practicestate": "NC", "practicezip9code": 284015666, "telephonenumber": 513686822, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 34, "longitude": -77, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 111, "practicename_stringindexer_transform": 298, "practiceaddress1_stringindexer_transform": 234, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 13, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412803, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "600 BLAIR PARK RD", "practiceaddress2": "STE 195", "practicecity": "WILLISTON", "practicestate": "VT", "practicezip9code": 54957529, "telephonenumber": -561145476, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 86, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 32, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680601, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #759", "practiceaddress1": "319 W MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "ADA", "practicestate": "MN", "practicezip9code": 565101251, "telephonenumber": -2107124862, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 212, "practiceaddress1_stringindexer_transform": 282, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20345897, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "J&G MEDICAL SUPPLIES", "practicename": "J&G MEDICAL SUPPLIES", "practiceaddress1": "2011 S 25TH ST", "practiceaddress2": "STE 209", "practicecity": "FORT PIERCE", "practicestate": "FL", "practicezip9code": 349474748, "telephonenumber": -863210183, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "latitude": 27, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 122, "practicename_stringindexer_transform": 441, "practiceaddress1_stringindexer_transform": 146, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 11, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412707, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "250 WALLACE WAY", "practiceaddress2": "UNIT B1", "practicecity": "ROCHESTER", "practicestate": "NY", "practicezip9code": 146246216, "telephonenumber": 1557603724, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43, "longitude": -77, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 423, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 127, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 34358822, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "ACCESS PT PENNSYLVANIA", "practicename": "ACCESS PT PENNSYLVANIA", "practiceaddress1": "4 FLOWERS DR", "practiceaddress2": "STE 1", "practicecity": "MECHANICSBURG", "practicestate": "PA", "practicezip9code": 170501709, "telephonenumber": -1417741352, "specialitieslist": "Prosthetic Personnel", "providertypelist": "PEDORTHIC PERSONNEL", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40, "longitude": -77, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 10, "practicename_stringindexer_transform": 3, "practiceaddress1_stringindexer_transform": 460, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 8, "providertypelist_stringindexer_transform": 1, "supplieslist_stringindexer_transform": 56}, {"provider_id": 34358828, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "ACCESS PT PENNSYLVANIA", "practicename": "ACCESS PT PENNSYLVANIA", "practiceaddress1": "156 CUMBERLAND PKWY", "practiceaddress2": "UNIT B1", "practicecity": "MECHANICSBURG", "practicestate": "PA", "practicezip9code": 170556694, "telephonenumber": -1417644219, "specialitieslist": "Prosthetic Personnel", "providertypelist": "PEDORTHIC PERSONNEL", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40, "longitude": -76, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 10, "practicename_stringindexer_transform": 3, "practiceaddress1_stringindexer_transform": 59, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 8, "providertypelist_stringindexer_transform": 1, "supplieslist_stringindexer_transform": 56}, {"provider_id": 34358834, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "ACCESS PT PENNSYLVANIA", "practicename": "ACCESS PT PENNSYLVANIA", "practiceaddress1": "290 E POMFRET ST", "practiceaddress2": "UNIT B1", "practicecity": "CARLISLE", "practicestate": "PA", "practicezip9code": 170132579, "telephonenumber": -1417644471, "specialitieslist": "Prosthetic Personnel", "providertypelist": "PEDORTHIC PERSONNEL", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40, "longitude": -77, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 10, "practicename_stringindexer_transform": 3, "practiceaddress1_stringindexer_transform": 180, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 8, "providertypelist_stringindexer_transform": 1, "supplieslist_stringindexer_transform": 56}, {"provider_id": 34358888, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "PHARMACY ON U LLC", "practicename": "PHARMACY ON U LLC", "practiceaddress1": "2272 MCDONALD AVE", "practiceaddress2": "UNIT B1", "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112233926, "telephonenumber": -1399970392, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 87, "practicename_stringindexer_transform": 316, "practiceaddress1_stringindexer_transform": 495, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 10, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20614067, "acceptsassignement": 0, "participationbegindate": 1704067200000.0, "businessname": "ADVANCED MEDICAL SUPPLY INC", "practicename": "ADVANCED MEDICAL SUPPLY INC", "practiceaddress1": "1621 S RANCHO SANTA FE RD", "practiceaddress2": "STE H", "practicecity": "SAN MARCOS", "practicestate": "CA", "practicezip9code": 920782125, "telephonenumber": -984826496, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Lymphedema Compression Treatment Items", "latitude": 33, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 103, "practicename_stringindexer_transform": 376, "practiceaddress1_stringindexer_transform": 44, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20626715, "acceptsassignement": 0, "participationbegindate": 1704067200000.0, "businessname": "DIABETIC SOLUTIONS, INC.", "practicename": "DIABETIC SOLUTIONS INC", "practiceaddress1": "10301 W SAMPLE RD", "practiceaddress2": "UNIT B1", "practicecity": "CORAL SPRINGS", "practicestate": "FL", "practicezip9code": 330653941, "telephonenumber": 953533167, "specialitieslist": "Medical Supply Company Other|Certified Other|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies", "latitude": 26, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 104, "practicename_stringindexer_transform": 317, "practiceaddress1_stringindexer_transform": 418, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 15, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20554427, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "SIERRA HOME MEDICAL PRODUCTS, INC", "practicename": "THC OF NEVADA", "practiceaddress1": "6720 PLACID ST", "practiceaddress2": "UNIT B1", "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891193541, "telephonenumber": -1565132042, "specialitieslist": "Certified Other|MSC With Respiratory Therapist|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 36, "longitude": -115, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 49, "practicename_stringindexer_transform": 412, "practiceaddress1_stringindexer_transform": 455, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 17, "specialitieslist_stringindexer_transform": 15, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20641205, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "ADVANCED EYECARE, SC", "practicename": "ADVANCED EYECARE", "practiceaddress1": "300 E MILL ST", "practiceaddress2": "UNIT B1", "practicecity": "PLYMOUTH", "practicestate": "WI", "practicezip9code": 530731915, "telephonenumber": 619003882, "specialitieslist": "Optometrist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 43, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 34, "practicename_stringindexer_transform": 139, "practiceaddress1_stringindexer_transform": 368, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 19, "specialitieslist_stringindexer_transform": 7, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 11}, {"provider_id": 20590727, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "MED-SHOP OF HUGHES SPRINGS INC", "practicename": "THE MED-SHOP PHARMACY", "practiceaddress1": "111 E 2ND", "practiceaddress2": "UNIT B1", "practicecity": "HUGHES SPRINGS", "practicestate": "TX", "practicezip9code": 756562596, "telephonenumber": 446458916, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Nebulizer Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -94, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 116, "practicename_stringindexer_transform": 455, "practiceaddress1_stringindexer_transform": 489, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 4, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 21611367, "acceptsassignement": 0, "participationbegindate": 1704067200000.0, "businessname": "LIBERTY RX INC", "practicename": "LIBERTY RX INC", "practiceaddress1": "12704 LIBERTY AVE", "practiceaddress2": "UNIT B1", "practicecity": "JAMAICA", "practicestate": "NY", "practicezip9code": 114192216, "telephonenumber": -1401132539, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 32, "practicename_stringindexer_transform": 62, "practiceaddress1_stringindexer_transform": 139, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 20680427, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #775", "practiceaddress1": "601 1ST AVE", "practiceaddress2": "UNIT B1", "practicecity": "WESTBROOK", "practicestate": "MN", "practicezip9code": 561839500, "telephonenumber": 777778818, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 44, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 200, "practiceaddress1_stringindexer_transform": 228, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412827, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "3184 LONDON RD", "practiceaddress2": "UNIT B1", "practicecity": "EAU CLAIRE", "practicestate": "WI", "practicezip9code": 547016834, "telephonenumber": -1431610812, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44, "longitude": -91, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 123, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 261, "practicestate_stringindexer_transform": 19, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412725, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "590 COAL ST", "practiceaddress2": "UNIT B1", "practicecity": "LEHIGHTON", "practicestate": "PA", "practicezip9code": 182351339, "telephonenumber": 1808812434, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 92, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20680535, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #781", "practiceaddress1": "50 MINNESOTA AVE", "practiceaddress2": "UNIT B1", "practicecity": "BRECKENRIDGE", "practicestate": "MN", "practicezip9code": 565201938, "telephonenumber": -2108533425, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 46, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 3, "practicename_stringindexer_transform": 406, "practiceaddress1_stringindexer_transform": 118, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 5, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20578181, "acceptsassignement": 0, "participationbegindate": 1699401600000.0, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "72 SAINT JOHNS PLACE RD", "practiceaddress2": "UNIT B1", "practicecity": "SALEM", "practicestate": "VA", "practicezip9code": 241535568, "telephonenumber": 1108930825, "specialitieslist": "MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 5, "practicename_stringindexer_transform": 1, "practiceaddress1_stringindexer_transform": 251, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 9, "specialitieslist_stringindexer_transform": 12, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20578199, "acceptsassignement": 0, "participationbegindate": 1699401600000.0, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "8500 EXECUTIVE PARK AVE", "practiceaddress2": "STE 412", "practicecity": "FAIRFAX", "practicestate": "VA", "practicezip9code": 220312629, "telephonenumber": -1281436996, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "latitude": 38, "longitude": -77, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 5, "practicename_stringindexer_transform": 1, "practiceaddress1_stringindexer_transform": 273, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 9, "specialitieslist_stringindexer_transform": 6, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20578193, "acceptsassignement": 0, "participationbegindate": 1699401600000.0, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "2201 LANGHORNE RD", "practiceaddress2": "STE D", "practicecity": "LYNCHBURG", "practicestate": "VA", "practicezip9code": 245011125, "telephonenumber": 53498085, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "latitude": 37, "longitude": -79, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 5, "practicename_stringindexer_transform": 1, "practiceaddress1_stringindexer_transform": 169, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 9, "specialitieslist_stringindexer_transform": 6, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20578151, "acceptsassignement": 0, "participationbegindate": 1699401600000.0, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "115 JULIAD CT", "practiceaddress2": "STE 111", "practicecity": "FREDERICKSBURG", "practicestate": "VA", "practicezip9code": 224061100, "telephonenumber": 1108515737, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "latitude": 38, "longitude": -77, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 5, "practicename_stringindexer_transform": 1, "practiceaddress1_stringindexer_transform": 497, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 19, "practicestate_stringindexer_transform": 9, "specialitieslist_stringindexer_transform": 6, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20578169, "acceptsassignement": 0, "participationbegindate": 1699401600000.0, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "4257 SEMINOLE TRL", "practiceaddress2": "UNIT 1", "practicecity": "CHARLOTTESVILLE", "practicestate": "VA", "practicezip9code": 229118214, "telephonenumber": 54770551, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "latitude": 38, "longitude": -78, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 5, "practicename_stringindexer_transform": 1, "practiceaddress1_stringindexer_transform": 20, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 62, "practicestate_stringindexer_transform": 9, "specialitieslist_stringindexer_transform": 6, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20578139, "acceptsassignement": 0, "participationbegindate": 1699401600000.0, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "1970 EVELYN BYRD AVE", "practiceaddress2": "UNIT B1", "practicecity": "HARRISONBURG", "practicestate": "VA", "practicezip9code": 228013423, "telephonenumber": 1110673898, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -78, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 5, "practicename_stringindexer_transform": 1, "practiceaddress1_stringindexer_transform": 66, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 9, "specialitieslist_stringindexer_transform": 6, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20578205, "acceptsassignement": 0, "participationbegindate": 1699401600000.0, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "172 THOMAS JOHNSON DR", "practiceaddress2": "STE 101", "practicecity": "FREDERICK", "practicestate": "MD", "practicezip9code": 217024402, "telephonenumber": -1278021877, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -77, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 8, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 5, "practicename_stringindexer_transform": 1, "practiceaddress1_stringindexer_transform": 103, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 12, "specialitieslist_stringindexer_transform": 6, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280559, "acceptsassignement": 1, "participationbegindate": 1699315200000.0, "businessname": "MEDI CITY PHARMACY INC", "practicename": "MEDI CITY PHARMACY INC", "practiceaddress1": "7702 ROOSEVELT AVE", "practiceaddress2": "STE C", "practicecity": "JACKSON HEIGHTS", "practicestate": "NY", "practicezip9code": 113726604, "telephonenumber": -1407382875, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 7, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 52, "practicename_stringindexer_transform": 158, "practiceaddress1_stringindexer_transform": 347, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280571, "acceptsassignement": 1, "participationbegindate": 1699315200000.0, "businessname": "U HEALTH PHARMACY LLC", "practicename": "U HEALTH PHARMACY LLC", "practiceaddress1": "3030 AVENUE U", "practiceaddress2": "UNIT B1", "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 11229, "telephonenumber": -1400184356, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 7, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 88, "practicename_stringindexer_transform": 318, "practiceaddress1_stringindexer_transform": 421, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 10, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280565, "acceptsassignement": 0, "participationbegindate": 1699315200000.0, "businessname": "AB MEDICAL LLC", "practicename": "VALLEY VIEW", "practiceaddress1": "3111 S VALLEY VIEW BLVD", "practiceaddress2": "STE F101", "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891028332, "telephonenumber": -1561486250, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic-Prosthetic", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "latitude": 36, "longitude": -115, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 7, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 126, "practicename_stringindexer_transform": 389, "practiceaddress1_stringindexer_transform": 140, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 17, "specialitieslist_stringindexer_transform": 15, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280583, "acceptsassignement": 1, "participationbegindate": 1699228800000.0, "businessname": "CORONA PHARMACY RX INC", "practicename": "CORONA PHARMACY RX INC.", "practiceaddress1": "4516 NATIONAL ST", "practiceaddress2": "UNIT B1", "practicecity": "CORONA", "practicestate": "NY", "practicezip9code": 113684511, "telephonenumber": -816887257, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -73, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 6, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 60, "practicename_stringindexer_transform": 454, "practiceaddress1_stringindexer_transform": 84, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 23280577, "acceptsassignement": 1, "participationbegindate": 1699228800000.0, "businessname": "STRENGTH GIVER PHARMACY LLC", "practicename": "THE MEDICINE SHOPPE #2193", "practiceaddress1": "420 W 29TH ST", "practiceaddress2": "UNIT B1", "practicecity": "PUEBLO", "practicestate": "CO", "practicezip9code": 810081131, "telephonenumber": -1394919451, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 38, "longitude": -104, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 6, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 54, "practicename_stringindexer_transform": 392, "practiceaddress1_stringindexer_transform": 290, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 20303315, "acceptsassignement": 1, "participationbegindate": 1698969600000.0, "businessname": "MEDICAL PHARMACY PA", "practicename": "MEDICAL PHARMACY PA", "practiceaddress1": "1100 COLUMBINE DR", "practiceaddress2": "STE A", "practicecity": "HOLTON", "practicestate": "KS", "practicezip9code": 664368839, "telephonenumber": -736292478, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 3, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 18, "practicename_stringindexer_transform": 16, "practiceaddress1_stringindexer_transform": 77, "practiceaddress2_stringindexer_transform": 2, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 34, "specialitieslist_stringindexer_transform": 4, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280595, "acceptsassignement": 1, "participationbegindate": 1698969600000.0, "businessname": "INFUSIONS SERVICES OF LOUISIANA LLC", "practicename": "VITAL CARE OF LAFAYETTE", "practiceaddress1": "101 LA RUE FRANCE", "practiceaddress2": "STE 100", "practicecity": "LAFAYETTE", "practicestate": "LA", "practicezip9code": 705083138, "telephonenumber": -915948416, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 30, "longitude": -92, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 3, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 55, "practicename_stringindexer_transform": 223, "practiceaddress1_stringindexer_transform": 353, "practiceaddress2_stringindexer_transform": 7, "practicecity_stringindexer_transform": 215, "practicestate_stringindexer_transform": 26, "specialitieslist_stringindexer_transform": 4, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20303309, "acceptsassignement": 1, "participationbegindate": 1698969600000.0, "businessname": "PINK PROMISES & DME LLC", "practicename": "PINK PROMISES & DME LLC", "practiceaddress1": "2101 E DAUPHIN ST", "practiceaddress2": "UNIT B1", "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191252078, "telephonenumber": -2139014841, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Heat & Cold Applications|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Surgical Dressings", "latitude": 39, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 3, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 50, "practicename_stringindexer_transform": 148, "practiceaddress1_stringindexer_transform": 179, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 299, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280589, "acceptsassignement": 1, "participationbegindate": 1698969600000.0, "businessname": "CHARITY COMFORT CARE MEDICAL SUPPLIES", "practicename": "CHARITY COMFORT CARE MEDICAL SUPPLY", "practiceaddress1": "3838 OAK LAWN AVE", "practiceaddress2": "STE 1000", "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752194511, "telephonenumber": 398208920, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Seat Lift Mechanisms|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 32, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 3, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 41, "practicename_stringindexer_transform": 330, "practiceaddress1_stringindexer_transform": 307, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280607, "acceptsassignement": 1, "participationbegindate": 1698883200000.0, "businessname": "CPR DME LLC", "practicename": "CPR DME, LLC", "practiceaddress1": "900 N BONHAM ST", "practiceaddress2": "STE 6", "practicecity": "SAN BENITO", "practicestate": "TX", "practicezip9code": 785860097, "telephonenumber": 975708518, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 26, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 2, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 51, "practicename_stringindexer_transform": 340, "practiceaddress1_stringindexer_transform": 230, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280613, "acceptsassignement": 0, "participationbegindate": 1698883200000.0, "businessname": "APEX RX INC", "practicename": "REMEDY PHARMACY", "practiceaddress1": "13309 VICTORY BLVD", "practiceaddress2": "STE A", "practicecity": "VAN NUYS", "practicestate": "CA", "practicezip9code": 914011832, "telephonenumber": -403534872, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34, "longitude": -118, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 2, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 62, "practicename_stringindexer_transform": 456, "practiceaddress1_stringindexer_transform": 115, "practiceaddress2_stringindexer_transform": 2, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280625, "acceptsassignement": 1, "participationbegindate": 1698796800000.0, "businessname": "ROYAL MEDICAL SUPPLY LLC", "practicename": "ROYAL MEDICAL SUPPLY", "practiceaddress1": "21822 SHERMAN WAY", "practiceaddress2": "STE 201", "practicecity": "CANOGA PARK", "practicestate": "CA", "practicezip9code": 913031938, "telephonenumber": -1556458627, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 34, "longitude": -118, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 65, "practicename_stringindexer_transform": 255, "practiceaddress1_stringindexer_transform": 389, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 3, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 23280631, "acceptsassignement": 1, "participationbegindate": 1698796800000.0, "businessname": "SAINT MARY AND JESSIE LLC", "practicename": "SAINT MARY AND JESSIE LLC", "practiceaddress1": "288 SMITH ST", "practiceaddress2": "UNIT B1", "practicecity": "PERTH AMBOY", "practicestate": "NJ", "practicezip9code": 88614042, "telephonenumber": -1266690102, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40, "longitude": -74, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 81, "practicename_stringindexer_transform": 289, "practiceaddress1_stringindexer_transform": 122, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 11, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 12}, {"provider_id": 23280619, "acceptsassignement": 1, "participationbegindate": 1698796800000.0, "businessname": "BUCKNER NEIGHBORHOOD PHARMACY INC", "practicename": "BUCKNER NEIGHBORHOOD PHARMACY INC.", "practiceaddress1": "3535 N BUCKNER BLVD", "practiceaddress2": "STE 106A", "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752285633, "telephonenumber": 2143213000, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 32, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 11, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 118, "practicename_stringindexer_transform": 350, "practiceaddress1_stringindexer_transform": 309, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 20510897, "acceptsassignement": 0, "participationbegindate": 1698710400000.0, "businessname": "PHARMSCRIPT OF FLORIDA LLC", "practicename": "PHARMSCRIPT OF FLORIDA LLC", "practiceaddress1": "15491 SW 12TH ST", "practiceaddress2": "STE 400", "practicecity": "SUNRISE", "practicestate": "FL", "practicezip9code": 333261994, "telephonenumber": 493957226, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 26, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 31, "participationbegindate_month": 10, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 74, "practicename_stringindexer_transform": 243, "practiceaddress1_stringindexer_transform": 21, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 8, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 4}, {"provider_id": 20339171, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01254", "practiceaddress1": "984 WORCESTER ST", "practiceaddress2": "UNIT B1", "practicecity": "WELLESLEY", "practicestate": "MA", "practicezip9code": 24823709, "telephonenumber": -777581037, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 233, "practiceaddress1_stringindexer_transform": 365, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339015, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10449", "practiceaddress1": "610 SILVER HEIGHTS BLVD.", "practiceaddress2": "UNIT B1", "practicecity": "SILVER CITY", "practicestate": "NM", "practicezip9code": 880616942, "telephonenumber": 1458914318, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -108, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 74, "practiceaddress1_stringindexer_transform": 233, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 14, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339183, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10174", "practiceaddress1": "700 ATLANTIC AVENUE", "practiceaddress2": "UNIT B1", "practicecity": "BOSTON", "practicestate": "MA", "practicezip9code": 21112813, "telephonenumber": 1882409936, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 225, "practiceaddress1_stringindexer_transform": 239, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 232, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339129, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10487", "practiceaddress1": "1305 N HWY 377", "practiceaddress2": "UNIT B1", "practicecity": "ROANOKE", "practicestate": "TX", "practicezip9code": 76262, "telephonenumber": -1761622669, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 407, "practiceaddress1_stringindexer_transform": 54, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20340539, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10414", "practiceaddress1": "2849 N MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "BELTON", "practicestate": "TX", "practicezip9code": 765131100, "telephonenumber": -1745629743, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 269, "practiceaddress1_stringindexer_transform": 202, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339789, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10521", "practiceaddress1": "1401 UNIVERSITY AVE", "practiceaddress2": "UNIT B1", "practicecity": "LUBBOCK", "practicestate": "TX", "practicezip9code": 794013611, "telephonenumber": -522492974, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33, "longitude": -101, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 459, "practiceaddress1_stringindexer_transform": 85, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338991, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10486", "practiceaddress1": "301 CHRIS KELLEY BLVD", "practiceaddress2": "UNIT B1", "practicecity": "HUTTO", "practicestate": "TX", "practicezip9code": 786345088, "telephonenumber": 833493707, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 253, "practiceaddress1_stringindexer_transform": 176, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339783, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10428", "practiceaddress1": "19995 HIGHWAY 46 W", "practiceaddress2": "UNIT B1", "practicecity": "SPRING BRANCH", "practicestate": "TX", "practicezip9code": 780706809, "telephonenumber": -285546591, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -98, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 52, "practiceaddress1_stringindexer_transform": 5, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339777, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10446", "practiceaddress1": "1019 E CALTON RD", "practiceaddress2": "UNIT B1", "practicecity": "LAREDO", "practicestate": "TX", "practicezip9code": 78041, "telephonenumber": 977300208, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 27, "longitude": -99, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 126, "practiceaddress1_stringindexer_transform": 408, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 270, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339039, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10265", "practiceaddress1": "2421 SAM HOUSTON AVE", "practiceaddress2": "UNIT B1", "practicecity": "HUNTSVILLE", "practicestate": "TX", "practicezip9code": 773405862, "telephonenumber": 774464446, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 323, "practiceaddress1_stringindexer_transform": 47, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 353, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339033, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10544", "practiceaddress1": "5902 FM 1463 RD", "practiceaddress2": "UNIT B1", "practicecity": "KATY", "practicestate": "TX", "practicezip9code": 774945647, "telephonenumber": -1482640282, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 325, "practiceaddress1_stringindexer_transform": 153, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339027, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10350", "practiceaddress1": "4523 LJ PKWY", "practiceaddress2": "UNIT B1", "practicecity": "SUGAR LAND", "practicestate": "TX", "practicezip9code": 774793723, "telephonenumber": -1482316734, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 76, "practiceaddress1_stringindexer_transform": 173, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20340545, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10215", "practiceaddress1": "1212 MCRAE BLVD", "practiceaddress2": "UNIT B1", "practicecity": "EL PASO", "practicestate": "TX", "practicezip9code": 799257502, "telephonenumber": 566010029, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31, "longitude": -106, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 195, "practiceaddress1_stringindexer_transform": 112, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339327, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00496", "practiceaddress1": "324 BROADWAY", "practiceaddress2": "UNIT B1", "practicecity": "CHELSEA", "practicestate": "MA", "practicezip9code": 21502808, "telephonenumber": 1883924233, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 444, "practiceaddress1_stringindexer_transform": 32, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339009, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10540", "practiceaddress1": "9089 FAIR OAKS PKWY", "practiceaddress2": "UNIT B1", "practicecity": "FAIR OAKS RANCH", "practicestate": "TX", "practicezip9code": 780154646, "telephonenumber": 2106989538, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -98, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 294, "practiceaddress1_stringindexer_transform": 294, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20412797, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "1053 JASON PL", "practiceaddress2": "UNIT B1", "practicecity": "CHATHAM", "practicestate": "IL", "practicezip9code": 626292018, "telephonenumber": -2120129865, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -89, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 373, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412761, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "9225 RIVER RD", "practiceaddress2": "UNIT B1", "practicecity": "MARCY", "practicestate": "NY", "practicezip9code": 134032063, "telephonenumber": -1137279826, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 152, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 3, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412755, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "1100 W CHESTNUT ST", "practiceaddress2": "STE 200", "practicecity": "WASHINGTON", "practicestate": "PA", "practicezip9code": 153014631, "telephonenumber": -1347696882, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -80, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 340, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412731, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "1901 DAILEY AVE", "practiceaddress2": "UNIT B1", "practicecity": "LATROBE", "practicestate": "PA", "practicezip9code": 156503087, "telephonenumber": -1344612472, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -79, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 75, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412737, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "208 N LIME ST", "practiceaddress2": "UNIT B1", "practicecity": "LANCASTER", "practicestate": "PA", "practicezip9code": 176022730, "telephonenumber": -1415994781, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -76, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 116, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 387, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20412701, "acceptsassignement": 1, "participationbegindate": 1704067200000.0, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "201 E CHESTNUT ST", "practiceaddress2": "UNIT B1", "practicecity": "LANCASTER", "practicestate": "PA", "practicezip9code": 176022705, "telephonenumber": -1416000778, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -76, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2024, "businessname_stringindexer_transform": 4, "practicename_stringindexer_transform": 0, "practiceaddress1_stringindexer_transform": 316, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 387, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20309705, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 05465", "practiceaddress1": "1421 SW WILSHIRE BLVD", "practiceaddress2": "UNIT B1", "practicecity": "BURLESON", "practicestate": "TX", "practicezip9code": 760285705, "telephonenumber": -416975933, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 404, "practiceaddress1_stringindexer_transform": 102, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315891, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #04879", "practiceaddress1": "827 E MILAM ST", "practiceaddress2": "UNIT B1", "practicecity": "MEXIA", "practicestate": "TX", "practicezip9code": 76667, "telephonenumber": -1750246990, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 369, "practiceaddress1_stringindexer_transform": 297, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315759, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01020", "practiceaddress1": "1484 RUBEN TORRES SR BLVD", "practiceaddress2": "UNIT B1", "practicecity": "BROWNSVILLE", "practicestate": "TX", "practicezip9code": 785211537, "telephonenumber": 975475575, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 25, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 328, "practiceaddress1_stringindexer_transform": 113, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20316239, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #04599", "practiceaddress1": "500 N BAGDAD RD", "practiceaddress2": "UNIT B1", "practicecity": "LEANDER", "practicestate": "TX", "practicezip9code": 786417806, "telephonenumber": 827622834, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 202, "practiceaddress1_stringindexer_transform": 311, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338865, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 02282", "practiceaddress1": "703 GALLIVAN BLVD", "practiceaddress2": "UNIT B1", "practicecity": "DORCHESTER", "practicestate": "MA", "practicezip9code": 21245423, "telephonenumber": 1877910996, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 423, "practiceaddress1_stringindexer_transform": 491, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339717, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00861", "practiceaddress1": "355 CENTRE ST", "practiceaddress2": "UNIT B1", "practicecity": "BROCKTON", "practicestate": "MA", "practicezip9code": 23022741, "telephonenumber": 790630788, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 118, "practiceaddress1_stringindexer_transform": 73, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338649, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01225", "practiceaddress1": "22 MAIN STREET", "practiceaddress2": "UNIT B1", "practicecity": "BLACKSTONE", "practicestate": "MA", "practicezip9code": 15042257, "telephonenumber": 793871504, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 94, "practiceaddress1_stringindexer_transform": 380, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339771, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00860", "practiceaddress1": "6 POST OFFICE SQ", "practiceaddress2": "UNIT B1", "practicecity": "HARWICH PORT", "practicestate": "MA", "practicezip9code": 26461822, "telephonenumber": 789333364, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 89, "practiceaddress1_stringindexer_transform": 355, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338775, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00844", "practiceaddress1": "929 MAIN STREET", "practiceaddress2": "UNIT B1", "practicecity": "WALPOLE", "practicestate": "MA", "practicezip9code": 20812964, "telephonenumber": 791633895, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 244, "practiceaddress1_stringindexer_transform": 271, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338787, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00810", "practiceaddress1": "188 CENTRAL STREET", "practiceaddress2": "UNIT B1", "practicecity": "LEOMINSTER", "practicestate": "MA", "practicezip9code": 14536114, "telephonenumber": 1195443348, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 24, "practiceaddress1_stringindexer_transform": 88, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20338679, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00769", "practiceaddress1": "217 NORTH MAIN STREET", "practiceaddress2": "UNIT B1", "practicecity": "EAST LONGMEADOW", "practicestate": "MA", "practicezip9code": 10281816, "telephonenumber": -159712786, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 102, "practiceaddress1_stringindexer_transform": 89, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 223, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20338793, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY INC", "practiceaddress1": "976 RTE 28", "practiceaddress2": "UNIT B1", "practicecity": "SOUTH YARMOUTH", "practicestate": "MA", "practicezip9code": 26645644, "telephonenumber": 789021504, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 4, "practiceaddress1_stringindexer_transform": 450, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338673, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01871", "practiceaddress1": "1280 WORCESTER RD", "practiceaddress2": "UNIT B1", "practicecity": "FRAMINGHAM", "practicestate": "MA", "practicezip9code": 17025234, "telephonenumber": 793754136, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 144, "practiceaddress1_stringindexer_transform": 375, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339633, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01002", "practiceaddress1": "624 MASSACHUSETTS AVENUE", "practiceaddress2": "UNIT B1", "practicecity": "CAMBRIDGE", "practicestate": "MA", "practicezip9code": 21393307, "telephonenumber": 1883800572, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 358, "practiceaddress1_stringindexer_transform": 363, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338667, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01870", "practiceaddress1": "419 E FALMOUTH HWY", "practiceaddress2": "UNIT B1", "practicecity": "EAST FALMOUTH", "practicestate": "MA", "practicezip9code": 25366166, "telephonenumber": 790441325, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 97, "practiceaddress1_stringindexer_transform": 124, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20338655, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01247", "practiceaddress1": "2992 CRANBERRY HWY", "practiceaddress2": "UNIT B1", "practicecity": "EAST WAREHAM", "practicestate": "MA", "practicezip9code": 25381336, "telephonenumber": 787986584, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 99, "practiceaddress1_stringindexer_transform": 333, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338643, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01143", "practiceaddress1": "18 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "NORTH READING", "practicestate": "MA", "practicezip9code": 18642228, "telephonenumber": 1196710029, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 399, "practiceaddress1_stringindexer_transform": 108, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339525, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01085", "practiceaddress1": "76 SWAN STREET", "practiceaddress2": "UNIT B1", "practicecity": "METHUEN", "practicestate": "MA", "practicezip9code": 18445021, "telephonenumber": 1196954410, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 172, "practiceaddress1_stringindexer_transform": 135, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20338637, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01121", "practiceaddress1": "174 LITTLETON RD", "practiceaddress2": "UNIT B1", "practicecity": "WESTFORD", "practicestate": "MA", "practicezip9code": 18863191, "telephonenumber": 1196987519, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 339, "practiceaddress1_stringindexer_transform": 138, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338631, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 08319", "practiceaddress1": "ONE DAVIS SQ", "practiceaddress2": "UNIT B1", "practicecity": "SOMERVILLE", "practicestate": "MA", "practicezip9code": 21442904, "telephonenumber": 1881326860, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 222, "practiceaddress1_stringindexer_transform": 209, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338625, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 04471", "practiceaddress1": "600 STATE ST", "practiceaddress2": "UNIT B1", "practicecity": "SPRINGFIELD", "practicestate": "MA", "practicezip9code": 11094104, "telephonenumber": -157606945, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 349, "practiceaddress1_stringindexer_transform": 99, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 28, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339243, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00148", "practiceaddress1": "51 LINDEN STREET", "practiceaddress2": "UNIT B1", "practicecity": "WALTHAM", "practicestate": "MA", "practicezip9code": 24526117, "telephonenumber": -770990070, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 207, "practiceaddress1_stringindexer_transform": 481, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339237, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00130", "practiceaddress1": "23-25 MASSACHUSETTS AVENUE", "practiceaddress2": "ALWIFE PLAZA", "practicecity": "ARLINGTON", "practicestate": "MA", "practicezip9code": 24748602, "telephonenumber": -773454035, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 188, "practiceaddress1_stringindexer_transform": 321, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 4, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339231, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00119", "practiceaddress1": "451 MAIN STREET", "practiceaddress2": "UNIT B1", "practicecity": "WAKEFIELD", "practicestate": "MA", "practicezip9code": 18805015, "telephonenumber": -777482322, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 165, "practiceaddress1_stringindexer_transform": 132, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20338661, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01869", "practiceaddress1": "1080 FALMOUTH RD", "practiceaddress2": "UNIT B1", "practicecity": "HYANNIS", "practicestate": "MA", "practicezip9code": 26012346, "telephonenumber": 792816768, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 153, "practiceaddress1_stringindexer_transform": 24, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339513, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01021", "practiceaddress1": "500 ROUTE 134", "practiceaddress2": "STE 2", "practicecity": "SOUTH DENNIS", "practicestate": "MA", "practicezip9code": 26603430, "telephonenumber": 789012837, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 434, "practiceaddress1_stringindexer_transform": 496, "practiceaddress2_stringindexer_transform": 3, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339519, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01041", "practiceaddress1": "675 COUNTY STREET", "practiceaddress2": "UNIT B1", "practicecity": "TAUNTON", "practicestate": "MA", "practicezip9code": 27803604, "telephonenumber": 793268080, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 348, "practiceaddress1_stringindexer_transform": 393, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314997, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16419", "practiceaddress1": "7845 N MACARTHUR BLVD", "practiceaddress2": "UNIT B1", "practicecity": "IRVING", "practicestate": "TX", "practicezip9code": 750637516, "telephonenumber": 1138755882, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 146, "practiceaddress1_stringindexer_transform": 197, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314991, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 16205", "practiceaddress1": "1100 LAKE WOODLANDS DR", "practiceaddress2": "UNIT B1", "practicecity": "THE WOODLANDS", "practicestate": "TX", "practicezip9code": 773803221, "telephonenumber": -1480770352, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 201, "practiceaddress1_stringindexer_transform": 172, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339225, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01111", "practiceaddress1": "104 WEST ST", "practiceaddress2": "UNIT B1", "practicecity": "WARE", "practicestate": "MA", "practicezip9code": 10821448, "telephonenumber": -155291299, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 464, "practiceaddress1_stringindexer_transform": 361, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339675, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01264", "practiceaddress1": "704 CENTRE ST", "practiceaddress2": "UNIT B1", "practicecity": "JAMAICA PLAIN", "practicestate": "MA", "practicezip9code": 21302516, "telephonenumber": 1880276637, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 131, "practiceaddress1_stringindexer_transform": 147, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339729, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00915", "practiceaddress1": "19 DODGE ST", "practiceaddress2": "STE A", "practicecity": "BEVERLY", "practicestate": "MA", "practicezip9code": 19151705, "telephonenumber": 1199335468, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 411, "practiceaddress1_stringindexer_transform": 395, "practiceaddress2_stringindexer_transform": 2, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339723, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01874", "practiceaddress1": "325 BOSTON POST RD", "practiceaddress2": "RTE 20", "practicecity": "WAYLAND", "practicestate": "MA", "practicezip9code": 17781802, "telephonenumber": 788615085, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 303, "practiceaddress1_stringindexer_transform": 441, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339711, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02325", "practiceaddress1": "1025 CENTRAL ST", "practiceaddress2": "UNIT B1", "practicecity": "STOUGHTON", "practicestate": "MA", "practicezip9code": 20724401, "telephonenumber": -776518478, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 14, "practiceaddress1_stringindexer_transform": 484, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 347, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339651, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00995", "practiceaddress1": "2 MILLISTON RD", "practiceaddress2": "UNIT B1", "practicecity": "MILLIS", "practicestate": "MA", "practicezip9code": 20541606, "telephonenumber": 788709001, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 239, "practiceaddress1_stringindexer_transform": 64, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339705, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01853", "practiceaddress1": "737 BRIDGE ST", "practiceaddress2": "UNIT B1", "practicecity": "WEYMOUTH", "practicestate": "MA", "practicezip9code": 21912139, "telephonenumber": -776581261, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 466, "practiceaddress1_stringindexer_transform": 320, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20334467, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10782", "practiceaddress1": "9936 W BOWLES AVE", "practiceaddress2": "UNIT B1", "practicecity": "LITTLETON", "practicestate": "CO", "practicezip9code": 801233439, "telephonenumber": -1255483655, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -105, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 73, "practiceaddress1_stringindexer_transform": 426, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339459, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01049", "practiceaddress1": "942 A HYDE PARK AVE", "practiceaddress2": "UNIT B1", "practicecity": "HYDE PARK", "practicestate": "MA", "practicezip9code": 21363269, "telephonenumber": 1878677845, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 116, "practiceaddress1_stringindexer_transform": 129, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339699, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01885", "practiceaddress1": "10 MEETINGHOUSE RD", "practiceaddress2": "UNIT B1", "practicecity": "LITTLETON", "practicestate": "MA", "practicezip9code": 14601912, "telephonenumber": 1194934638, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 284, "practiceaddress1_stringindexer_transform": 151, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339681, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01862", "practiceaddress1": "1195 BOYLSTON STREET", "practiceaddress2": "UNIT B1", "practicecity": "CHESTNUT HILL", "practicestate": "MA", "practicezip9code": 24671701, "telephonenumber": 1882347932, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 361, "practiceaddress1_stringindexer_transform": 494, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339669, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 05872", "practiceaddress1": "22135 IH-10 W", "practiceaddress2": "UNIT B1", "practicecity": "SAN ANTONIO", "practicestate": "TX", "practicezip9code": 782571621, "telephonenumber": 2106981643, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -98, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 53, "practiceaddress1_stringindexer_transform": 109, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 30, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339741, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00983", "practiceaddress1": "2019 LAKEVIEW AVE", "practiceaddress2": "UNIT B1", "practicecity": "DRACUT", "practicestate": "MA", "practicezip9code": 18263224, "telephonenumber": 1199641958, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 90, "practiceaddress1_stringindexer_transform": 319, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339663, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01368", "practiceaddress1": "101 LOOP 59 N", "practiceaddress2": "UNIT B1", "practicecity": "ATLANTA", "practicestate": "TX", "practicezip9code": 755512009, "telephonenumber": 448060432, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33, "longitude": -94, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 390, "practiceaddress1_stringindexer_transform": 25, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339657, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY# 05407", "practiceaddress1": "11 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "LAKEVILLE", "practicestate": "MA", "practicezip9code": 23471617, "telephonenumber": 794501394, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 78, "practiceaddress1_stringindexer_transform": 97, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339501, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07607", "practiceaddress1": "13510 W HWY 290", "practiceaddress2": "UNIT B1", "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787379399, "telephonenumber": 827913502, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 150, "practiceaddress1_stringindexer_transform": 28, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 0, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339489, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00307", "practiceaddress1": "1735 MASSACHUSETTS AVE", "practiceaddress2": "UNIT B1", "practicecity": "LEXINGTON", "practicestate": "MA", "practicezip9code": 24205306, "telephonenumber": -771313680, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 214, "practiceaddress1_stringindexer_transform": 131, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339375, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00117", "practiceaddress1": "1921-1943 CENTRE ST", "practiceaddress2": "UNIT B1", "practicecity": "W ROXBURY", "practicestate": "MA", "practicezip9code": 21322516, "telephonenumber": 1879724926, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 210, "practiceaddress1_stringindexer_transform": 62, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339381, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01886", "practiceaddress1": "425 LOWELL AVE", "practiceaddress2": "UNIT B1", "practicecity": "HAVERHILL", "practicestate": "MA", "practicezip9code": 18323683, "telephonenumber": 1193796642, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 393, "practiceaddress1_stringindexer_transform": 327, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339687, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02283", "practiceaddress1": "715 WILLIAM T MORRISSEY BLVD", "practiceaddress2": "UNIT B1", "practicecity": "DORCHESTER", "practicestate": "MA", "practicezip9code": 21223522, "telephonenumber": 1883254011, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 211, "practiceaddress1_stringindexer_transform": 302, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315441, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHAMRACY #05402", "practiceaddress1": "7 WASHINGTON ST", "practiceaddress2": "UNIT B1", "practicecity": "TAUNTON", "practicestate": "MA", "practicezip9code": 27803918, "telephonenumber": 793248309, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 69, "practiceaddress1_stringindexer_transform": 78, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315285, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01068", "practiceaddress1": "1653 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "ATHOL", "practicestate": "MA", "practicezip9code": 13312640, "telephonenumber": 1192563336, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 366, "practiceaddress1_stringindexer_transform": 289, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339735, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00946", "practiceaddress1": "323 N MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "UXBRIDGE", "practicestate": "MA", "practicezip9code": 15691757, "telephonenumber": 787815160, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 152, "practiceaddress1_stringindexer_transform": 6, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339273, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01010", "practiceaddress1": "85 HIGH ST", "practiceaddress2": "UNIT B1", "practicecity": "MEDFORD", "practicestate": "MA", "practicezip9code": 21553825, "telephonenumber": -775969822, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 274, "practiceaddress1_stringindexer_transform": 245, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20316995, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01234", "practiceaddress1": "208 ELM ST", "practiceaddress2": "UNIT B1", "practicecity": "WESTFIELD", "practicestate": "MA", "practicezip9code": 10853062, "telephonenumber": -159283147, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 416, "practiceaddress1_stringindexer_transform": 82, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339429, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00704", "practiceaddress1": "24 W MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "NORTHBOROUGH", "practicestate": "MA", "practicezip9code": 15321910, "telephonenumber": 788968731, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 140, "practiceaddress1_stringindexer_transform": 212, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339423, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00636", "practiceaddress1": "65 ROUTE 6A", "practiceaddress2": "UNIT B1", "practicecity": "SANDWICH", "practicestate": "MA", "practicezip9code": 25631893, "telephonenumber": 793917037, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 55, "practiceaddress1_stringindexer_transform": 276, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339477, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00318", "practiceaddress1": "637 LOWELL STREET", "practiceaddress2": "UNIT B1", "practicecity": "PEABODY", "practicestate": "MA", "practicezip9code": 19602318, "telephonenumber": 1195420873, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 91, "practiceaddress1_stringindexer_transform": 285, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339471, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01238", "practiceaddress1": "555 MAIN STREET", "practiceaddress2": "UNIT B1", "practicecity": "MEDFIELD", "practicestate": "MA", "practicezip9code": 20522520, "telephonenumber": 788630487, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 395, "practiceaddress1_stringindexer_transform": 456, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339465, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01130", "practiceaddress1": "615-621 BELMONT AVE", "practiceaddress2": "UNIT B1", "practicecity": "SPRINGFIELD", "practicestate": "MA", "practicezip9code": 11082439, "telephonenumber": -157644298, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 193, "practiceaddress1_stringindexer_transform": 144, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 28, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339453, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01872", "practiceaddress1": "438 SUITE B W GROVE ST", "practiceaddress2": "MIDDLEBORO S/C RT 28", "practicecity": "MIDDLEBORO", "practicestate": "MA", "practicezip9code": 23461460, "telephonenumber": 794492784, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 23, "practiceaddress1_stringindexer_transform": 80, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339393, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05874", "practiceaddress1": "631 WASHINGTON ST", "practiceaddress2": "UNIT B1", "practicecity": "BOSTON", "practicestate": "MA", "practicezip9code": 21111716, "telephonenumber": 1878412832, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 190, "practiceaddress1_stringindexer_transform": 174, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 232, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339213, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02254", "practiceaddress1": "137 S MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "MILFORD", "practicestate": "MA", "practicezip9code": 17573258, "telephonenumber": 789813035, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 155, "practiceaddress1_stringindexer_transform": 51, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 301, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339447, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01850", "practiceaddress1": "77 QUAKER MEETING HOUSE RD", "practiceaddress2": "UNIT B1", "practicecity": "SANDWICH", "practicestate": "MA", "practicezip9code": 25635103, "telephonenumber": 789805359, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 135, "practiceaddress1_stringindexer_transform": 167, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339435, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01094", "practiceaddress1": "137 FEDERAL ST", "practiceaddress2": "UNIT B1", "practicecity": "GREENFIELD", "practicestate": "MA", "practicezip9code": 13012544, "telephonenumber": -157220095, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 58, "practiceaddress1_stringindexer_transform": 221, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20336225, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 05913", "practiceaddress1": "200 W NORTHWEST HWY", "practiceaddress2": "UNIT B1", "practicecity": "PALATINE", "practicestate": "IL", "practicezip9code": 600672413, "telephonenumber": -110592062, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 199, "practiceaddress1_stringindexer_transform": 338, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335241, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 07170", "practiceaddress1": "1229 W IL ROUTE 134", "practiceaddress2": "UNIT B1", "practicecity": "ROUND LAKE", "practicestate": "IL", "practicezip9code": 600739725, "telephonenumber": -112527797, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 296, "practiceaddress1_stringindexer_transform": 163, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338997, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10324", "practiceaddress1": "6420 GASTON AVE", "practiceaddress2": "UNIT B1", "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752144022, "telephonenumber": 398373462, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 205, "practiceaddress1_stringindexer_transform": 459, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315519, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01859", "practiceaddress1": "148 ROUTE 137", "practiceaddress2": "UNIT B1", "practicecity": "HARWICH", "practicestate": "MA", "practicezip9code": 26451316, "telephonenumber": 789354722, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 308, "practiceaddress1_stringindexer_transform": 387, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315531, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01873", "practiceaddress1": "435 W CENTRAL ST", "practiceaddress2": "UNIT B1", "practicecity": "FRANKLIN", "practicestate": "MA", "practicezip9code": 20382901, "telephonenumber": 790232957, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 352, "practiceaddress1_stringindexer_transform": 49, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315537, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01875", "practiceaddress1": "414 UNION STREET", "practiceaddress2": "UNIT B1", "practicecity": "ASHLAND", "practicestate": "MA", "practicezip9code": 17212154, "telephonenumber": 793850310, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 410, "practiceaddress1_stringindexer_transform": 429, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339021, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05002", "practiceaddress1": "7000 JUSTIN RD #FM407", "practiceaddress2": "UNIT B1", "practicecity": "LANTANA", "practicestate": "TX", "practicezip9code": 762268412, "telephonenumber": 815905773, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 354, "practiceaddress1_stringindexer_transform": 12, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314637, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10665", "practiceaddress1": "1555 E RENNER RD", "practiceaddress2": "UNIT B1", "practicecity": "RICHARDSON", "practicestate": "TX", "practicezip9code": 750822299, "telephonenumber": 1132446803, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 72, "practiceaddress1_stringindexer_transform": 192, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315111, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 17604", "practiceaddress1": "460 S VANCE ST", "practiceaddress2": "UNIT B1", "practicecity": "LAKEWOOD", "practicestate": "CO", "practicezip9code": 802263305, "telephonenumber": -1262869546, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -105, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 183, "practiceaddress1_stringindexer_transform": 469, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 124, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314643, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10601", "practiceaddress1": "655 MOUNT AUBURN STREET", "practiceaddress2": "UNIT B1", "practicecity": "WATERTOWN", "practicestate": "MA", "practicezip9code": 2472, "telephonenumber": 1882473546, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 280, "practiceaddress1_stringindexer_transform": 366, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315105, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10637", "practiceaddress1": "6750 READING RD", "practiceaddress2": "UNIT B1", "practicecity": "ROSENBERG", "practicestate": "TX", "practicezip9code": 774712390, "telephonenumber": -1482573397, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 421, "practiceaddress1_stringindexer_transform": 416, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315099, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17335", "practiceaddress1": "3650 RIVER POINT PKWY", "practiceaddress2": "UNIT B1", "practicecity": "SHERIDAN", "practicestate": "CO", "practicezip9code": 801103312, "telephonenumber": -1255220634, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -105, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 100, "practiceaddress1_stringindexer_transform": 445, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315093, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16009", "practiceaddress1": "7899 WADSWORTH BLVD", "practiceaddress2": "UNIT B1", "practicecity": "ARVADA", "practicestate": "CO", "practicezip9code": 800032107, "telephonenumber": -1260708574, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -105, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 379, "practiceaddress1_stringindexer_transform": 255, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315081, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10906", "practiceaddress1": "22125 CUMBERLAND RIDGE DR", "practiceaddress2": "UNIT B1", "practicecity": "CYPRESS", "practicestate": "TX", "practicezip9code": 774334074, "telephonenumber": -1477386265, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 133, "practiceaddress1_stringindexer_transform": 206, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315021, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16013", "practiceaddress1": "2800 PEARL ST", "practiceaddress2": "UNIT B1", "practicecity": "BOULDER", "practicestate": "CO", "practicezip9code": 803011123, "telephonenumber": -1262877194, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -105, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 347, "practiceaddress1_stringindexer_transform": 191, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314859, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16895", "practiceaddress1": "400 MARSHALL RD", "practiceaddress2": "UNIT B1", "practicecity": "SUPERIOR", "practicestate": "CO", "practicezip9code": 800278623, "telephonenumber": -1262877189, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -105, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 65, "practiceaddress1_stringindexer_transform": 350, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315075, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16024", "practiceaddress1": "2424 HWY 6 AND 50", "practiceaddress2": "UNIT B1", "practicecity": "GRAND JUNCTION", "practicestate": "CO", "practicezip9code": 815051109, "telephonenumber": 1112477885, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -108, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 101, "practiceaddress1_stringindexer_transform": 126, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315063, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10758", "practiceaddress1": "2501 N FIELD ST", "practiceaddress2": "UNIT B1", "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752011662, "telephonenumber": 2144688732, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 196, "practiceaddress1_stringindexer_transform": 4, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315057, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10603", "practiceaddress1": "15027 STATE HWY 6", "practiceaddress2": "UNIT B1", "practicecity": "ROSHARON", "practicestate": "TX", "practicezip9code": 775833262, "telephonenumber": -1480656695, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 447, "practiceaddress1_stringindexer_transform": 388, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315051, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17276", "practiceaddress1": "14451 ORCHARD PKWY", "practiceaddress2": "UNIT B1", "practicecity": "WESTMINSTER", "practicestate": "CO", "practicezip9code": 800239174, "telephonenumber": -1262877132, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -104, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 147, "practiceaddress1_stringindexer_transform": 95, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315045, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17603", "practiceaddress1": "1265 SGT JON STILES DR", "practiceaddress2": "UNIT B1", "practicecity": "HIGHLANDS RANCH", "practicestate": "CO", "practicezip9code": 801292263, "telephonenumber": -1261732324, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -105, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 75, "practiceaddress1_stringindexer_transform": 100, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315039, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY INC", "practiceaddress1": "5240 N ACADEMY BLVD", "practiceaddress2": "UNIT B1", "practicecity": "COLORADO SPRINGS", "practicestate": "CO", "practicezip9code": 809184004, "telephonenumber": -1397307954, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -104, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 4, "practiceaddress1_stringindexer_transform": 41, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315033, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16074", "practiceaddress1": "16910 E QUINCY AVE", "practiceaddress2": "UNIT B1", "practicecity": "AURORA", "practicestate": "CO", "practicezip9code": 800152745, "telephonenumber": -1258164012, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -104, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 344, "practiceaddress1_stringindexer_transform": 143, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 49, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315027, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17046", "practiceaddress1": "10445 REED ST", "practiceaddress2": "UNIT B1", "practicecity": "WESTMINSTER", "practicestate": "CO", "practicezip9code": 800216063, "telephonenumber": -1260858966, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -105, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 391, "practiceaddress1_stringindexer_transform": 381, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315015, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16081", "practiceaddress1": "1950 E COUNTY LINE RD", "practiceaddress2": "UNIT B1", "practicecity": "HIGHLANDS RANCH", "practicestate": "CO", "practicezip9code": 801262437, "telephonenumber": -1256996525, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -104, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 161, "practiceaddress1_stringindexer_transform": 262, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314871, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16831", "practiceaddress1": "14500 W COLFAX AVE", "practiceaddress2": "UNIT B1", "practicecity": "LAKEWOOD", "practicestate": "CO", "practicezip9code": 804013203, "telephonenumber": -1262227347, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -105, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 428, "practiceaddress1_stringindexer_transform": 13, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 124, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315069, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16033", "practiceaddress1": "6767 S CLINTON ST", "practiceaddress2": "UNIT B1", "practicecity": "ENGLEWOOD", "practicestate": "CO", "practicezip9code": 801123617, "telephonenumber": -1259307291, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -104, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 283, "practiceaddress1_stringindexer_transform": 315, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314601, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10139", "practiceaddress1": "7300 N FM 620 RD", "practiceaddress2": "UNIT B1", "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787264535, "telephonenumber": 827532152, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 46, "practiceaddress1_stringindexer_transform": 480, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 0, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314595, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10598", "practiceaddress1": "204 NEWMAN RD", "practiceaddress2": "UNIT B1", "practicecity": "LA MARQUE", "practicestate": "TX", "practicezip9code": 775683439, "telephonenumber": -195586147, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 445, "practiceaddress1_stringindexer_transform": 329, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314865, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16855", "practiceaddress1": "715 BLUE RIVER PKWY", "practiceaddress2": "UNIT B1", "practicecity": "SILVERTHORNE", "practicestate": "CO", "practicezip9code": 804989224, "telephonenumber": 1114747719, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -106, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 113, "practiceaddress1_stringindexer_transform": 249, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314625, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10752", "practiceaddress1": "25151 FULSHEAR GASTON RD", "practiceaddress2": "UNIT B1", "practicecity": "RICHMOND", "practicestate": "TX", "practicezip9code": 774068782, "telephonenumber": -277315796, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 149, "practiceaddress1_stringindexer_transform": 351, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 48, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314841, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10635", "practiceaddress1": "476 W I-30", "practiceaddress2": "UNIT B1", "practicecity": "ROYSE CITY", "practicestate": "TX", "practicezip9code": 751899706, "telephonenumber": 1136417878, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 245, "practiceaddress1_stringindexer_transform": 231, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314829, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10775", "practiceaddress1": "13901 SENDERA RANCH BLVD", "practiceaddress2": "UNIT B1", "practicecity": "HASLET", "practicestate": "TX", "practicezip9code": 760525832, "telephonenumber": -277315796, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 191, "practiceaddress1_stringindexer_transform": 38, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314589, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10595", "practiceaddress1": "200 CIBOLO VALLEY DR", "practiceaddress2": "UNIT B1", "practicecity": "CIBOLO", "practicestate": "TX", "practicezip9code": 781083830, "telephonenumber": 2105661585, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -98, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 228, "practiceaddress1_stringindexer_transform": 419, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314715, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10580", "practiceaddress1": "9884 HWY 242", "practiceaddress2": "UNIT B1", "practicecity": "CONROE", "practicestate": "TX", "practicezip9code": 77385, "telephonenumber": 772800852, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 169, "practiceaddress1_stringindexer_transform": 195, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 111, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314721, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10638", "practiceaddress1": "9410 FUQUA ST", "practiceaddress2": "UNIT B1", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770753907, "telephonenumber": -1450055113, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 176, "practiceaddress1_stringindexer_transform": 475, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 46, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314727, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10671", "practiceaddress1": "10420 FM 1464 RD", "practiceaddress2": "UNIT B1", "practicecity": "RICHMOND", "practicestate": "TX", "practicezip9code": 774072044, "telephonenumber": -1482567173, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 77, "practiceaddress1_stringindexer_transform": 474, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 48, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314799, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10576", "practiceaddress1": "3802 E BROAD ST", "practiceaddress2": "UNIT B1", "practicecity": "MANSFIELD", "practicestate": "TX", "practicezip9code": 760635617, "telephonenumber": -415203219, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 313, "practiceaddress1_stringindexer_transform": 142, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 225, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336219, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 05987", "practiceaddress1": "4800 N DAMEN", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606251413, "telephonenumber": -850862582, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 417, "practiceaddress1_stringindexer_transform": 317, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 1, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336207, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 05822", "practiceaddress1": "11200 LINCOLN HWY", "practiceaddress2": "UNIT B1", "practicecity": "MOKENA", "practicestate": "IL", "practicezip9code": 604488208, "telephonenumber": -435292421, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 249, "practiceaddress1_stringindexer_transform": 67, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336189, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 05829", "practiceaddress1": "500 DUNDEE AVENUE", "practiceaddress2": "UNIT B1", "practicecity": "ELGIN", "practicestate": "IL", "practicezip9code": 601203819, "telephonenumber": -112982194, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 338, "practiceaddress1_stringindexer_transform": 498, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 180, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336129, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 05836", "practiceaddress1": "1228 E 53RD ST", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606154008, "telephonenumber": -852413167, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 357, "practiceaddress1_stringindexer_transform": 248, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 1, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336183, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 02903", "practiceaddress1": "400 OGDEN AVENUE", "practiceaddress2": "UNIT B1", "practicecity": "DOWNERS GROVE", "practicestate": "IL", "practicezip9code": 605153065, "telephonenumber": 2007751695, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 460, "practiceaddress1_stringindexer_transform": 293, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336177, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 02935", "practiceaddress1": "8712 S STONY ISLAND AVE", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606172708, "telephonenumber": -850595392, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 259, "practiceaddress1_stringindexer_transform": 261, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 1, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336171, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHAMRACY # 02936", "practiceaddress1": "809 PLAINFIELD RD", "practiceaddress2": "UNIT B1", "practicecity": "JOLIET", "practicestate": "IL", "practicezip9code": 604354642, "telephonenumber": -432655890, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 450, "practiceaddress1_stringindexer_transform": 198, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336165, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 02942", "practiceaddress1": "401 W ARMITAGE AVE", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606144512, "telephonenumber": -1171594261, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 151, "practiceaddress1_stringindexer_transform": 371, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 1, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336159, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 02981", "practiceaddress1": "1201 N STATE STREET", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606102218, "telephonenumber": -1168564454, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 307, "practiceaddress1_stringindexer_transform": 277, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 1, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335319, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #02844", "practiceaddress1": "6748 ROOSEVELT RD", "practiceaddress2": "UNIT B1", "practicecity": "OAK PARK", "practicestate": "IL", "practicezip9code": 603042027, "telephonenumber": -1506346802, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 20, "practiceaddress1_stringindexer_transform": 250, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20336213, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMASCY # 05797", "practiceaddress1": "26W212 GENEVA RD", "practiceaddress2": "UNIT B1", "practicecity": "CAROL STREAM", "practicestate": "IL", "practicezip9code": 601882240, "telephonenumber": 2010133769, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 136, "practiceaddress1_stringindexer_transform": 236, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335259, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 02692", "practiceaddress1": "936 S MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "JACKSONVILLE", "practicestate": "IL", "practicezip9code": 626503014, "telephonenumber": -2122535568, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -90, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 287, "practiceaddress1_stringindexer_transform": 308, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337119, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY # 09086", "practiceaddress1": "670 EL CERRITO PLZ", "practiceaddress2": "UNIT B1", "practicecity": "EL CERRITO", "practicestate": "CA", "practicezip9code": 945304010, "telephonenumber": 810278599, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 240, "practiceaddress1_stringindexer_transform": 324, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335685, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #05619", "practiceaddress1": "25 NORTHWEST HWY", "practiceaddress2": "UNIT B1", "practicecity": "CARY", "practicestate": "IL", "practicezip9code": 600133017, "telephonenumber": -114767572, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 11, "practiceaddress1_stringindexer_transform": 415, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335673, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY 05482", "practiceaddress1": "3615 N CENTRAL AVE", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606342753, "telephonenumber": -857102237, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 265, "practiceaddress1_stringindexer_transform": 53, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 1, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335247, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 02827", "practiceaddress1": "600 N MANNHEIM RD", "practiceaddress2": "UNIT B1", "practicecity": "HILLSIDE", "practicestate": "IL", "practicezip9code": 601621122, "telephonenumber": -1503440851, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 138, "practiceaddress1_stringindexer_transform": 427, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335133, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 06935", "practiceaddress1": "804 B EASTWOOD DRIVE", "practiceaddress2": "UNIT B1", "practicecity": "MAHOMET", "practicestate": "IL", "practicezip9code": 618537039, "telephonenumber": -2119105159, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 465, "practiceaddress1_stringindexer_transform": 52, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335373, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #08910", "practiceaddress1": "205 N COLUMBUS DR", "practiceaddress2": "UNIT B1", "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606017801, "telephonenumber": -1166356981, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 365, "practiceaddress1_stringindexer_transform": 296, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 1, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335199, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #04396", "practiceaddress1": "2648 DEMPSTER ST", "practiceaddress2": "UNIT B1", "practicecity": "PARK RIDGE", "practicestate": "IL", "practicezip9code": 600688404, "telephonenumber": -116951790, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 281, "practiceaddress1_stringindexer_transform": 252, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335193, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY 01768", "practiceaddress1": "3400 LINCOLN HWY", "practiceaddress2": "UNIT B1", "practicecity": "OLYMPIA FIELDS", "practicestate": "IL", "practicezip9code": 604611703, "telephonenumber": -1502448120, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 262, "practiceaddress1_stringindexer_transform": 264, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339417, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00513", "practiceaddress1": "252 BROADWAY", "practiceaddress2": "UNIT B1", "practicecity": "RAYNHAM", "practicestate": "MA", "practicezip9code": 27671414, "telephonenumber": 793281325, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 12, "practiceaddress1_stringindexer_transform": 305, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339387, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01900", "practiceaddress1": "218 HANOVER ST", "practiceaddress2": "UNIT B1", "practicecity": "BOSTON", "practicestate": "MA", "practicezip9code": 21132302, "telephonenumber": 1882237639, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 123, "practiceaddress1_stringindexer_transform": 182, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 232, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339357, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00488", "practiceaddress1": "970 SAINT JAMES AVE", "practiceaddress2": "UNIT B1", "practicecity": "SPRINGFIELD", "practicestate": "MA", "practicezip9code": 11042800, "telephonenumber": -157590949, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 224, "practiceaddress1_stringindexer_transform": 488, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 28, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339411, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00365", "practiceaddress1": "259 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "HAVERHILL", "practicestate": "MA", "practicezip9code": 18305046, "telephonenumber": 1193806127, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 122, "practiceaddress1_stringindexer_transform": 453, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339405, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00220", "practiceaddress1": "264 E MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "MARLBOROUGH", "practicestate": "MA", "practicezip9code": 17522669, "telephonenumber": 789888823, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 197, "practiceaddress1_stringindexer_transform": 149, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339399, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01034", "practiceaddress1": "492 CONCORD STREET", "practiceaddress2": "UNIT B1", "practicecity": "FRAMINGHAM", "practicestate": "MA", "practicezip9code": 17022322, "telephonenumber": 793241922, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 35, "practiceaddress1_stringindexer_transform": 386, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339531, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01095", "practiceaddress1": "165 UNIVERSITY DRIVE", "practiceaddress2": "UNIT B1", "practicecity": "AMHERST", "practicestate": "MA", "practicezip9code": 10028900, "telephonenumber": -162406875, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 252, "practiceaddress1_stringindexer_transform": 225, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339543, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 02878", "practiceaddress1": "550 PLEASANT STREET", "practiceaddress2": "UNIT B1", "practicecity": "FALL RIVER", "practicestate": "MA", "practicezip9code": 27213017, "telephonenumber": 791816649, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 182, "practiceaddress1_stringindexer_transform": 10, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339441, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY INC", "practiceaddress1": "191 CAMBRIDGE ST", "practiceaddress2": "UNIT B1", "practicecity": "BOSTON", "practicestate": "MA", "practicezip9code": 21142793, "telephonenumber": 1878703145, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 4, "practiceaddress1_stringindexer_transform": 15, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 232, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20314709, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16935", "practiceaddress1": "4400 CENTERPLACE DR", "practiceaddress2": "UNIT B1", "practicecity": "GREELEY", "practicestate": "CO", "practicezip9code": 806343756, "telephonenumber": 1113370822, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -104, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 15, "practiceaddress1_stringindexer_transform": 342, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 7, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339219, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02600", "practiceaddress1": "1515 COMMERCIAL ST", "practiceaddress2": "UNIT B1", "practicecity": "WEYMOUTH", "practicestate": "MA", "practicezip9code": 21893060, "telephonenumber": -776533468, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 299, "practiceaddress1_stringindexer_transform": 358, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315279, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01248", "practiceaddress1": "240 OAK ST", "practiceaddress2": "UNIT B1", "practicecity": "BROCKTON", "practicestate": "MA", "practicezip9code": 23011300, "telephonenumber": 790917314, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 256, "practiceaddress1_stringindexer_transform": 360, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335181, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "19900 S LA GRANGE RD", "practiceaddress2": "CVS PHARMACY 07760", "practicecity": "MOKENA", "practicestate": "IL", "practicezip9code": 604488674, "telephonenumber": -1505152771, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 5, "practiceaddress1_stringindexer_transform": 61, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20335163, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #07020", "practiceaddress1": "1701 FORT JESSE RD", "practiceaddress2": "UNIT B1", "practicecity": "NORMAL", "practicestate": "IL", "practicezip9code": 617612285, "telephonenumber": -1200445926, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 342, "practiceaddress1_stringindexer_transform": 27, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335235, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 07166", "practiceaddress1": "250 W 144TH ST", "practiceaddress2": "UNIT B1", "practicecity": "RIVERDALE", "practicestate": "IL", "practicezip9code": 608272733, "telephonenumber": -1501439080, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 83, "practiceaddress1_stringindexer_transform": 0, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335157, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #04581", "practiceaddress1": "7139 N MILWAUKEE AVE", "practiceaddress2": "UNIT B1", "practicecity": "NILES", "practicestate": "IL", "practicezip9code": 607144424, "telephonenumber": -113458170, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 112, "practiceaddress1_stringindexer_transform": 242, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314853, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10664", "practiceaddress1": "2180 WOODFOREST PKWY N", "practiceaddress2": "UNIT B1", "practicecity": "MONTGOMERY", "practicestate": "TX", "practicezip9code": 773166958, "telephonenumber": 775951469, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 247, "practiceaddress1_stringindexer_transform": 14, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314847, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10673", "practiceaddress1": "2600 SAM RAYBURN HWY", "practiceaddress2": "UNIT B1", "practicecity": "MELISSA", "practicestate": "TX", "practicezip9code": 75454, "telephonenumber": 1138436469, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 440, "practiceaddress1_stringindexer_transform": 485, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314745, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10691", "practiceaddress1": "302 GATEWAY N", "practiceaddress2": "UNIT B1", "practicecity": "MARBLE FALLS", "practicestate": "TX", "practicezip9code": 786546317, "telephonenumber": -283002218, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -98, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 227, "practiceaddress1_stringindexer_transform": 223, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314823, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10818", "practiceaddress1": "820 S 5TH ST", "practiceaddress2": "UNIT B1", "practicecity": "WACO", "practicestate": "TX", "practicezip9code": 767061110, "telephonenumber": -1752007121, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 396, "practiceaddress1_stringindexer_transform": 411, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314769, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10602", "practiceaddress1": "10515 FRY RD", "practiceaddress2": "UNIT B1", "practicecity": "CYPRESS", "practicestate": "TX", "practicezip9code": 77433, "telephonenumber": -1482398517, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 174, "practiceaddress1_stringindexer_transform": 478, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314757, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10667", "practiceaddress1": "111 E HIDALGO AVE", "practiceaddress2": "UNIT B1", "practicecity": "RAYMONDVILLE", "practicestate": "TX", "practicezip9code": 78580, "telephonenumber": 976958238, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 26, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 166, "practiceaddress1_stringindexer_transform": 56, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314817, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10880", "practiceaddress1": "8580 N MACARTHUR BLVD", "practiceaddress2": "UNIT B1", "practicecity": "IRVING", "practicestate": "TX", "practicezip9code": 750634111, "telephonenumber": 399241964, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 413, "practiceaddress1_stringindexer_transform": 217, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314811, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01996", "practiceaddress1": "24950 FRANZ RD", "practiceaddress2": "UNIT B1", "practicecity": "KATY", "practicestate": "TX", "practicezip9code": 774935811, "telephonenumber": -1479219014, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 204, "practiceaddress1_stringindexer_transform": 436, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314805, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10579", "practiceaddress1": "4600 BROADWAY ST", "practiceaddress2": "UNIT B1", "practicecity": "ALAMO HEIGHTS", "practicestate": "TX", "practicezip9code": 782096214, "telephonenumber": 2108241679, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -98, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 33, "practiceaddress1_stringindexer_transform": 181, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20341445, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10634", "practiceaddress1": "2350 N FITZHUGH AVE", "practiceaddress2": "UNIT B1", "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752043410, "telephonenumber": 2145155574, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 334, "practiceaddress1_stringindexer_transform": 3, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314733, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10944", "practiceaddress1": "105 ALTON BLVD", "practiceaddress2": "UNIT B1", "practicecity": "ALTON", "practicestate": "TX", "practicezip9code": 785731629, "telephonenumber": 975868947, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 26, "longitude": -98, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 414, "practiceaddress1_stringindexer_transform": 39, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314787, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10670", "practiceaddress1": "4930 MAPLE AVE", "practiceaddress2": "UNIT B1", "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752358211, "telephonenumber": 2145204840, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 234, "practiceaddress1_stringindexer_transform": 101, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335355, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #07970", "practiceaddress1": "4511 ALGONQUIN RD", "practiceaddress2": "UNIT B1", "practicecity": "LAKE IN THE HILLS", "practicestate": "IL", "practicezip9code": 60156, "telephonenumber": -113240740, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 70, "practiceaddress1_stringindexer_transform": 384, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335151, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #06748", "practiceaddress1": "6210 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "DOWNERS GROVE", "practicestate": "IL", "practicezip9code": 605161908, "telephonenumber": 2014715980, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 171, "practiceaddress1_stringindexer_transform": 232, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335127, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 06937", "practiceaddress1": "820 N VERMILLION", "practiceaddress2": "UNIT B1", "practicecity": "DANVILLE", "practicestate": "IL", "practicezip9code": 618323920, "telephonenumber": -2120657286, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 128, "practiceaddress1_stringindexer_transform": 406, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 56, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335175, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY 07017", "practiceaddress1": "1130 S VETERANS PKWY", "practiceaddress2": "UNIT B1", "practicecity": "BLOOMINGTON", "practicestate": "IL", "practicezip9code": 617047117, "telephonenumber": -1198355457, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 251, "practiceaddress1_stringindexer_transform": 403, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 114, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335121, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 07142", "practiceaddress1": "16760 W DIVISION ST", "practiceaddress2": "UNIT B1", "practicecity": "LOCKPORT", "practicestate": "IL", "practicezip9code": 604414601, "telephonenumber": -431590302, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 288, "practiceaddress1_stringindexer_transform": 259, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335109, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "1855 W IRVING PARK RD", "practiceaddress2": "UNIT B1", "practicecity": "SCHAUMBURG", "practicestate": "IL", "practicezip9code": 601933516, "telephonenumber": 2013968274, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 5, "practiceaddress1_stringindexer_transform": 76, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20317013, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01184", "practiceaddress1": "MARKET BASKET CENTER RT 1 NEWBURYPORT TURNPIKE", "practiceaddress2": "UNIT B1", "practicecity": "ROWLEY", "practicestate": "MA", "practicezip9code": 19699801, "telephonenumber": 1199547983, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 79, "practiceaddress1_stringindexer_transform": 490, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20316989, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00929", "practiceaddress1": "272 E CENTRAL ST", "practiceaddress2": "UNIT B1", "practicecity": "FRANKLIN", "practicestate": "MA", "practicezip9code": 20381319, "telephonenumber": 790313301, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 418, "practiceaddress1_stringindexer_transform": 36, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339267, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01024", "practiceaddress1": "214 HARVARD AVE", "practiceaddress2": "UNIT B1", "practicecity": "ALLSTON", "practicestate": "MA", "practicezip9code": 21344619, "telephonenumber": 1877808784, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 398, "practiceaddress1_stringindexer_transform": 434, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315201, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00272", "practiceaddress1": "401 GLOUCESTER CROSSING RD", "practiceaddress2": "UNIT B1", "practicecity": "GLOUCESTER", "practicestate": "MA", "practicezip9code": 19302284, "telephonenumber": 1192877858, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 461, "practiceaddress1_stringindexer_transform": 127, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315255, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01867", "practiceaddress1": "517 STATE RD", "practiceaddress2": "UNIT B1", "practicecity": "PLYMOUTH", "practicestate": "MA", "practicezip9code": 23605110, "telephonenumber": 787276016, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 221, "practiceaddress1_stringindexer_transform": 331, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315249, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01868", "practiceaddress1": "67 CENTRAL ST", "practiceaddress2": "UNIT B1", "practicecity": "FOXBORO", "practicestate": "MA", "practicezip9code": 20352424, "telephonenumber": 790469350, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 88, "practiceaddress1_stringindexer_transform": 215, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315243, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01955", "practiceaddress1": "548 DARTMOUTH ST", "practiceaddress2": "UNIT B1", "practicecity": "SOUTH DARTMOUTH", "practicestate": "MA", "practicezip9code": 27481908, "telephonenumber": 794950638, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 103, "practiceaddress1_stringindexer_transform": 359, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315237, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02054", "practiceaddress1": "136 NAHATAN ST", "practiceaddress2": "UNIT B1", "practicecity": "NORWOOD", "practicestate": "MA", "practicezip9code": 20624252, "telephonenumber": -772242170, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 301, "practiceaddress1_stringindexer_transform": 81, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315231, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02161", "practiceaddress1": "302 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "OXFORD", "practicestate": "MA", "practicezip9code": 15402361, "telephonenumber": 794904031, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 292, "practiceaddress1_stringindexer_transform": 40, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315225, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02200", "practiceaddress1": "1030 PUTNAM AVE", "practiceaddress2": "UNIT B1", "practicecity": "MARSTONS MILLS", "practicestate": "MA", "practicezip9code": 26481896, "telephonenumber": 789322342, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 184, "practiceaddress1_stringindexer_transform": 385, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315219, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00062", "practiceaddress1": "6 THATCHER RD", "practiceaddress2": "UNIT B1", "practicecity": "GLOUCESTER", "practicestate": "MA", "practicezip9code": 19303148, "telephonenumber": 1192902888, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 185, "practiceaddress1_stringindexer_transform": 444, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315213, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00137", "practiceaddress1": "626 S ARTERY", "practiceaddress2": "ROUTE 3A", "practicecity": "QUINCY", "practicestate": "MA", "practicezip9code": 21695648, "telephonenumber": 1879760238, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 61, "practiceaddress1_stringindexer_transform": 468, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315207, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00260", "practiceaddress1": "155-157 CHARLES ST", "practiceaddress2": "UNIT B1", "practicecity": "BOSTON", "practicestate": "MA", "practicezip9code": 21143294, "telephonenumber": 1880263732, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 179, "practiceaddress1_stringindexer_transform": 440, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 232, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315195, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00335", "practiceaddress1": "266 NEW STATE HWY", "practiceaddress2": "UNIT B1", "practicecity": "RAYNHAM", "practicestate": "MA", "practicezip9code": 27675446, "telephonenumber": 793274065, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 367, "practiceaddress1_stringindexer_transform": 87, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315267, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01861", "practiceaddress1": "884-886 WASHINGTON STREET", "practiceaddress2": "UNIT B1", "practicecity": "BRAINTREE", "practicestate": "MA", "practicezip9code": 21846422, "telephonenumber": -771503944, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 129, "practiceaddress1_stringindexer_transform": 154, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315189, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00373", "practiceaddress1": "250 WHITING FARMS RD", "practiceaddress2": "UNIT B1", "practicecity": "HOLYOKE", "practicestate": "MA", "practicezip9code": 10402837, "telephonenumber": -159644080, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 458, "practiceaddress1_stringindexer_transform": 35, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315657, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00394", "practiceaddress1": "1479 NEWMAN AVENUE", "practiceaddress2": "UNIT B1", "practicecity": "SEEKONK", "practicestate": "MA", "practicezip9code": 27712618, "telephonenumber": 789031505, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 137, "practiceaddress1_stringindexer_transform": 43, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315609, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00517", "practiceaddress1": "746 BLISS RD", "practiceaddress2": "UNIT B1", "practicecity": "LONGMEADOW", "practicestate": "MA", "practicezip9code": 11061557, "telephonenumber": -159288335, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 49, "practiceaddress1_stringindexer_transform": 200, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315561, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02206", "practiceaddress1": "366 WASHINGTON ST", "practiceaddress2": "UNIT B1", "practicecity": "SOUTH ATTLEBORO", "practicestate": "MA", "practicezip9code": 27035917, "telephonenumber": 792649848, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 356, "practiceaddress1_stringindexer_transform": 161, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315669, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 07232", "practiceaddress1": "689 DEPOT ST", "practiceaddress2": "UNIT B1", "practicecity": "NORTH EASTON", "practicestate": "MA", "practicezip9code": 23562703, "telephonenumber": 787413308, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 92, "practiceaddress1_stringindexer_transform": 431, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315291, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06505", "practiceaddress1": "978 BOYLSTON ST", "practiceaddress2": "UNIT B1", "practicecity": "NEWTON", "practicestate": "MA", "practicezip9code": 24611504, "telephonenumber": 1877473525, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 42, "practiceaddress1_stringindexer_transform": 334, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315165, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02959", "practiceaddress1": "139 ENDICOTT ST", "practiceaddress2": "UNIT B1", "practicecity": "DANVERS", "practicestate": "MA", "practicezip9code": 19234803, "telephonenumber": 1196534338, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 125, "practiceaddress1_stringindexer_transform": 477, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339747, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01022", "practiceaddress1": "215 ALEWIFE BROOK PKWY", "practiceaddress2": "UNIT B1", "practicecity": "CAMBRIDGE", "practicestate": "MA", "practicezip9code": 21381101, "telephonenumber": 1881649126, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 157, "practiceaddress1_stringindexer_transform": 190, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20315543, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01876", "practiceaddress1": "900 COMMONWEALTH AVENUE", "practiceaddress2": "UNIT B1", "practicecity": "BOSTON", "practicestate": "MA", "practicezip9code": 22151204, "telephonenumber": 1877354804, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 310, "practiceaddress1_stringindexer_transform": 119, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 232, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20315261, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01865", "practiceaddress1": "155 CENTER ST", "practiceaddress2": "UNIT B1", "practicecity": "PEMBROKE", "practicestate": "MA", "practicezip9code": 23592654, "telephonenumber": -777001479, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -70, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 25, "practiceaddress1_stringindexer_transform": 374, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20313875, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07222", "practiceaddress1": "4131 ALDINE MAIL RTE", "practiceaddress2": "UNIT B1", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770394649, "telephonenumber": -1475112555, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 380, "practiceaddress1_stringindexer_transform": 409, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 46, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20317025, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01179", "practiceaddress1": "234 WASHINGTON ST", "practiceaddress2": "UNIT B1", "practicecity": "HUDSON", "practicestate": "MA", "practicezip9code": 17493735, "telephonenumber": 1195688071, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 424, "practiceaddress1_stringindexer_transform": 29, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337071, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09320", "practiceaddress1": "686 LIGHTHOUSE AVE", "practiceaddress2": "UNIT B1", "practicecity": "MONTEREY", "practicestate": "CA", "practicezip9code": 939401008, "telephonenumber": -273379181, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 187, "practiceaddress1_stringindexer_transform": 17, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337131, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #07962", "practiceaddress1": "5685 BALBOA AVE", "practiceaddress2": "UNIT B1", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921112705, "telephonenumber": -7141732, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 220, "practiceaddress1_stringindexer_transform": 175, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 53, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335145, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 06933", "practiceaddress1": "1205 E GROVE STREET", "practiceaddress2": "UNIT B1", "practicecity": "RANTOUL", "practicestate": "IL", "practicezip9code": 618662629, "telephonenumber": -2116039174, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 164, "practiceaddress1_stringindexer_transform": 263, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337125, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09099", "practiceaddress1": "4020 FREMONT HUB", "practiceaddress2": "UNIT B1", "practicecity": "FREMONT", "practicestate": "CA", "practicezip9code": 945381322, "telephonenumber": 813008209, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 159, "practiceaddress1_stringindexer_transform": 404, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337107, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09130", "practiceaddress1": "175 41ST ST", "practiceaddress2": "UNIT B1", "practicecity": "OAKLAND", "practicestate": "CA", "practicezip9code": 946115206, "telephonenumber": 811616200, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 51, "practiceaddress1_stringindexer_transform": 471, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336939, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09142", "practiceaddress1": "1550 E COVELL BLVD", "practiceaddress2": "UNIT B1", "practicecity": "DAVIS", "practicestate": "CA", "practicezip9code": 956161352, "telephonenumber": 1012566708, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 382, "practiceaddress1_stringindexer_transform": 401, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336933, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY # 09147", "practiceaddress1": "2605 W MARCH LN", "practiceaddress2": "UNIT B1", "practicecity": "STOCKTON", "practicestate": "CA", "practicezip9code": 952076522, "telephonenumber": 2099523494, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 66, "practiceaddress1_stringindexer_transform": 16, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337419, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09896", "practiceaddress1": "4550 MERIDIAN AVE", "practiceaddress2": "UNIT B1", "practicecity": "SAN JOSE", "practicestate": "CA", "practicezip9code": 951244828, "telephonenumber": -212295824, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 258, "practiceaddress1_stringindexer_transform": 301, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337083, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09135", "practiceaddress1": "129 N EL CAMINO REAL", "practiceaddress2": "UNIT B1", "practicecity": "ENCINITAS", "practicestate": "CA", "practicezip9code": 920242802, "telephonenumber": -980512323, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 114, "practiceaddress1_stringindexer_transform": 246, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337011, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09929", "practiceaddress1": "2000 MOUNTAIN BLVD", "practiceaddress2": "UNIT B1", "practicecity": "OAKLAND", "practicestate": "CA", "practicezip9code": 946112807, "telephonenumber": 808431239, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 431, "practiceaddress1_stringindexer_transform": 364, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337395, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "LONGS DRUG STORES CALIFORNIA LLC", "practiceaddress1": "2700 HOMESTEAD RD", "practiceaddress2": "UNIT B1", "practicecity": "SANTA CLARA", "practicestate": "CA", "practicezip9code": 950515353, "telephonenumber": -212488596, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 19, "practiceaddress1_stringindexer_transform": 438, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336945, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09922", "practiceaddress1": "3950 W POINT LOMA BLVD", "practiceaddress2": "UNIT B1", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921105601, "telephonenumber": 1900264144, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 192, "practiceaddress1_stringindexer_transform": 203, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 53, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336957, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09921", "practiceaddress1": "2069 CAMDEN AVE", "practiceaddress2": "UNIT B1", "practicecity": "SAN JOSE", "practicestate": "CA", "practicezip9code": 951242024, "telephonenumber": -209375846, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 87, "practiceaddress1_stringindexer_transform": 2, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337299, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09920", "practiceaddress1": "30640 RANCHO CALIFORNIA RD", "practiceaddress2": "UNIT B1", "practicecity": "TEMECULA", "practicestate": "CA", "practicezip9code": 925913276, "telephonenumber": 927017121, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 333, "practiceaddress1_stringindexer_transform": 96, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20336465, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09909", "practiceaddress1": "8320 EL CAMINO REAL", "practiceaddress2": "UNIT B1", "practicecity": "ATASCADERO", "practicestate": "CA", "practicezip9code": 934225354, "telephonenumber": -535273860, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35, "longitude": -120, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 250, "practiceaddress1_stringindexer_transform": 449, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336963, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09917", "practiceaddress1": "625 ELMIRA RD", "practiceaddress2": "UNIT B1", "practicecity": "VACAVILLE", "practicestate": "CA", "practicezip9code": 956874655, "telephonenumber": -1515424307, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 378, "practiceaddress1_stringindexer_transform": 156, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337425, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09919", "practiceaddress1": "1621 LANDER AVE", "practiceaddress2": "UNIT B1", "practicecity": "TURLOCK", "practicestate": "CA", "practicezip9code": 953806200, "telephonenumber": 2096696446, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -120, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 384, "practiceaddress1_stringindexer_transform": 352, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20337413, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09801", "practiceaddress1": "10 SHAW AVE", "practiceaddress2": "UNIT B1", "practicecity": "CLOVIS", "practicestate": "CA", "practicezip9code": 936123802, "telephonenumber": 1298032215, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36, "longitude": -119, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 429, "practiceaddress1_stringindexer_transform": 201, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20337095, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09146", "practiceaddress1": "575 S CITRUS AVE", "practiceaddress2": "UNIT B1", "practicecity": "COVINA", "practicestate": "CA", "practicezip9code": 917232930, "telephonenumber": 1968342740, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 108, "practiceaddress1_stringindexer_transform": 186, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337407, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09800", "practiceaddress1": "650 SAN RAMON VALLEY BLVD", "practiceaddress2": "UNIT B1", "practicecity": "DANVILLE", "practicestate": "CA", "practicezip9code": 945264022, "telephonenumber": 668268630, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 314, "practiceaddress1_stringindexer_transform": 137, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 56, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20337077, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09128", "practiceaddress1": "2314 SANTA CLARA AVE", "practiceaddress2": "UNIT B1", "practicecity": "ALAMEDA", "practicestate": "CA", "practicezip9code": 945014522, "telephonenumber": 810267633, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 388, "practiceaddress1_stringindexer_transform": 281, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337005, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "LONGS DRUG STORE #09815", "practiceaddress1": "738 BANCROFT RD", "practiceaddress2": "UNIT B1", "practicecity": "WALNUT CREEK", "practicestate": "CA", "practicezip9code": 945981531, "telephonenumber": 669453933, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 59, "practiceaddress1_stringindexer_transform": 398, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336999, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09818", "practiceaddress1": "572 FLETCHER PKWY", "practiceaddress2": "UNIT B1", "practicecity": "EL CAJON", "practicestate": "CA", "practicezip9code": 920202509, "telephonenumber": 1899436405, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -116, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 355, "practiceaddress1_stringindexer_transform": 257, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336993, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09819", "practiceaddress1": "191 DEPOT STREET", "practiceaddress2": "UNIT B1", "practicecity": "VACAVILLE", "practicestate": "CA", "practicezip9code": 956883900, "telephonenumber": -1515472191, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 309, "practiceaddress1_stringindexer_transform": 19, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336423, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09208", "practiceaddress1": "13763 MONO WAY", "practiceaddress2": "UNIT B1", "practicecity": "SONORA", "practicestate": "CA", "practicezip9code": 953708813, "telephonenumber": 2095326973, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -120, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 368, "practiceaddress1_stringindexer_transform": 120, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20337371, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09296", "practiceaddress1": "3420 CAMINO TASSAJARA", "practiceaddress2": "UNIT B1", "practicecity": "DANVILLE", "practicestate": "CA", "practicezip9code": 945064680, "telephonenumber": 667425670, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 109, "practiceaddress1_stringindexer_transform": 472, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 56, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20335265, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #05421", "practiceaddress1": "2375 DRAUDEN RD", "practiceaddress2": "UNIT B1", "practicecity": "PLAINFIELD", "practicestate": "IL", "practicezip9code": 605862213, "telephonenumber": -434164135, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 462, "practiceaddress1_stringindexer_transform": 343, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 31, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20334509, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #08734", "practiceaddress1": "1801 W GOLF RD", "practiceaddress2": "UNIT B1", "practicecity": "SCHAUMBURG", "practicestate": "IL", "practicezip9code": 601941148, "telephonenumber": -111083266, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -88, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 2, "practicename_stringindexer_transform": 351, "practiceaddress1_stringindexer_transform": 486, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 4, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337089, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #07553", "practiceaddress1": "3011 E SHIELDS AVE", "practiceaddress2": "UNIT B1", "practicecity": "FRESNO", "practicestate": "CA", "practicezip9code": 937266752, "telephonenumber": 1297275669, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36, "longitude": -119, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 50, "practiceaddress1_stringindexer_transform": 170, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337101, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09167", "practiceaddress1": "790 JAMACHA RD", "practiceaddress2": "UNIT B1", "practicecity": "EL CAJON", "practicestate": "CA", "practicezip9code": 920193201, "telephonenumber": 1899462143, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -116, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 439, "practiceaddress1_stringindexer_transform": 162, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20340953, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09149", "practiceaddress1": "6750 N CEDAR AVE", "practiceaddress2": "UNIT B1", "practicecity": "FRESNO", "practicestate": "CA", "practicezip9code": 937104403, "telephonenumber": 1298025819, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36, "longitude": -119, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 443, "practiceaddress1_stringindexer_transform": 464, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336873, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY # 09162", "practiceaddress1": "3749 AVOCADO BLVD", "practiceaddress2": "UNIT B1", "practicecity": "LA MESA", "practicestate": "CA", "practicezip9code": 919417301, "telephonenumber": 1901738039, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -116, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 363, "practiceaddress1_stringindexer_transform": 287, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336927, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY 09150", "practiceaddress1": "388 ELM AVE", "practiceaddress2": "UNIT B1", "practicecity": "AUBURN", "practicestate": "CA", "practicezip9code": 956034525, "telephonenumber": 1013263529, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 34, "practiceaddress1_stringindexer_transform": 208, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 273, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336921, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY 09152", "practiceaddress1": "201 W NAPA ST", "practiceaddress2": "STE 35", "practicecity": "SONOMA", "practicestate": "CA", "practicezip9code": 954766643, "telephonenumber": -1510549858, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 302, "practiceaddress1_stringindexer_transform": 345, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20336915, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY 09153", "practiceaddress1": "42520 BOB HOPE DRIVE", "practiceaddress2": "UNIT B1", "practicecity": "RANCHO MIRAGE", "practicestate": "CA", "practicezip9code": 922704471, "telephonenumber": -984248941, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33, "longitude": -116, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 394, "practiceaddress1_stringindexer_transform": 117, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336909, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY 09155", "practiceaddress1": "1005 SUTTON WAY", "practiceaddress2": "UNIT B1", "practicecity": "GRASS VALLEY", "practicestate": "CA", "practicezip9code": 959455182, "telephonenumber": 1007761585, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 141, "practiceaddress1_stringindexer_transform": 60, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20336903, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09154", "practiceaddress1": "10350 FRIARS RD", "practiceaddress2": "UNIT B1", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921202303, "telephonenumber": 1900672694, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 198, "practiceaddress1_stringindexer_transform": 57, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 53, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336897, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY # 09156", "practiceaddress1": "5875 CALLE REAL", "practiceaddress2": "UNIT B1", "practicecity": "GOLETA", "practicestate": "CA", "practicezip9code": 931172313, "telephonenumber": -530258915, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34, "longitude": -119, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 208, "practiceaddress1_stringindexer_transform": 462, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336951, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09845", "practiceaddress1": "1155 W HENDERSON", "practiceaddress2": "UNIT B1", "practicecity": "PORTERVILLE", "practicestate": "CA", "practicezip9code": 932571452, "telephonenumber": 1302876021, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36, "longitude": -119, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 117, "practiceaddress1_stringindexer_transform": 98, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336891, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09158", "practiceaddress1": "850 OROVILLE DAM BLVD E", "practiceaddress2": "UNIT B1", "practicecity": "OROVILLE", "practicestate": "CA", "practicezip9code": 959655722, "telephonenumber": 1010374258, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 167, "practiceaddress1_stringindexer_transform": 326, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336879, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY 09161", "practiceaddress1": "45 N MILPITAS BLVD", "practiceaddress2": "UNIT B1", "practicecity": "MILPITAS", "practicestate": "CA", "practicezip9code": 950354402, "telephonenumber": -205500872, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 56, "practiceaddress1_stringindexer_transform": 476, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336867, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09821", "practiceaddress1": "2116 S BROADWAY", "practiceaddress2": "UNIT B1", "practicecity": "SANTA MARIA", "practicestate": "CA", "practicezip9code": 934547812, "telephonenumber": -530706658, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34, "longitude": -120, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 400, "practiceaddress1_stringindexer_transform": 157, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 197, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337161, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY 09282", "practiceaddress1": "1471 W COVELL BLVD", "practiceaddress2": "UNIT B1", "practicecity": "DAVIS", "practicestate": "CA", "practicezip9code": 956165932, "telephonenumber": 1012603832, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 254, "practiceaddress1_stringindexer_transform": 292, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337401, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09796", "practiceaddress1": "490 RODRIGUEZ ST", "practiceaddress2": "UNIT B1", "practicecity": "WATSONVILLE", "practicestate": "CA", "practicezip9code": 950764522, "telephonenumber": -272705138, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 189, "practiceaddress1_stringindexer_transform": 243, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337389, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09783", "practiceaddress1": "1730 SWEETWATER RD", "practiceaddress2": "UNIT B1", "practicecity": "NATIONAL CITY", "practicestate": "CA", "practicezip9code": 919507625, "telephonenumber": 1899779407, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 385, "practiceaddress1_stringindexer_transform": 237, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20345015, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09752", "practiceaddress1": "375 GELLERT BLVD", "practiceaddress2": "UNIT B1", "practicecity": "DALY CITY", "practicestate": "CA", "practicezip9code": 940152613, "telephonenumber": -2079993840, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 10, "practiceaddress1_stringindexer_transform": 160, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20344793, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09834", "practiceaddress1": "12940 SARATOGA SUNNYVALE RD", "practiceaddress2": "UNIT B1", "practicecity": "SARATOGA", "practicestate": "CA", "practicezip9code": 950704250, "telephonenumber": -206290474, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 95, "practiceaddress1_stringindexer_transform": 72, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20344139, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09872", "practiceaddress1": "6877 SEBASTOPOL AVE", "practiceaddress2": "UNIT B1", "practicecity": "SEBASTOPOL", "practicestate": "CA", "practicezip9code": 954723416, "telephonenumber": -1511697383, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 206, "practiceaddress1_stringindexer_transform": 58, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20344841, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09219", "practiceaddress1": "330 BON AIR CENTER", "practiceaddress2": "UNIT B1", "practicecity": "GREENBRAE", "practicestate": "CA", "practicezip9code": 949043017, "telephonenumber": -140348203, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 438, "practiceaddress1_stringindexer_transform": 392, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336885, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09159", "practiceaddress1": "1109 COUNTRY CLUB DR", "practiceaddress2": "UNIT B1", "practicecity": "MADERA", "practicestate": "CA", "practicezip9code": 936381537, "telephonenumber": 1301762707, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36, "longitude": -120, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 337, "practiceaddress1_stringindexer_transform": 420, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20337113, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09822", "practiceaddress1": "155 ORCHARD PLZ", "practiceaddress2": "UNIT B1", "practicecity": "UKIAH", "practicestate": "CA", "practicezip9code": 954825013, "telephonenumber": -1515304841, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -123, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 231, "practiceaddress1_stringindexer_transform": 442, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314775, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10886", "practiceaddress1": "7220 BLUE MOUND RD", "practiceaddress2": "UNIT B1", "practicecity": "FORT WORTH", "practicestate": "TX", "practicezip9code": 761314802, "telephonenumber": -277315796, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 120, "practiceaddress1_stringindexer_transform": 332, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314835, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10750", "practiceaddress1": "9050 FM 1560 N", "practiceaddress2": "UNIT B1", "practicecity": "SAN ANTONIO", "practicestate": "TX", "practicezip9code": 78254, "telephonenumber": 2106889160, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -98, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 13, "practiceaddress1_stringindexer_transform": 346, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 30, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20314763, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10681", "practiceaddress1": "61 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "HOPKINTON", "practicestate": "MA", "practicezip9code": 17481123, "telephonenumber": 790474144, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 18, "practiceaddress1_stringindexer_transform": 258, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20338619, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10177", "practiceaddress1": "2720 FM 1463", "practiceaddress2": "UNIT B1", "practicecity": "KATY", "practicestate": "TX", "practicezip9code": 774943827, "telephonenumber": -1477268041, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 27, "practiceaddress1_stringindexer_transform": 220, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340515, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05493", "practiceaddress1": "336 BRIDGE ST", "practiceaddress2": "UNIT B1", "practicecity": "LOWELL", "practicestate": "MA", "practicezip9code": 18502409, "telephonenumber": 1194592573, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 426, "practiceaddress1_stringindexer_transform": 46, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340611, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00046", "practiceaddress1": "999 WATERTOWN ST", "practiceaddress2": "UNIT B1", "practicecity": "W NEWTON", "practicestate": "MA", "practicezip9code": 24652130, "telephonenumber": 1884680440, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 320, "practiceaddress1_stringindexer_transform": 168, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340527, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01023", "practiceaddress1": "34 CAMBRIDGE ST", "practiceaddress2": "SPACE 160", "practicecity": "BURLINGTON", "practicestate": "MA", "practicezip9code": 18034611, "telephonenumber": -777200947, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 41, "practiceaddress1_stringindexer_transform": 185, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340599, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01265", "practiceaddress1": "210 BORDER", "practiceaddress2": "UNIT B1", "practicecity": "EAST BOSTON", "practicestate": "MA", "practicezip9code": 21281618, "telephonenumber": 1880707851, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 64, "practiceaddress1_stringindexer_transform": 465, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340653, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01199", "practiceaddress1": "647 VFW PKWY", "practiceaddress2": "UNIT B1", "practicecity": "CHESTNUT HILL", "practicestate": "MA", "practicezip9code": 24673656, "telephonenumber": 1879727968, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 246, "practiceaddress1_stringindexer_transform": 134, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340647, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00055", "practiceaddress1": "1927 BEACON STREET", "practiceaddress2": "UNIT B1", "practicecity": "BRIGHTON", "practicestate": "MA", "practicezip9code": 21357783, "telephonenumber": 1882419524, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 36, "practiceaddress1_stringindexer_transform": 114, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20340641, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00107", "practiceaddress1": "839 WASHINGTON ST", "practiceaddress2": "UNIT B1", "practicecity": "NEWTON", "practicestate": "MA", "practicezip9code": 24601548, "telephonenumber": 1880311634, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 63, "practiceaddress1_stringindexer_transform": 270, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340635, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00714", "practiceaddress1": "532 MEDFORD ST", "practiceaddress2": "UNIT B1", "practicecity": "SOMERVILLE", "practicestate": "MA", "practicezip9code": 21452657, "telephonenumber": 1881314105, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 322, "practiceaddress1_stringindexer_transform": 267, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20340629, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00736", "practiceaddress1": "199 GREAT RD", "practiceaddress2": "UNIT B1", "practicecity": "BEDFORD", "practicestate": "MA", "practicezip9code": 17302713, "telephonenumber": -1407180985, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 143, "practiceaddress1_stringindexer_transform": 328, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340461, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY# 08441", "practiceaddress1": "301 CENTRAL ST", "practiceaddress2": "UNIT B1", "practicecity": "WINCHENDON", "practicestate": "MA", "practicezip9code": 14751402, "telephonenumber": 1193039200, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -72, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 194, "practiceaddress1_stringindexer_transform": 310, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20340623, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02201", "practiceaddress1": "270 BUSSEY ST", "practiceaddress2": "DELLA PARK PLAZA", "practicecity": "DEDHAM", "practicestate": "MA", "practicezip9code": 20262544, "telephonenumber": -775863747, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 271, "practiceaddress1_stringindexer_transform": 499, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 240, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340605, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01009", "practiceaddress1": "21 AUSTIN ST", "practiceaddress2": "BUNKER HILL MALL", "practicecity": "CHARLESTOWN", "practicestate": "MA", "practicezip9code": 21293502, "telephonenumber": 1877455654, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 209, "practiceaddress1_stringindexer_transform": 344, "practiceaddress2_stringindexer_transform": 30, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20338901, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY#01803", "practiceaddress1": "2 W CENTER STREET", "practiceaddress2": "UNIT B1", "practicecity": "WEST BRIDGEWATER", "practicestate": "MA", "practicezip9code": 23791741, "telephonenumber": 790920754, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 295, "practiceaddress1_stringindexer_transform": 256, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340593, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01012", "practiceaddress1": "27 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "WATERTOWN", "practicestate": "MA", "practicezip9code": 24724404, "telephonenumber": 1884299366, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 216, "practiceaddress1_stringindexer_transform": 288, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340533, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS #05494", "practiceaddress1": "1500 TRAMWAY BLVD NE", "practiceaddress2": "UNIT B1", "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871126198, "telephonenumber": 757997507, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35, "longitude": -106, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 145, "practiceaddress1_stringindexer_transform": 417, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 136, "practicestate_stringindexer_transform": 14, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20340587, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #04820", "practiceaddress1": "100 N DUMAS AVE", "practiceaddress2": "UNIT B1", "practicecity": "DUMAS", "practicestate": "TX", "practicezip9code": 790292432, "telephonenumber": -520582205, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35, "longitude": -101, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 248, "practiceaddress1_stringindexer_transform": 461, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20340581, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #04880", "practiceaddress1": "805 W BUSINESS HWY 380", "practiceaddress2": "UNIT B1", "practicecity": "DECATUR", "practicestate": "TX", "practicezip9code": 762341651, "telephonenumber": 816330297, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 47, "practiceaddress1_stringindexer_transform": 213, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 21, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20340569, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 07319", "practiceaddress1": "10700 UNSER BLVD NW", "practiceaddress2": "UNIT B1", "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871141064, "telephonenumber": 762954696, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35, "longitude": -106, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 373, "practiceaddress1_stringindexer_transform": 188, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 136, "practicestate_stringindexer_transform": 14, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20340449, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY# 01878", "practiceaddress1": "12 QUEEN ANNE RD", "practiceaddress2": "UNIT B1", "practicecity": "CHATHAM", "practicestate": "MA", "practicezip9code": 26331859, "telephonenumber": 794487044, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41, "longitude": -69, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 43, "practiceaddress1_stringindexer_transform": 128, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340617, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01001", "practiceaddress1": "1080 EASTERN AVE", "practiceaddress2": "UNIT B1", "practicecity": "MALDEN", "practicestate": "MA", "practicezip9code": 21486129, "telephonenumber": -776708702, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 232, "practiceaddress1_stringindexer_transform": 424, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20314607, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10581", "practiceaddress1": "12740 ELDORADO PKWY", "practiceaddress2": "UNIT B1", "practicecity": "FRISCO", "practicestate": "TX", "practicezip9code": 750355890, "telephonenumber": 398657910, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33, "longitude": -96, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 436, "practiceaddress1_stringindexer_transform": 278, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 177, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20314613, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10535", "practiceaddress1": "220 S FM 1626", "practiceaddress2": "UNIT B1", "practicecity": "BUDA", "practicestate": "TX", "practicezip9code": 786103071, "telephonenumber": 827985141, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 448, "practiceaddress1_stringindexer_transform": 483, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340929, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05382", "practiceaddress1": "181 BRIGHTON AVENUE", "practiceaddress2": "UNIT B1", "practicecity": "ALLSTON", "practicestate": "MA", "practicezip9code": 21342044, "telephonenumber": 1882830017, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 84, "practiceaddress1_stringindexer_transform": 187, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20340455, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY", "practiceaddress1": "10522 SPRING GREEN BLVD", "practiceaddress2": "UNIT B1", "practicecity": "KATY", "practicestate": "TX", "practicezip9code": 77494, "telephonenumber": -1481043944, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Infusion Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29, "longitude": -95, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 236, "practiceaddress1_stringindexer_transform": 414, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 56}, {"provider_id": 20340389, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00131", "practiceaddress1": "210 BOSTON RD", "practiceaddress2": "UNIT B1", "practicecity": "NORTH BILLERICA", "practicestate": "MA", "practicezip9code": 18622309, "telephonenumber": 1196702024, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 260, "practiceaddress1_stringindexer_transform": 306, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339753, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01531", "practiceaddress1": "947 PROVIDENCE HWY", "practiceaddress2": "UNIT B1", "practicecity": "DEDHAM", "practicestate": "MA", "practicezip9code": 20266838, "telephonenumber": -776726291, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 268, "practiceaddress1_stringindexer_transform": 437, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 240, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20338685, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01845", "practiceaddress1": "222 MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "WILMINGTON", "practicestate": "MA", "practicezip9code": 18872303, "telephonenumber": 1196648785, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 218, "practiceaddress1_stringindexer_transform": 458, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339321, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00604", "practiceaddress1": "199 SUDBURY RD", "practiceaddress2": "UNIT B1", "practicecity": "CONCORD", "practicestate": "MA", "practicezip9code": 17423466, "telephonenumber": 1193776096, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 86, "practiceaddress1_stringindexer_transform": 376, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339315, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00632", "practiceaddress1": "4 BROADWAY RD", "practiceaddress2": "UNIT B1", "practicecity": "DRACUT", "practicestate": "MA", "practicezip9code": 18264002, "telephonenumber": 1199445403, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 451, "practiceaddress1_stringindexer_transform": 199, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20339309, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00654", "practiceaddress1": "344 GREAT RD", "practiceaddress2": "UNIT B1", "practicecity": "ACTON", "practicestate": "MA", "practicezip9code": 17204044, "telephonenumber": 1192714538, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 427, "practiceaddress1_stringindexer_transform": 226, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339303, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00674", "practiceaddress1": "980-986 GREAT PLAIN AVE", "practiceaddress2": "UNIT B1", "practicecity": "NEEDHAM", "practicestate": "MA", "practicezip9code": 24922508, "telephonenumber": -775442322, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -71, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 237, "practiceaddress1_stringindexer_transform": 9, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 0, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339297, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07242", "practiceaddress1": "4201 MONTANO RD NW", "practiceaddress2": "UNIT B1", "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871205743, "telephonenumber": 764259027, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35, "longitude": -106, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 96, "practiceaddress1_stringindexer_transform": 291, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 136, "practicestate_stringindexer_transform": 14, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337287, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY # 09844", "practiceaddress1": "760 ARNEILL RD", "practiceaddress2": "UNIT B1", "practicecity": "CAMARILLO", "practicestate": "CA", "practicezip9code": 930104726, "telephonenumber": -535094146, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34, "longitude": -119, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 270, "practiceaddress1_stringindexer_transform": 159, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20344817, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09198", "practiceaddress1": "1675 HOLLENBECK AVE", "practiceaddress2": "UNIT B1", "practicecity": "SUNNYVALE", "practicestate": "CA", "practicezip9code": 940875402, "telephonenumber": -207609374, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 306, "practiceaddress1_stringindexer_transform": 205, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337167, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "HOOK-SUPERX LLC", "practiceaddress1": "3501 N GREEN RIVER RD", "practiceaddress2": "UNIT B1", "practicecity": "EVANSVILLE", "practicestate": "IN", "practicezip9code": 477151347, "telephonenumber": -465199855, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 12, "practicename_stringindexer_transform": 6, "practiceaddress1_stringindexer_transform": 467, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 16, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20336459, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "HOOK- SUPERX, L.L.C..", "practiceaddress1": "5000 WASHINGTON AVE", "practiceaddress2": "UNIT B1", "practicecity": "EVANSVILLE", "practicestate": "IN", "practicezip9code": 477154812, "telephonenumber": -465204479, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -87, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 12, "practicename_stringindexer_transform": 286, "practiceaddress1_stringindexer_transform": 171, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 16, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 24546594, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "HOOK-SUPERX LLC", "practiceaddress1": "730 E STATE ROAD 32", "practiceaddress2": "UNIT B1", "practicecity": "WESTFIELD", "practicestate": "IN", "practicezip9code": 460749659, "telephonenumber": -1120974217, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -86, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 12, "practicename_stringindexer_transform": 6, "practiceaddress1_stringindexer_transform": 274, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 16, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20344799, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "LONGS DRUGS #09835", "practiceaddress1": "2750 WOODLAWN DR", "practiceaddress2": "UNIT B1", "practicecity": "HONOLULU", "practicestate": "HI", "practicezip9code": 968221841, "telephonenumber": -500052441, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 21, "longitude": -157, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 106, "practiceaddress1_stringindexer_transform": 196, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 37, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20344787, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09833", "practiceaddress1": "4242 S EL CAMINO REAL", "practiceaddress2": "UNIT B1", "practicecity": "SAN MATEO", "practicestate": "CA", "practicezip9code": 944035133, "telephonenumber": -2084199191, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 241, "practiceaddress1_stringindexer_transform": 241, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337383, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09735", "practiceaddress1": "727 S GLENDORA AVE", "practiceaddress2": "UNIT B1", "practicecity": "WEST COVINA", "practicestate": "CA", "practicezip9code": 917903707, "telephonenumber": 1968409988, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 130, "practiceaddress1_stringindexer_transform": 367, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20344913, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09802", "practiceaddress1": "2170 FREMONT ST", "practiceaddress2": "UNIT B1", "practicecity": "MONTEREY", "practicestate": "CA", "practicezip9code": 939405213, "telephonenumber": -276179457, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 80, "practiceaddress1_stringindexer_transform": 70, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20344919, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09163", "practiceaddress1": "291 N MCDOWELL BLVD", "practiceaddress2": "UNIT B1", "practicecity": "PETALUMA", "practicestate": "CA", "practicezip9code": 949542306, "telephonenumber": -1512145926, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 67, "practiceaddress1_stringindexer_transform": 1, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20344925, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09851", "practiceaddress1": "130 N GRAND AVE", "practiceaddress2": "UNIT B1", "practicecity": "GLENDORA", "practicestate": "CA", "practicezip9code": 917412434, "telephonenumber": 1974663089, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 285, "practiceaddress1_stringindexer_transform": 433, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20344997, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09632", "practiceaddress1": "691 3RD AVE", "practiceaddress2": "UNIT B1", "practicecity": "CHULA VISTA", "practicestate": "CA", "practicezip9code": 919105703, "telephonenumber": 1899296515, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -117, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 405, "practiceaddress1_stringindexer_transform": 253, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20337359, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09809", "practiceaddress1": "4959 MARCONI AVE", "practiceaddress2": "UNIT B1", "practicecity": "CARMICHAEL", "practicestate": "CA", "practicezip9code": 956084112, "telephonenumber": 574916552, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -121, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 81, "practiceaddress1_stringindexer_transform": 11, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 21}, {"provider_id": 20345051, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09623", "practiceaddress1": "649 W OLIVE AVE", "practiceaddress2": "UNIT B1", "practicecity": "MERCED", "practicestate": "CA", "practicezip9code": 953482424, "telephonenumber": 2097234303, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37, "longitude": -120, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 1, "practicename_stringindexer_transform": 115, "practiceaddress1_stringindexer_transform": 178, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 1, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20328803, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01921", "practiceaddress1": "1310 YORK RD", "practiceaddress2": "UNIT B1", "practicecity": "GETTYSBURG", "practicestate": "PA", "practicezip9code": 173258845, "telephonenumber": -1416561780, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -77, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 6, "practicename_stringindexer_transform": 217, "practiceaddress1_stringindexer_transform": 466, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20328881, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02755", "practiceaddress1": "4314 LOCUST ST", "practiceaddress2": "UNIT B1", "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191045232, "telephonenumber": -2141105203, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 6, "practicename_stringindexer_transform": 403, "practiceaddress1_stringindexer_transform": 125, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 299, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20328887, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02756", "practiceaddress1": "2507 W CHESTER PIKE", "practiceaddress2": "UNIT B1", "practicecity": "BROOMALL", "practicestate": "PA", "practicezip9code": 190082502, "telephonenumber": 1808288005, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 6, "practicename_stringindexer_transform": 267, "practiceaddress1_stringindexer_transform": 304, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20328893, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02782", "practiceaddress1": "1456 FERRY RD", "practiceaddress2": "UNIT B1", "practicecity": "DOYLESTOWN", "practicestate": "PA", "practicezip9code": 189012391, "telephonenumber": -2141564683, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 6, "practicename_stringindexer_transform": 297, "practiceaddress1_stringindexer_transform": 432, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20328899, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02783", "practiceaddress1": "518 PORT ROYAL AVE", "practiceaddress2": "UNIT B1", "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191282144, "telephonenumber": -2140130615, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 6, "practicename_stringindexer_transform": 415, "practiceaddress1_stringindexer_transform": 286, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 299, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20310869, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 10794", "practiceaddress1": "2438 32ND AVE W", "practiceaddress2": "UNIT B1", "practicecity": "SEATTLE", "practicestate": "WA", "practicezip9code": 981993202, "telephonenumber": 2062839131, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47, "longitude": -122, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 109, "practicename_stringindexer_transform": 326, "practiceaddress1_stringindexer_transform": 390, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 92, "practicestate_stringindexer_transform": 21, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20328779, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02784", "practiceaddress1": "857 W BALTIMORE PIKE", "practiceaddress2": "UNIT B1", "practicecity": "WEST GROVE", "practicestate": "PA", "practicezip9code": 193909189, "telephonenumber": 1813728205, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 6, "practicename_stringindexer_transform": 93, "practiceaddress1_stringindexer_transform": 323, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20328695, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01657", "practiceaddress1": "2080 S QUEEN ST", "practiceaddress2": "UNIT B1", "practicecity": "YORK", "practicestate": "PA", "practicezip9code": 174034829, "telephonenumber": -1411482959, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39, "longitude": -76, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 6, "practicename_stringindexer_transform": 293, "practiceaddress1_stringindexer_transform": 357, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20328773, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04773", "practiceaddress1": "2000 SWAMP PIKE", "practiceaddress2": "UNIT B1", "practicecity": "GILBERTSVILLE", "practicestate": "PA", "practicezip9code": 195259725, "telephonenumber": 1812087010, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40, "longitude": -75, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 6, "practicename_stringindexer_transform": 278, "practiceaddress1_stringindexer_transform": 341, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20328755, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05088", "practiceaddress1": "118 W MAIN ST", "practiceaddress2": "UNIT B1", "practicecity": "NORTH EAST", "practicestate": "PA", "practicezip9code": 164281132, "telephonenumber": -442674908, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42, "longitude": -79, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 6, "practicename_stringindexer_transform": 181, "practiceaddress1_stringindexer_transform": 189, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 6, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20339291, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00835", "practiceaddress1": "103 W EDINBURG AVE", "practiceaddress2": "UNIT B1", "practicecity": "ELSA", "practicestate": "TX", "practicezip9code": 785433006, "telephonenumber": 972691700, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 26, "longitude": -97, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 0, "practicename_stringindexer_transform": 71, "practiceaddress1_stringindexer_transform": 166, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 2, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20324585, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "GEORGIA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY #16537", "practiceaddress1": "1591 BRADLEY PARK DR", "practiceaddress2": "UNIT B1", "practicecity": "COLUMBUS", "practicestate": "GA", "practicezip9code": 319043071, "telephonenumber": -1526656391, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32, "longitude": -84, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 15, "practicename_stringindexer_transform": 430, "practiceaddress1_stringindexer_transform": 439, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 15, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20312585, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "PUERTO RICO CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 07969", "practiceaddress1": "191 CALLE GAUTIER BENITEZ", "practiceaddress2": "UNIT B1", "practicecity": "CAGUAS", "practicestate": "PR", "practicezip9code": 7255509, "telephonenumber": -712901511, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 18, "longitude": -66, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 115, "practicename_stringindexer_transform": 160, "practiceaddress1_stringindexer_transform": 303, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 29, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20309291, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "MARYLAND CVS PHARMACY LLC.", "practicename": "CVS PHARMACY # 03047", "practiceaddress1": "8601 MARTIN LUTHER KING JR HWY", "practiceaddress2": "UNIT B1", "practicecity": "LANHAM", "practicestate": "MD", "practicezip9code": 207061500, "telephonenumber": -1281739982, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -76, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 16, "practicename_stringindexer_transform": 315, "practiceaddress1_stringindexer_transform": 330, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 12, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20308487, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "MARYLAND CVS PHARMACY LLC.", "practicename": "CVS PHARMACY # 10606", "practiceaddress1": "7955 BAYSIDE RD", "practiceaddress2": "UNIT B1", "practicecity": "CHESAPEAKE BEACH", "practicestate": "MD", "practicezip9code": 207323112, "telephonenumber": -192395246, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38, "longitude": -76, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 16, "practicename_stringindexer_transform": 397, "practiceaddress1_stringindexer_transform": 227, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 12, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 3}, {"provider_id": 20325527, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "GEORGIA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY #07227", "practiceaddress1": "1420 HIGHWAY 76", "practiceaddress2": "UNIT B1", "practicecity": "CHATSWORTH", "practicestate": "GA", "practicezip9code": 307056392, "telephonenumber": -1522984074, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34, "longitude": -84, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 15, "practicename_stringindexer_transform": 22, "practiceaddress1_stringindexer_transform": 400, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 397, "practicestate_stringindexer_transform": 15, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}, {"provider_id": 20308205, "acceptsassignement": 1, "participationbegindate": 1672531200000.0, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08266", "practiceaddress1": "2585 LEON C SIMON DR", "practiceaddress2": "UNIT B1", "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701225721, "telephonenumber": 747904826, "specialitieslist": "Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30, "longitude": -90, "is_contracted_for_cba": 0, "participationbegindate_dayofmonth": 1, "participationbegindate_month": 1, "participationbegindate_year": 2023, "businessname_stringindexer_transform": 90, "practicename_stringindexer_transform": 257, "practiceaddress1_stringindexer_transform": 106, "practiceaddress2_stringindexer_transform": 0, "practicecity_stringindexer_transform": 344, "practicestate_stringindexer_transform": 26, "specialitieslist_stringindexer_transform": 0, "providertypelist_stringindexer_transform": 0, "supplieslist_stringindexer_transform": 1}], "FE": [{"transformationsData": [{"transformation_label": "novalue"}], "feature": "provider_id", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "21091081.02", "stddev": "2231189.01", "min": "20303219", "max": "34359440", "missing": "0"}, "updatedLabel": "provider_id"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "acceptsassignement", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.78", "stddev": "0.41", "min": "0", "max": "1", "missing": "0"}, "updatedLabel": "acceptsassignement"}, {"transformationsData": [{"feature_label": "participationbegindate", "transformation_label": "Extract Date"}], "feature": "participationbegindate", "type": "date", "selected": true, "replaceby": "random", "stats": {"count": "", "mean": "", "stddev": "", "min": "", "max": "", "missing": "0"}, "transformation": [{"transformation": "Extract Date", "selectedAsDefault": 1}], "generated": false, "updatedLabel": "participationbegindate"}, {"transformationsData": [{"feature_label": "businessname", "transformation_label": "String Indexer"}], "feature": "businessname", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "39 PHARMACY CORPORATION", "max": "YONKERS EXPRESS PHARMACY INC", "missing": "0", "distinct": "127"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "businessname"}, {"transformationsData": [{"feature_label": "practicename", "transformation_label": "String Indexer"}], "feature": "practicename", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "86 BOBO PHARMACY INC", "max": "WONDERFUL RX PHARMACY INC", "missing": "0", "distinct": "457"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicename"}, {"transformationsData": [{"feature_label": "practiceaddress1", "transformation_label": "String Indexer"}], "feature": "practiceaddress1", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "1 HAWLEY LN", "max": "W62N190 WASHINGTON AVE", "missing": "0", "distinct": "500"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress1"}, {"transformationsData": [{"feature_label": "practiceaddress2", "transformation_label": "String Indexer"}], "feature": "practiceaddress2", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "77", "mean": "", "stddev": "", "min": "ALWIFE PLAZA", "max": "UNIT B1", "missing": "423", "distinct": "63"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress2"}, {"transformationsData": [{"feature_label": "practicecity", "transformation_label": "String Indexer"}], "feature": "practicecity", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "ABBEVILLE", "max": "WOODBRIDGE", "missing": "0", "distinct": "397"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicecity"}, {"transformationsData": [{"feature_label": "practicestate", "transformation_label": "String Indexer"}], "feature": "practicestate", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "AK", "max": "WV", "missing": "0", "distinct": "38"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicestate"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "practicezip9code", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "420303669.23", "stddev": "287747118.78", "min": "705", "max": "999015900", "missing": "0"}, "updatedLabel": "practicezip9code"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "telephonenumber", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "6144013752076.46", "stddev": "136516631952037.42", "min": "2014881230", "max": "3052621292106456", "missing": "0"}, "updatedLabel": "telephonenumber"}, {"transformationsData": [{"feature_label": "specialitieslist", "transformation_label": "String Indexer"}], "feature": "specialitieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "494", "mean": "", "stddev": "", "min": "Certified Other|MSC With Respiratory Therapist|Pharmacy", "max": "Prosthetic Personnel", "missing": "6", "distinct": "15"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "specialitieslist"}, {"transformationsData": [{"feature_label": "providertypelist", "transformation_label": "String Indexer"}], "feature": "providertypelist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "23", "mean": "", "stddev": "", "min": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "max": "PHYSICIAN ASSISTANT", "missing": "498", "distinct": "1"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "providertypelist"}, {"transformationsData": [{"feature_label": "supplieslist", "transformation_label": "String Indexer"}], "feature": "supplieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "max": "Surgical Dressings", "missing": "0", "distinct": "93"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "supplieslist"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "latitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "38.25", "stddev": "5.86", "min": "18.13874", "max": "64.75669", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "latitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "longitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "-89.16", "stddev": "17.29", "min": "-157.8097", "max": "-66.03487", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "longitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "is_contracted_for_cba", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.0", "stddev": "0.0", "min": "0", "max": "0", "missing": "0"}, "updatedLabel": "is_contracted_for_cba"}, {"feature": "participationbegindate_dayofmonth", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "2.83", "stddev": "5.33", "min": "1", "max": "27", "missing": "0"}, "updatedLabel": "participationbegindate_da..."}, {"feature": "participationbegindate_month", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "2.75", "stddev": "1.93", "min": "1", "max": "7", "missing": "0"}, "updatedLabel": "participationbegindate_mo..."}, {"feature": "participationbegindate_year", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "2023.2", "stddev": "0.4", "min": "2023", "max": "2024", "missing": "0"}, "updatedLabel": "participationbegindate_ye..."}, {"feature": "businessname_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "126.48", "stddev": "7.69", "min": "6.0", "max": "127.0", "missing": "0"}, "updatedLabel": "businessname_stringindexe..."}, {"feature": "practicename_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "467.0", "stddev": "0.0", "min": "467.0", "max": "467.0", "missing": "0"}, "updatedLabel": "practicename_stringindexe..."}, {"feature": "practiceaddress1_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "249.5", "stddev": "144.48", "min": "0.0", "max": "499.0", "missing": "0"}, "updatedLabel": "practiceaddress1_stringin..."}, {"feature": "practiceaddress2_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "3.87", "stddev": "9.88", "min": "0.0", "max": "30.0", "missing": "0"}, "updatedLabel": "practiceaddress2_stringin..."}, {"feature": "practicecity_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "340.95", "stddev": "121.12", "min": "0.0", "max": "397.0", "missing": "0"}, "updatedLabel": "practicecity_stringindexe..."}, {"feature": "practicestate_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "4.69", "stddev": "6.69", "min": "0.0", "max": "37.0", "missing": "0"}, "updatedLabel": "practicestate_stringindex..."}, {"feature": "specialitieslist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "0.98", "stddev": "2.72", "min": "0.0", "max": "15.0", "missing": "0"}, "updatedLabel": "specialitieslist_stringin..."}, {"feature": "providertypelist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "0.0", "stddev": "0.0", "min": "0.0", "max": "0.0", "missing": "0"}, "updatedLabel": "providertypelist_stringin..."}, {"feature": "supplieslist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "16.88", "stddev": "24.05", "min": "1.0", "max": "56.0", "missing": "0"}, "updatedLabel": "supplieslist_stringindexe..."}], "samplecount": 500, "message": "Successfully executed", "status": 1, "userid": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "FEGraph": [{"values": {"label": ["20310995.0 - 21715591.1", "21715591.1 - 23120187.2", "23120187.2 - 24524783.3", "24524783.3 - 25929379.4", "25929379.4 - 27333975.5", "27333975.5 - 28738571.6", "28738571.6 - 30143167.7", "30143167.7 - 31547763.8", "31547763.8 - 32952359.9", "32952359.9 - 34356956"], "data": [495, 0, 0, 1, 1, 0, 0, 0, 0, 3]}, "label": "provider_id", "count": 10, "min": 20310995, "max": 34356956}, {"values": {"label": ["1", "0"], "data": [390, 110]}, "label": "acceptsassignement", "count": 2, "min": "0", "max": "1"}, {"values": {"label": ["2023-01-01 00:00:00", "2022-03-01 00:00:00", "2020-05-21 00:00:00", "2020-05-20 00:00:00", "2020-05-19 00:00:00", "2020-05-18 00:00:00", "2020-05-16 00:00:00", "2020-05-15 00:00:00", "2017-01-01 00:00:00", "2014-07-01 00:00:00", "2019-01-01 00:00:00", "2017-01-27 00:00:00", "2017-01-26 00:00:00", "2017-01-25 00:00:00", "2017-01-23 00:00:00", "2017-01-20 00:00:00", "2017-01-19 00:00:00", "2017-01-18 00:00:00", "2017-01-17 00:00:00", "2017-01-13 00:00:00", "2017-01-10 00:00:00", "2017-01-09 00:00:00", "2017-01-06 00:00:00", "2017-01-05 00:00:00", "2020-05-13 00:00:00", "2020-05-12 00:00:00", "2020-05-08 00:00:00", "2020-05-07 00:00:00", "2017-01-14 00:00:00", "2017-01-11 00:00:00", "2017-01-04 00:00:00", "2017-01-03 00:00:00", "2020-05-14 00:00:00", "2020-05-11 00:00:00"], "data": [152, 199, 1, 8, 3, 1, 1, 5, 18, 58, 9, 6, 1, 1, 2, 1, 1, 1, 1, 3, 1, 3, 4, 2, 1, 1, 2, 1, 1, 2, 1, 1, 3, 5]}, "label": "participationbegindate", "count": 34, "min": "", "max": ""}, {"values": {"label": ["RELIANT MEDICAL EQUIPMENT DISTRIBUTORS", "39 PHARMACY CORPORATION", "NV HEALTH, LLC", "MYRTLE RX PLUS INC", "LONE STAR PROSTHETICS, WICHITA FALLS, LLC", "S8 MEDICAL EQUIPMENT LLC", "QUICKRX LLC", "APPARO, INC.", "SDPM UNITED PHARMACY INC", "PROMEDICA MEDICAL SUPPLY INC", "ORTHO ELITE PERFORMANCE & RECOVERY PLLC", "WILLOW PHARMACY CORP", "HISPANOS PHARMACY INC", "HACKENSACK PHARMACY INC", "BRONX HEALTHPLUS RX INC", "FRESH POND PHARMACY INC", "SHIFA SPECIALTY INC", "NEB DOCTORS OF WESTERN PENNSYLVANIA LLC", "GOOD MERCY PHARMACY CORP", "PROSTHETIC AND ORTHOTIC ASSOCIATES OF SOUTH CAROLINA LLC", "MOBIUS MOBILITY, LLC", "COMFORT RX PHARMACY CORP", "SEARCY RX LLC", "OPTUM PHARMACY 705, LLC", "EMPIRE PHARMACY INC", "THRIVE SPECIALTY PHARMACY LLC", "FIT TO GO LLC", "JERICHO CHEMISTS INC", "PARKVIEW NOCO RX, LLC", "MAC RX OF MISSOURI LLC", "FIRSTCARE MEDICAL SUPPLY LLC", "JADD PHARMACY CORP", "SNEDS PEDORTHICS LLC", "PROSUM DME LLC", "S S HEALTHCARE INC", "ALLIANCE MEDICAL SUPPLY LLC", "OEI PROSTHETICS AND ORTHOTICS", "SINGH PHARMACY INC", "ROCHESTER HOME INFUSION INC", "RXMTS LLC", "SOUTHWEST FLORIDA EYE CARE, L.L.C.", "INFUSED THERAPIES LLC", "HEALARIAN LLC", "DIVINE MEDICAL SUPPLY AND EQUIPMENTS LLC", "PHOENIX MEDICAL EQUIPMENT, INC.", "HEAL MEDICAL SUPPLY LLC", "ST. RAPHAEL PHARMACY INC", "CHUBBUCK'S PHARMACY INC", "SEVENTEEN MEDICAL SUPPLY LLC", "WOOSTER PHARMACY LLC", "SHIV HARI RX INC", "MEDIX SUPPLIES INC", "MR PHARMACIST LLC", "BRISTOL CARE PHARMACY LLC", "VINITA FAMILY EYECARE, PLLC", "MS EYE CARE PA", "PICC LINES PLUS LLC", "BOSTON DME COMPANY LLC", "PEACH VALLEY PHARMACY LLC", "ROCKAWAY DRUGS RX INC", "C AND M HEALTH INC", "ILS HHA OF REGION 11 LLC", "POLARIS PHARMACY SERVICES OF VIRGINIA LLC", "STARLIGHT RX INC", "SHALOM RX INC", "ARKANSAS COMPRESSION SHOP LLC", "BARGAIN MEDICAL SUPPLY, INC", "MAASP  INC.", "DEVINES PHARMACY INC", "VIVITAL, INC.", "BILLINGS FAMILY EYECARE SHILOH PLLC", "STARLING PHARMACY II, INC.", "ASTORIA RX HOLDINGS INC", "DUFFY RX LLC", "FALCON MED EQPT LLC", "WB DRUG COMPANY INC", "THRIFTY DRUG STORES INC", "DOVE MEDICAL SUPPLY RETAIL LLC", "WENDY SOWELL GIBSON OD", "PREMIER KIDS CARE, INC.", "SAAD ENTERPRISES, INC.", "BOTICA PHARMACY CORP.", "DYNAMEDICS MEDICAL SOLUTIONS, INC.", "ROBERTS HOME MEDICAL LLC.", "YONKERS EXPRESS PHARMACY INC", "BLOOMING LIGHT RX INC", "SOUTH BROWARD HOSPITAL DISTRICT", "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "BALL GROUND PHARMACY LLC", "HOSPITAL PHARMACY INC", "CONCORD PHARMACY INC", "PHARMCAREOK OF TULSA, INC.", "OXYTECH OF NORTH CAROLINA, LLC", "J&G MEDICAL SUPPLIES", "ACCESS PT PENNSYLVANIA", "PHARMACY ON U LLC", "ADVANCED MEDICAL SUPPLY INC", "DIABETIC SOLUTIONS, INC.", "SIERRA HOME MEDICAL PRODUCTS, INC", "ADVANCED EYECARE, SC", "MED-SHOP OF HUGHES SPRINGS INC", "LIBERTY RX INC", "MEDI CITY PHARMACY INC", "U HEALTH PHARMACY LLC", "AB MEDICAL LLC", "CORONA PHARMACY RX INC", "STRENGTH GIVER PHARMACY LLC", "MEDICAL PHARMACY PA", "INFUSIONS SERVICES OF LOUISIANA LLC", "PINK PROMISES & DME LLC", "CHARITY COMFORT CARE MEDICAL SUPPLIES", "CPR DME LLC", "APEX RX INC", "ROYAL MEDICAL SUPPLY LLC", "SAINT MARY AND JESSIE LLC", "BUCKNER NEIGHBORHOOD PHARMACY INC", "PHARMSCRIPT OF FLORIDA LLC", "CVS PHARMACY INC", "HIGHLAND PARK CVS LLC", "LONGS DRUG STORES CALIFORNIA LLC", "HOOK- SUPERX, L.L.C..", "PENNSYLVANIA CVS PHARMACY LLC", "WASHINGTON CVS PHARMACY LLC", "GEORGIA CVS PHARMACY, L.L.C.", "PUERTO RICO CVS PHARMACY LLC", "MARYLAND CVS PHARMACY LLC.", "LOUISIANA CVS PHARMACY LLC"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 32, 1, 1, 3, 3, 1, 1, 10, 1, 1, 1, 14, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 203, 34, 60, 3, 9, 1, 2, 1, 2, 1]}, "label": "businessname", "count": 127, "min": "39 PHARMACY CORPORATION", "max": "YONKERS EXPRESS PHARMACY INC"}, {"values": {"label": ["RELIANT MEDICAL EQUIPMENT DIST", "39 PHARMACY", "NV HEALTH, LLC", "MYRTLE RX PLUS INC", "LONE STAR PROSTHETICS, WICHITA FALL", "S8 MEDICAL EQUIPMENT LLC", "BREWSTER PHARMACY", "EVERCARE MEDICAL SOLUTIONS INC", "SDPM UNITED PHARMACY INC", "PROMEDICA MEDICAL SUPPLY INC", "ORTHO ELITE PERFORMANCE & RECOVERY", "WILLOW PHARMACY CORP", "HISPANOS PHARMACY INC", "HACKENSACK PHARMACY", "BRONX HEALTHPLUS RX INC", "FRESH POND PHARMACY INC", "SHIFA SPECIALTY INC.", "NEB DOCTORS OF WESTERN PENNSYLVANIA", "GOOD MERCY PHARMACY CORP", "PROSTHETIC AND ORTHOTIC ASSOC OF SC", "MOBIUS MOBILITY LLC", "COMFORT RX PHARMACY CORP", "MEDICAL CENTER PHARMACY", "OPTUM PHARMACY 705, LLC", "NEW ROCHELLE PHARMACY", "THRIVE SPECIALTY PHARMACY LLC", "FIT TO GO LLC", "JERICHO CHEMISTS INC.", "PARKVIEW NOCO RX, LLC", "MAC RX OF MISSOURI, LLC", "FIRSTCARE MEDICAL SUPPLY LLC", "ROCK HILL PHARMACY", "SNEDS PEDORTHIC LLC", "PROSUM DME", "S S HEALTHCARE INC", "ALLIANCE MEDICAL SUPPLY LLC", "HQ", "SINGH PHARMACY INC.", "ROCHESTER HOME INFUSION", "RXMTS", "SOUTHWEST FLORIDA EYE CARE", "SOUTHWEST FLORIDA EYE CARE LLC", "VITAL CARE OF HENDERSON", "HEALARIAN PHARMACY", "DIVINE MEDICAL SUPPLY AND EQUIPMENT", "PHOENIX MEDICAL EQUIPMENT INC", "HEAL MEDICAL SUPPLY LLC", "ST. RAPHAEL CHEMISTS", "CHUBBUCK'S PHARMACY INC", "SEVENTEEN MEDICAL SUPPLY LLC", "WOOSTER PHARMACY LLC", "SHIV HARI RX INC", "MEDIX SUPPLIES INC", "MR PHARMACIST LLC", "BRISTOL CARE PHARMACY LLC", "VINITA FAMILY EYECARE, PLLC", "MS EYE CARE PA", "MISSISSIPPI EYE CARE CARTHAGE", "PICC LINES PLUS LLC", "LOUISVILLE EYE CARE", "BOSTON DME COMPANY LLC", "U SAVE IT PHARMACY PEACH VALLEY", "ROCKAWAY DRUGS RX INC", "C AND M HEALTH INC", "ILS HHA OF REGION 11 LLC", "POLARIS PHARMACY SERVICES OF VIRGIN", "STARLIGHT RX INC", "SHALOM PHARMACY", "ARKANSAS COMPRESSION SHOP LLC", "BARGAIN MEDICAL SUPPLY, INC", "MAA PHARMACY", "DEVINE'S PHARMACY", "VIVITAL, INC.", "BILLINGS FAMILY EYECARE SHILOH", "STARLING PHARMACY II, INC.", "ASTORIA RX HOLDINGS INC", "DUFFY RX LLC", "FALCON MED EQPT LLC", "WB DRUG COMPANY INC", "THRIFTY WHITE DRUG #756", "THRIFTY WHITE PHARMACY #768", "THRIFTY WHITE PHARMACY #742", "THRIFTY WHITE DRUG #762", "THRIFTY WHITE DRUG #760", "THRIFTY WHITE PHARMACY 767", "THRIFTY WHITE DRUG #758", "THRIFTY WHITE DRUG #736", "THRIFTY WHITE PHARMACY # 769", "THRIFTY WHITE PHARMACY #754", "THRIFTY WHITE PHARMACY #752", "THRIFTY WHITE DRUG #750", "THRIFTY WHITE DRUG #748", "THRIFTY WHITE PHARMACY #728", "THRIFTY WHITE DRUG #755", "THRIFTY WHITE PHARMACY #772", "THRIFTY WHITE PHARMACY #770", "THRIFTY WHITE PHARMACY #774", "THRIFTY WHITE PHARMACY #779", "DOVE MEDICAL SUPPLY RETAIL LLC", "THRIFTY WHITE PHARMACY #741", "DR. WENDY SOWELL GIBSON", "PREMIER KIDS CARE, INC.", "SAAD MEDICAL EQUIPMENT - SPANISH FO", "SAAD MEDICAL EQUIPMENT - UNIVERSITY", "BOTICA PHARMACY CORP.", "SAAD MEDICAL EQUIPMENT -D'IBERVILLE", "THRIFTY WHITE DRUG 729", "THRIFTY WHITE PHARMACY #727", "DYNAMEDICS MEDICAL SOLUTIONS INC", "ROBERTS HOME MEDICAL LLC", "YONKERS EXPRESS PHARMACY INC", "BLOOMING LIGHT RX INC", "THRIFTY WHITE PHARMACY #735", "MEMORIAL REGIONAL HOSPITAL SOUTH PH", "HEALTHDIRECT INSTITUTIONAL PHARMACY", "THRIFTY WHITE DRUG #746", "THRIFTY WHITE PHARMACY #738", "BALL GROUND PHARMACY LLC", "HOSPITAL PHARMACY WEST", "HOSPITAL PHARMACY INC", "PREMIER KIDS CARE", "WEST CONCORD PHARMACY", "PHARMCAREOK OF TULSA INC", "THRIFTY WHITE PHARMACY #740", "THRIFTY WHITE PHARMACY #776", "THRIFTY WHITE PHARMACY #778", "THRIFTY WHITE PHARMACY #734", "ROTECH", "THRIFTY WHITE DRUG #759", "J&G MEDICAL SUPPLIES", "ACCESS PT PENNSYLVANIA", "PHARMACY ON U LLC", "ADVANCED MEDICAL SUPPLY INC", "DIABETIC SOLUTIONS INC", "THC OF NEVADA", "ADVANCED EYECARE", "THE MED-SHOP PHARMACY", "LIBERTY RX INC", "THRIFTY WHITE PHARMACY #775", "THRIFTY WHITE PHARMACY #781", "MEDI CITY PHARMACY INC", "U HEALTH PHARMACY LLC", "VALLEY VIEW", "CORONA PHARMACY RX INC.", "THE MEDICINE SHOPPE #2193", "MEDICAL PHARMACY PA", "VITAL CARE OF LAFAYETTE", "PINK PROMISES & DME LLC", "CHARITY COMFORT CARE MEDICAL SUPPLY", "CPR DME, LLC", "REMEDY PHARMACY", "ROYAL MEDICAL SUPPLY", "SAINT MARY AND JESSIE LLC", "BUCKNER NEIGHBORHOOD PHARMACY INC.", "PHARMSCRIPT OF FLORIDA LLC", "CVS PHARMACY #01254", "CVS PHARMACY #10449", "CVS PHARMACY #10174", "CVS PHARMACY #10487", "CVS PHARMACY #10414", "CVS PHARMACY #10521", "CVS PHARMACY #10486", "CVS PHARMACY #10428", "CVS PHARMACY #10446", "CVS PHARMACY #10265", "CVS PHARMACY #10544", "CVS PHARMACY #10350", "CVS PHARMACY #10215", "CVS PHARMACY #00496", "CVS PHARMACY #10540", "CVS PHARMACY # 05465", "CVS PHARMACY #04879", "CVS PHARMACY #01020", "CVS PHARMACY #04599", "CVS PHARMACY # 02282", "CVS PHARMACY # 00861", "CVS PHARMACY # 01225", "CVS PHARMACY #00860", "CVS PHARMACY # 00844", "CVS PHARMACY # 00810", "CVS PHARMACY # 00769", "CVS PHARMACY INC", "CVS PHARMACY # 01871", "CVS PHARMACY # 01002", "CVS PHARMACY # 01870", "CVS PHARMACY # 01247", "CVS PHARMACY # 01143", "CVS PHARMACY # 01085", "CVS PHARMACY # 01121", "CVS PHARMACY # 08319", "CVS PHARMACY # 04471", "CVS PHARMACY # 00148", "CVS PHARMACY # 00130", "CVS PHARMACY # 00119", "CVS PHARMACY # 01869", "CVS PHARMACY #01021", "CVS PHARMACY # 01041", "CVS PHARMACY #16419", "CVS PHARMACY # 16205", "CVS PHARMACY # 01111", "CVS PHARMACY #01264", "CVS PHARMACY #00915", "CVS PHARMACY #01874", "CVS PHARMACY #02325", "CVS PHARMACY #00995", "CVS PHARMACY #01853", "CVS PHARMACY #10782", "CVS PHARMACY #01049", "CVS PHARMACY #01885", "CVS PHARMACY #01862", "CVS PHARMACY # 05872", "CVS PHARMACY #00983", "CVS PHARMACY #01368", "CVS PHARMACY# 05407", "CVS PHARMACY #07607", "CVS PHARMACY #00307", "CVS PHARMACY #00117", "CVS PHARMACY #01886", "CVS PHARMACY #02283", "CVS PHAMRACY #05402", "CVS PHARMACY #01068", "CVS PHARMACY #00946", "CVS PHARMACY #01010", "CVS PHARMACY #01234", "CVS PHARMACY #00704", "CVS PHARMACY #00636", "CVS PHARMACY # 00318", "CVS PHARMACY #01238", "CVS PHARMACY #01130", "CVS PHARMACY #01872", "CVS PHARMACY #05874", "CVS PHARMACY #02254", "CVS PHARMACY #01850", "CVS PHARMACY #01094", "CVS PHARMACY # 05913", "CVS PHARMACY # 07170", "CVS PHARMACY #10324", "CVS PHARMACY #01859", "CVS PHARMACY # 01873", "CVS PHARMACY # 01875", "CVS PHARMACY #05002", "CVS PHARMACY #10665", "CVS PHARMACY 17604", "CVS PHARMACY #10601", "CVS PHARMACY #10637", "CVS PHARMACY #17335", "CVS PHARMACY #16009", "CVS PHARMACY #10906", "CVS PHARMACY #16013", "CVS PHARMACY #16895", "CVS PHARMACY #16024", "CVS PHARMACY #10758", "CVS PHARMACY #10603", "CVS PHARMACY #17276", "CVS PHARMACY #17603", "CVS PHARMACY #16074", "CVS PHARMACY #17046", "CVS PHARMACY #16081", "CVS PHARMACY #16831", "CVS PHARMACY #16033", "CVS PHARMACY #10139", "CVS PHARMACY #10598", "CVS PHARMACY #16855", "CVS PHARMACY #10752", "CVS PHARMACY #10635", "CVS PHARMACY #10775", "CVS PHARMACY #10595", "CVS PHARMACY #10580", "CVS PHARMACY #10638", "CVS PHARMACY #10671", "CVS PHARMACY #10576", "CVS PHARMACY # 05987", "CVS PHARMACY # 05822", "CVS PHARMACY # 05829", "CVS PHARMACY # 05836", "CVS PHARMACY # 02903", "CVS PHARMACY # 02935", "CVS PHAMRACY # 02936", "CVS PHARMACY # 02942", "CVS PHARMACY # 02981", "CVS PHARMACY #02844", "CVS PHARMASCY # 05797", "CVS PHARMACY # 02692", "CVS PHARMACY # 09086", "CVS PHARMACY #05619", "CVS PHARMACY 05482", "CVS PHARMACY # 02827", "CVS PHARMACY # 06935", "CVS PHARMACY #08910", "CVS PHARMACY #04396", "CVS PHARMACY 01768", "CVS PHARMACY #00513", "CVS PHARMACY #01900", "CVS PHARMACY #00488", "CVS PHARMACY #00365", "CVS PHARMACY #00220", "CVS PHARMACY #01034", "CVS PHARMACY # 01095", "CVS PHARMACY # 02878", "CVS PHARMACY #16935", "CVS PHARMACY #02600", "CVS PHARMACY #01248", "HIGHLAND PARK CVS LLC", "CVS PHARMACY #07020", "CVS PHARMACY # 07166", "CVS PHARMACY #04581", "CVS PHARMACY #10664", "CVS PHARMACY #10673", "CVS PHARMACY #10691", "CVS PHARMACY #10818", "CVS PHARMACY #10602", "CVS PHARMACY #10667", "CVS PHARMACY #10880", "CVS PHARMACY #01996", "CVS PHARMACY #10579", "CVS PHARMACY #10634", "CVS PHARMACY #10944", "CVS PHARMACY #10670", "CVS PHARMACY #07970", "CVS PHARMACY #06748", "CVS PHARMACY # 06937", "CVS PHARMACY 07017", "CVS PHARMACY # 07142", "CVS PHARMACY #01184", "CVS PHARMACY #00929", "CVS PHARMACY #01024", "CVS PHARMACY #00272", "CVS PHARMACY #01867", "CVS PHARMACY #01868", "CVS PHARMACY #01955", "CVS PHARMACY #02054", "CVS PHARMACY #02161", "CVS PHARMACY #02200", "CVS PHARMACY #00062", "CVS PHARMACY #00137", "CVS PHARMACY #00260", "CVS PHARMACY #00335", "CVS PHARMACY #01861", "CVS PHARMACY #00373", "CVS PHARMACY #00394", "CVS PHARMACY #00517", "CVS PHARMACY #02206", "CVS PHARMACY # 07232", "CVS PHARMACY #06505", "CVS PHARMACY #02959", "CVS PHARMACY #01022", "CVS PHARMACY # 01876", "CVS PHARMACY #01865", "CVS PHARMACY #07222", "CVS PHARMACY #01179", "CVS PHARMACY #09320", "CVS PHARMACY #07962", "CVS PHARMACY # 06933", "CVS PHARMACY #09099", "CVS PHARMACY #09130", "CVS PHARMACY #09142", "CVS PHARMACY # 09147", "CVS PHARMACY #09896", "CVS PHARMACY #09135", "CVS PHARMACY #09929", "LONGS DRUG STORES CALIFORNIA LLC", "CVS PHARMACY #09922", "CVS PHARMACY #09921", "CVS PHARMACY #09920", "CVS PHARMACY #09909", "CVS PHARMACY #09917", "CVS PHARMACY #09919", "CVS PHARMACY #09801", "CVS PHARMACY #09146", "CVS PHARMACY #09800", "CVS PHARMACY #09128", "LONGS DRUG STORE #09815", "CVS PHARMACY #09818", "CVS PHARMACY #09819", "CVS PHARMACY #09208", "CVS PHARMACY #09296", "CVS PHARMACY #05421", "CVS PHARMACY #08734", "CVS PHARMACY #07553", "CVS PHARMACY #09167", "CVS PHARMACY #09149", "CVS PHARMACY # 09162", "CVS PHARMACY 09150", "CVS PHARMACY 09152", "CVS PHARMACY 09153", "CVS PHARMACY 09155", "CVS PHARMACY #09154", "CVS PHARMACY # 09156", "CVS PHARMACY #09845", "CVS PHARMACY #09158", "CVS PHARMACY 09161", "CVS PHARMACY #09821", "CVS PHARMACY 09282", "CVS PHARMACY #09796", "CVS PHARMACY #09783", "CVS PHARMACY #09752", "CVS PHARMACY #09834", "CVS PHARMACY #09872", "CVS PHARMACY #09219", "CVS PHARMACY #09159", "CVS PHARMACY #09822", "CVS PHARMACY #10886", "CVS PHARMACY #10750", "CVS PHARMACY #10681", "CVS PHARMACY #10177", "CVS PHARMACY #05493", "CVS PHARMACY #00046", "CVS PHARMACY #01023", "CVS PHARMACY #01265", "CVS PHARMACY #01199", "CVS PHARMACY #00055", "CVS PHARMACY #00107", "CVS PHARMACY #00714", "CVS PHARMACY #00736", "CVS PHARMACY# 08441", "CVS PHARMACY #02201", "CVS PHARMACY # 01009", "CVS PHARMACY#01803", "CVS PHARMACY #01012", "CVS #05494", "CVS PHARMACY #04820", "CVS PHARMACY #04880", "CVS PHARMACY # 07319", "CVS PHARMACY# 01878", "CVS PHARMACY #01001", "CVS PHARMACY #10581", "CVS PHARMACY #10535", "CVS PHARMACY #05382", "CVS PHARMACY", "CVS PHARMACY #00131", "CVS PHARMACY #01531", "CVS PHARMACY #01845", "CVS PHARMACY #00604", "CVS PHARMACY #00632", "CVS PHARMACY #00654", "CVS PHARMACY #00674", "CVS PHARMACY #07242", "CVS PHARMACY # 09844", "CVS PHARMACY #09198", "HOOK-SUPERX LLC", "HOOK- SUPERX, L.L.C..", "LONGS DRUGS #09835", "CVS PHARMACY #09833", "CVS PHARMACY #09735", "CVS PHARMACY #09802", "CVS PHARMACY #09163", "CVS PHARMACY #09851", "CVS PHARMACY #09632", "CVS PHARMACY #09809", "CVS PHARMACY #09623", "CVS PHARMACY #01921", "CVS PHARMACY #02755", "CVS PHARMACY #02756", "CVS PHARMACY #02782", "CVS PHARMACY #02783", "CVS PHARMACY # 10794", "CVS PHARMACY #02784", "CVS PHARMACY #01657", "CVS PHARMACY #04773", "CVS PHARMACY # 05088", "CVS PHARMACY #00835", "CVS PHARMACY #16537", "CVS PHARMACY # 07969", "CVS PHARMACY # 03047", "CVS PHARMACY # 10606", "CVS PHARMACY #07227", "CVS PHARMACY #08266"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practicename", "count": 467, "min": "86 BOBO PHARMACY INC", "max": "WONDERFUL RX PHARMACY INC"}, {"values": {"label": ["511 MONROE TPKE", "1239 E PUTNAM AVE", "3514 MAIN ST", "3141 WILSON BLVD", "1240 FARMINGTON AVE", "219 BROAD ST", "358 W MAIN ST", "777 MAIN ST", "20 BANK ST", "94 PARK ST", "229 HOPE ST", "734 BRIDGEPORT AVE", "1341 LONG STREET", "6400 LANSDOWNE CENTER", "714 HOPMEADOW ST", "1200 MAIN ST", "632 MIDDLE TPKE", "311 MAIN ST", "26 DAVIS ST", "22 WINDSOR AVE", "1055 FARMINGTON AVE", "526 MERIDEN RD", "1968 BLACK ROCK TPKE", "6 QUEEN ST", "47 HAZARD AVE", "844 JONES HILL RD", "2045 DIXWELL AVE", "26 WATERBURY RD", "1425 BARNUM AVE", "2000 N MAIN ST", "581 HIGHLAND AVE", "323 CROMWELL AVE", "35 PADANARAM RD", "1 HAWLEY LN", "225 SOUND BEACH AVE", "690 WETHERSFIELD AVE", "153 BROAD ST", "3440 WILKINSON BLVD", "2981 S. MILITARY HWY", "99 GREENWICH AVE", "110 MAIN STREET", "163 MOUNTAIN RD", "25 BROADWAY AVE", "279 BOSTON POST RD", "479 BLUE HILLS AVE", "964 POST RD", "106 BOSTON POST RD", "191 W MAIN ST", "900 N 6TH STREET", "300 E 8TH ST", "3222 S MAIN ST", "2703 ROUTE 130", "2025 FIRST AVENUE SE", "5046 S SHERIDAN RD", "4016 S STATE HIGHWAY 97", "591 S MILL ST", "27 S COAST HWY", "5518 MAGAZINE ST", "124 W WASHINGTON AVE", "701 W GROVE ST", "915 HILL ST", "220 N ALEXANDER AVE", "5905 DOLLARWAY RD", "2611 E OAKLAND AVE", "602 HIGHWAY 16 E", "12352 FM 1957", "101 N BUSINESS 60", "214 S MAIN ST", "304 E MAIN ST", "6 E SPRINGFIELD RD", "1219 E BUSTAMANTE ST", "2321 7TH AVE", "10601 S MAY AVE", "5711 ALTAMA AVE", "23122 SAINT FRANCIS BLVD", "15245 BLUEBIRD ST NW", "530 3RD ST NW", "100 ASMA BLVD", "2621 GREENHAVEN RD", "820 BAY AVE", "11983 TAMIAMI TRL N", "102 PRINCE ROYAL DR", "433 W ALLEN AVE", "151 GUY PARK AVE", "11001 ROOSEVELT BLVD N", "516 BECKLEY CROSSING SHPG CTR", "810 SE WASHINGTON ST", "81 NORTH ST", "60 MIDDLE ST", "3710 MAIN ST", "40 EAST ST", "1875 BOSTON AVE", "20 BURNSIDE AVE", "45 S MAIN ST", "241 MIDDLE TPKE W", "15 CHESTERFIELD RD", "57 PROVIDENCE PIKE", "11 FOREST ST", "66 HIGH RIDGE RD", "903 BENHAM ST", "2251 COMMERCE BLVD", "1142 N DESLOGE DR", "2401 N CENTRAL AVE", "PR #14 KM 51.5", "17703 VIRGINIA AVE", "24 SCHOOL ST.", "605 N MAIN ST", "6068 S 1ST ST", "3303 W 26TH ST STE 101", "11500 W BROAD ST", "5580 GEORGETOWN RD", "13723 N LITCHFIELD RD", "871 W OAKLAND PARK BLVD", "11 ASHFORD AVE", "6505 E 71ST ST", "950 E TAFT AVE", "1357 VETERANS MEMORIAL BLVD", "901 SW STATE ROUTE 150", "4500 OLD PASS RD", "11085 CATHELL RD", "411 KING ST", "3375 RINCONADA BLVD", "58 PENNSYLVANIA AVE", "905 S MAIN ST", "661 MAIN ST", "540 W MAIN ST", "369 MAIN ST", "330 GRASMERE AVE", "37 W MAIN ST", "1657 ROUTE 12", "111 ALBANY TPKE", "150 WASHINGTON STREET", "965 WHITE PLAINS RD", "281 CONNECTICUT AVE", "710 FAYETTEVILLE ST", "14095 RICHMOND HWY", "3140 HWY 280", "206 US HIGHWAY 117 S", "3555 COLORADO BLVD", "1812 HOLLOWAY STREET", "407 W MAIN STREET", "1124 PATTON AVE", "454 S MAIN ST", "140 NC 102 W", "28895 W IL RTE 120", "101 E ATKINS ST", "244 E 161ST ST", "4021 CROSS TIMBERS ROAD", "1645 CRANIUM DR", "1606 HIGHLAND COLONY PKWY", "1921 S 77 SUNSHINE STRIP", "17970 N TAMIAMI TRL", "40 FLOWING SPRINGS WAY", "2590 N TEXAS ST", "1086 JEFF RD NW", "81 US HIGHWAY 9", "3800 W MADISON ST STE 101", "7403 ALOMA AVE", "2719 GRAND AVE", "4720 S KIRKMAN RD", "4720 N MARINE DR", "4710 S WESTERN AVE", "1800 W INDIANTOWN RD", "12405 NE 85TH ST", "3601 W WILLIAM CANNON DR", "3200 E BAY DR", "19710 HOLZWARTH RD", "19302 KUYKENDAHL RD", "128 E BRANDON BLVD", "4320 26TH ST W", "6003 14TH ST W", "11000 VENTURA BLVD", "9307 N LAMAR BLVD", "305 N BREED ST", "1634 S FEDERAL HWY", "9865 GLADES RD", "3200 S FEDERAL HWY", "1851 CLINT MOORE RD", "4218 LINDELL BLVD", "1515 N ALEXANDER DR", "355 CAMPBELL AVE", "720 BRANCHVILLE RD", "891N COLONY RD", "8 ROYCE CIR", "162 WASHINGTON AVE", "644 W PUTNAM AVE", "24 PERSHING DR", "14 CANDLEWOOD LAKE RD", "1181 MAIN ST", "6 WILLARD RD", "146 SOUTH ST", "7 DURANT AVE", "7950 FAYETTEVILLE RD", "283 W IL ROUTE 173", "301 UNIVERSITY AVE", "3801 BISCAYNE BLVD", "101 N TENNESSEE STREET", "3 PLAISTOW RD", "8815 STAGECOACH RD", "1601 MAIN ST", "4003 W VERNON AVE", "4030 ANNAS RETREAT", "125 MORRIS AVE", "3501 N HALSTED ST", "302 ROUTE 25A", "5555W 79TH ST", "5496 UNIVERSITY PKWY", "3501 UNIQUE CIRCLE", "12020 CULEBRA RD", "4353 LAKE OTIS PKWY", "1801 W 11TH ST", "900 MERIDIAN E", "1455 NE DIVISION ST", "1302 E 38TH ST", "22 DEPOT HILL RD", "969 HIGH RIDGE RD", "10 LATHROP RD", "17 W MAIN ST", "1 MIFFLIN ST", "200 BUTLER CMNS", "467 MAIN ST", "341 COTTAGE GROVE RD", "372 W MAIN ST", "1044 BOULEVARD", "525 BUCKLAND RD", "656 NEW HAVEN AVE", "5550 FM 423", "401 S ROOSEVELT DR", "599 W 4TH ST", "1449 N ARIZONA BLVD", "6519 MAIN ST", "1125 2ND ST", "831 KUHIO HWY", "1810 S IRISH RD", "1515 W PARADISE DR", "10562 BELLEVILLE RD", "1445 E CENTRAL CT", "822 CITY AVE S", "505 S. PINE RIDGE AVE", "804 PIKE ST", "100 SARA WAY", "1501 WAGNER AVE", "4141 PEARL RD", "593 NEWFIELD AVE", "326 MAIN ST", "3151 UNIVERSITY AVE", "9256 SLAUSON AVE", "1830 N BROADWAY", "74955 US HIGHWAY 111", "25829 NARBONNE AVE", "1200 N SEPULVEDA BLVD", "9100 ROSEDALE HWY", "43525 10TH ST W", "1790 AIRLINE HWY", "3033 VINTAGE BLVD", "2417 TONGASS AVE", "3500 BRUMBACK BLVD", "340 WESTWIND DR", "131 EUREKA TWNCTR DR", "1309 NW 12TH AVE", "354 PRIVATE DRIVE 288", "825 E GREEN BAY AVE", "410 GRAND VALLEY BLVD", "100 SYCAMORE ESTATES DR", "2021 E INDEPENDENCE ST", "180 RIVER RD", "1733 2ND ST S", "205 HOUSE CARLSON DR", "4000 S BOLGER RD", "1903 COBBS FORD RD", "1420 HIGHWAY 231 S", "805 US HIGHWAY 27 S", "6812 N LAMAR BLVD", "804 W MARKET ST", "324 ROOSEVELT RD", "875 E NAPIER AVE", "4995 E US ROUTE 36", "1311 N STATE ROUTE 48", "1150 E SIBLEY BLVD", "1835 SAND LAKE RD", "1403 WAUKEGAN RD", "6297 PGA BLVD", "6200 W WILLIAM CANNON DR", "1213 PALM BAY RD", "175 MALABAR RD NW", "901 N ANKENY BLVD", "5896 CORTEZ RD W", "2501 S LAMAR BLVD", "6230 W. IRLO BRONSON MEMORIAL HWY", "5600 S 1ST ST", "5895 W PEORIA AVE", "900 SHELBY RD", "2310 MCCAUSLAND AVE", "3300 BROWN RD", "420 N FRAZIER ST", "7731 E NORTHERN LIGHTS BLVD", "301 N SANTA CLAUS LN", "MILE 1907 SEWARD HWY", "4000 W DIMOND BLVD", "500 RIVER ST", "17 US HIGHWAY 206", "11352 DORSETT RD", "169 TERRACE ST", "596 PROVIDENCE HWY", "1505 MERMAID AVE", "115 JOHNSON AVE N", "2249 86TH ST", "846 FORT DALE RD", "2846 E 101ST ST", "130 3RD ST NE", "3105 S MERIDIAN AVE", "3310 LAMAR AVE", "18049 MAGNOLIA ST", "2600 HWY 138", "611 STATE HIGHWAY 54", "1133 N MAIN ST", "38020 US HIGHWAY 18", "3915 GATEWAY DR", "920 US HWY 12", "W190 N9855 APPLETON AVE", "800 FOXCROFT AVE", "3333 US ROUTE 60", "254 CASSIDY BLVD", "4000 RED BANK RD", "18401 BUSINESS 13", "8118 PERRY HILLS CT", "2136 CAMPBELLSVILLE RD", "650 S TRUMAN BLVD", "3240 S WESTERN AVE", "414 KINGS HIGHWAY EAST", "5935 W ADDISON ST", "3915 S NOLAND RD", "600 W KARSCH BLVD", "1200 S MAIN ST", "10555 W OVERLAND RD", "955 N STATE ST", "2329 W CLAY ST", "13242 WICKER AVE", "5345 N IH 35", "4822 CATON FARM RD", "33975 DATE PALM DR", "11701 DETROIT AVE", "76 HEIGHTS RD", "W62N190 WASHINGTON AVE", "15738 W CAPITOL DR", "W156N11261 PILGRIM RD", "2204 NEVA RD", "603 W PINE ST", "9449 S HOWELL AVE", "2677 S 108TH ST", "S79W18885 JANESVILLE RD", "2420 E COLONIAL DR", "700 W COLLEGE AVE", "12101 SHELBYVILLE RD", "7914 FEGENBUSH LN", "8802 WEST COLONIAL DR", "12295 BISCAYNE BLVD", "8000 LAKE UNDERHILL RD", "20020 CORTEZ BLVD", "9320 LACKLAND RD", "8790 W MCNAB RD", "6401 W COMMERCIAL BLVD", "8800 W 95TH ST", "1723 E YOUNG CIR", "4200 WINNETKA AVE N", "4950 COUNTY RD 101", "655 NICOLLET MALL", "5428 LYNDALE AVE S", "780 E 9TH ST", "1600 N NOVA RD", "3705 HOLLYWOOD BLVD", "2280 N LAS VEGAS BLVD", "3325 N MAIN ST", "815 SUMMIT ST", "2311 OGDEN AVE", "23684 STRICKLAND DR", "200 MARQUIS PKWY", "4060 CAMPBELL AVE", "2601 RICHMOND HWY", "3336 WILSON BLVD", "2035 4TH AVE", "115 N 19TH AVE", "1902 BROOKS ST", "2402 GRAND AVE", "2001 10TH AVE S", "10100 BROOK RD", "1275 HARRISON AVE", "1300 E PARK AVE", "1311 GRAND AVE", "425 MAIN ST", "307 SE 4TH ST", "617 CENTRAL AVE", "3095 N MONTANA AVE", "2601 CENTRAL AVE", "1020 SENECA RD", "6010 PLANK RD", "603 N MONTANA AVE", "681 S OHIO ST", "1060 WOODS MILL PLZ", "452 WYTHE CREEK RD", "1788 N PIERCE ST", "3401 CHARLES STREET", "4310 FORTUNA CENTER PLZ", "1245 N MILITARY HWY", "15341 MONTANUS DR", "191 MARKET ST", "721 SOUTHPARK BLVD", "155 HOLT GARRISON PKWY", "2530 WEIR RD", "1316 GREENBRIER PKWY", "25 S GATEWAY DR", "3424 MORMON COULEE RD", "1250 WATERS PLACE", "136 JESSICA LN", "6238 HADLEY ST", "5722 GATEWOOD AVE", "7922 ROSECRANS AVE", "821 PROSPECT AVE", "940A SOUTHERN BLVD", "111 E CARSON ST", "4566 E FLORENCE AVE", "111 S 3RD ST", "1501 23RD AVE", "1075 W FM 3040", "13308 MERIDIAN E", "5137 E BASELINE RD", "3201 W GORE BLVD", "8440 E MCDONALD DR", "2611 W PARK ROW", "1222 E WOODLAND AVE", "301 S MAIN ST", "233 CARMICHAEL WAY", "12130 JEFFERSON AVE", "1700 SEMINOLE TRL", "17307 HULL STREET RD", "709 E MAIN ST", "12455 W BROAD ST", "2775 GODWIN BLVD", "2441 EISENHOWER AVE", "2704 OAKLAWN BLVD", "7235 BELL CREEK RD", "3149 E HARRY ST", "2440 N LEBANON ST", "1180 W 19TH ST", "8301 N CHURCH RD", "4201 N BELT HWY", "1212 S MADISON ST", "2100 N MAIN AVE", "885 E HIGHWAY 60", "11900 SAINT CHARLES ROCK RD", "2395 MAIN ST", "11601 E US 40 HWY", "2401 US HWY 14 EAST", "4024 ELKHART RD", "3270 TELEGRAPH RD", "16205 MILITARY TRL", "5245 RANGELINE SERVICE RD S", "3005 CHARITY ST", "7955 HWY N", "12380 SAINT CHARLES ROCK RD", "1749 WOODSTONE DR", "2120 W OSAGE ST", "3603 MCMASTERS AVE", "9433 MANCHESTER RD", "8101 CLAYTON RD", "4501 AIRLINE DR", "101 FLORIDA AVE SE", "880 S NEOSHO BLVD", "300 KEYSER AVE", "6250 PASEO DEL NORTE NE", "7776 COX LN", "188 UNION ST", "12659 S RIDGELAND AVE", "15514 W WADDELL RD", "806 NISSAN DR", "602 ALABAMA AVE", "2141 E BROADWAY RD", "52 JERICHO TPKE", "120 BERGEN AVE", "3900 S GRAND BLVD", "7402 N 56TH ST", "819 S SALINA ST", "2170 86TH ST", "2577 MALL RD", "950 MAIN ST", "1311 RING RD", "298 CENTRAL AVE", "2519 N 7TH ST", "7617 MYRTLE AVE", "3595 HIRAM DOUGLASVILLE HWY", "5501 W OREM DR", "3341 HALLS FERRY RD", "747 HIGHWAY 1 S", "765 E GLENN AVE", "54 CENTER SQ", "1615 N SAGINAW RD", "2985 CROOKS RD", "3100 N MARKET ST", "7994 US HIGHWAY 51 N", "3880 DICKERSON PIKE"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practiceaddress1", "count": 500, "min": "1 HAWLEY LN", "max": "W62N190 WASHINGTON AVE"}, {"values": {"label": ["UNIT B1", "CVS PHARMACY #01241", "CVS PHARMACY #06807", "STE E", "STE 11", "STE G", "STE B", "STE 203-E", "STE 203A", "STE 100C", "STE 2", "STE 116", "STE 1400", "BO PUEBLO SEC PUEBLO NORTE", "STE 100", "WALGREENS #5495", "# 36", "STE 260", "WALGREENS #5549", "STE A", "WALGREENS #5727", "WALGREENS #6153", "TOWER 2", "STE P2", "UNIT 8", "STE 4", "STE 202", "STE 907", "STE 107", "STE 102"], "data": [458, 1, 1, 2, 1, 1, 8, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]}, "label": "practiceaddress2", "count": 30, "min": "ALWIFE PLAZA", "max": "UNIT B1"}, {"values": {"label": ["CHARLOTTE", "WESTMINSTER", "SILVER SPRING", "GLENDALE", "WICHITA FALLS", "FREMONT", "BREWSTER", "LA GRANGE", "RIDGEWOOD", "SAN DIEGO", "SCOTTSDALE", "FAR ROCKAWAY", "JACKSON HEIGHTS", "HACKENSACK", "BRONX", "LATHAM", "BRIDGEVILLE", "CHARLESTON", "MANCHESTER", "LONG ISLAND CITY", "SEARCY", "FRANKLIN", "BIRMINGHAM", "NEW ROCHELLE", "COLUMBUS", "PLANTATION", "NORWOOD", "BELLEROSE", "WATERTOWN", "MARYLAND HEIGHTS", "HOUSTON", "ROCK HILL", "WEBSTER", "PASADENA", "PHILADELPHIA", "DENVER", "CHATSWORTH", "OZONE PARK", "ROCHESTER", "OKLAHOMA CITY", "FORT MYERS", "CAPE CORAL", "NAPLES", "HENDERSON", "NEW YORK", "DALLAS", "DEARBORN", "TUSTIN", "CORONA", "FREEPORT", "GREENACRES", "WOOSTER", "VALLEY VILLAGE", "VINITA", "TAYLOR", "CARTHAGE", "ROYAL PALM BEACH", "LOUISVILLE", "STARKVILLE", "MALDEN", "SPARTANBURG", "SOUTH OZONE PARK", "PRINCETON", "MIAMI", "NORFOLK", "BROOKLYN", "ENCINO", "NORTH LITTLE ROCK", "PATERSON", "EDISON", "SANTA ANA", "BILLINGS", "BUFFALO", "ASTORIA", "HICKSVILLE", "AUSTIN", "CENTRALIA", "KARLSTAD", "TYLER", "MORRIS", "MAPLE GROVE", "GRANITE FALLS", "MILACA", "SPRINGFIELD", "THIEF RIVER FALLS", "BEMIDJI", "MOOSE LAKE", "MAHNOMEN", "FERTILE", "WALKER", "GRAND RAPIDS", "MADISON", "SANDSTONE", "MONTEVIDEO", "SLAYTON", "PIERZ", "GREENSBORO", "HIBBING", "BENTON", "SPANISH FORT", "MOBILE", "DIBERVILLE", "CROOKSTON", "MONROE", "WASECA", "RALEIGH", "ASHBURN", "YONKERS", "FLUSHING", "WINCHESTER", "GERMANTOWN", "FERGUS FALLS", "PEMBROKE PINES", "GOUVERNEUR", "N SYRACUSE", "BAGLEY", "BRAINERD", "BALL GROUND", "SHERIDAN", "HOLLYWOOD", "CONCORD", "CATOOSA", "RED LAKE FALLS", "COLD SPRING", "WADENA", "LA CROSSE", "WILMINGTON", "WILLISTON", "ADA", "FORT PIERCE", "MECHANICSBURG", "CARLISLE", "SAN MARCOS", "CORAL SPRINGS", "LAS VEGAS", "PLYMOUTH", "HUGHES SPRINGS", "JAMAICA", "WESTBROOK", "EAU CLAIRE", "LEHIGHTON", "BRECKENRIDGE", "SALEM", "FAIRFAX", "LYNCHBURG", "FREDERICKSBURG", "CHARLOTTESVILLE", "HARRISONBURG", "FREDERICK", "PUEBLO", "HOLTON", "LAFAYETTE", "SAN BENITO", "VAN NUYS", "CANOGA PARK", "PERTH AMBOY", "SUNRISE", "WELLESLEY", "SILVER CITY", "BOSTON", "ROANOKE", "BELTON", "LUBBOCK", "HUTTO", "SPRING BRANCH", "LAREDO", "HUNTSVILLE", "KATY", "SUGAR LAND", "EL PASO", "CHELSEA", "FAIR OAKS RANCH", "CHATHAM", "MARCY", "WASHINGTON", "LATROBE", "LANCASTER", "BURLESON", "MEXIA", "BROWNSVILLE", "LEANDER", "DORCHESTER", "BROCKTON", "BLACKSTONE", "HARWICH PORT", "WALPOLE", "LEOMINSTER", "EAST LONGMEADOW", "SOUTH YARMOUTH", "FRAMINGHAM", "CAMBRIDGE", "EAST FALMOUTH", "EAST WAREHAM", "NORTH READING", "METHUEN", "WESTFORD", "SOMERVILLE", "WALTHAM", "ARLINGTON", "WAKEFIELD", "HYANNIS", "SOUTH DENNIS", "TAUNTON", "IRVING", "THE WOODLANDS", "WARE", "JAMAICA PLAIN", "BEVERLY", "WAYLAND", "STOUGHTON", "MILLIS", "WEYMOUTH", "LITTLETON", "HYDE PARK", "CHESTNUT HILL", "SAN ANTONIO", "DRACUT", "ATLANTA", "LAKEVILLE", "LEXINGTON", "W ROXBURY", "HAVERHILL", "ATHOL", "UXBRIDGE", "MEDFORD", "WESTFIELD", "NORTHBOROUGH", "SANDWICH", "PEABODY", "MEDFIELD", "MIDDLEBORO", "MILFORD", "GREENFIELD", "PALATINE", "ROUND LAKE", "HARWICH", "ASHLAND", "LANTANA", "RICHARDSON", "LAKEWOOD", "ROSENBERG", "ARVADA", "CYPRESS", "BOULDER", "SUPERIOR", "GRAND JUNCTION", "ROSHARON", "HIGHLANDS RANCH", "COLORADO SPRINGS", "AURORA", "ENGLEWOOD", "LA MARQUE", "SILVERTHORNE", "RICHMOND", "ROYSE CITY", "HASLET", "CIBOLO", "CONROE", "MANSFIELD", "CHICAGO", "MOKENA", "ELGIN", "DOWNERS GROVE", "JOLIET", "OAK PARK", "CAROL STREAM", "JACKSONVILLE", "EL CERRITO", "CARY", "HILLSIDE", "MAHOMET", "PARK RIDGE", "OLYMPIA FIELDS", "RAYNHAM", "MARLBOROUGH", "AMHERST", "FALL RIVER", "GREELEY", "NORMAL", "RIVERDALE", "NILES", "MONTGOMERY", "MELISSA", "MARBLE FALLS", "WACO", "RAYMONDVILLE", "ALAMO HEIGHTS", "ALTON", "LAKE IN THE HILLS", "DANVILLE", "BLOOMINGTON", "LOCKPORT", "SCHAUMBURG", "ROWLEY", "ALLSTON", "GLOUCESTER", "FOXBORO", "SOUTH DARTMOUTH", "OXFORD", "MARSTONS MILLS", "QUINCY", "BRAINTREE", "HOLYOKE", "SEEKONK", "LONGMEADOW", "SOUTH ATTLEBORO", "NORTH EASTON", "NEWTON", "DANVERS", "PEMBROKE", "HUDSON", "MONTEREY", "RANTOUL", "OAKLAND", "DAVIS", "STOCKTON", "SAN JOSE", "ENCINITAS", "SANTA CLARA", "TEMECULA", "ATASCADERO", "VACAVILLE", "TURLOCK", "CLOVIS", "COVINA", "ALAMEDA", "WALNUT CREEK", "EL CAJON", "SONORA", "PLAINFIELD", "FRESNO", "LA MESA", "AUBURN", "SONOMA", "RANCHO MIRAGE", "GRASS VALLEY", "GOLETA", "PORTERVILLE", "OROVILLE", "MILPITAS", "SANTA MARIA", "WATSONVILLE", "NATIONAL CITY", "DALY CITY", "SARATOGA", "SEBASTOPOL", "GREENBRAE", "MADERA", "UKIAH", "FORT WORTH", "HOPKINTON", "LOWELL", "W NEWTON", "BURLINGTON", "EAST BOSTON", "BRIGHTON", "BEDFORD", "WINCHENDON", "DEDHAM", "CHARLESTOWN", "WEST BRIDGEWATER", "ALBUQUERQUE", "DUMAS", "DECATUR", "FRISCO", "BUDA", "NORTH BILLERICA", "ACTON", "NEEDHAM", "CAMARILLO", "SUNNYVALE", "EVANSVILLE", "HONOLULU", "SAN MATEO", "WEST COVINA", "PETALUMA", "GLENDORA", "CHULA VISTA", "CARMICHAEL", "MERCED", "GETTYSBURG", "BROOMALL", "DOYLESTOWN", "SEATTLE", "WEST GROVE", "YORK", "GILBERTSVILLE", "NORTH EAST", "ELSA", "CAGUAS", "LANHAM", "CHESAPEAKE BEACH", "NEW ORLEANS"], "data": [1, 3, 1, 1, 1, 2, 1, 1, 2, 4, 1, 1, 2, 1, 6, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 1, 1, 4, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 7, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 7, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practicecity", "count": 393, "min": "ABBEVILLE", "max": "WOODBRIDGE"}, {"values": {"label": ["NC", "CA", "MD", "NY", "TX", "WA", "KY", "AZ", "NJ", "PA", "SC", "NH", "AR", "TN", "AL", "MS", "FL", "MO", "MA", "CO", "MN", "OK", "NV", "MI", "OH", "VA", "MT", "IL", "GA", "WY", "WI", "VT", "KS", "LA", "NM", "IN", "HI", "PR"], "data": [5, 71, 5, 38, 68, 2, 2, 1, 5, 20, 2, 2, 2, 1, 3, 6, 12, 1, 126, 19, 33, 3, 3, 1, 1, 9, 1, 36, 4, 2, 3, 1, 1, 2, 4, 3, 1, 1]}, "label": "practicestate", "count": 38, "min": "AK", "max": "WV"}, {"values": {"label": ["705.0 - 99902224.5", "99902224.5 - 199803744.0", "199803744.0 - 299705263.5", "299705263.5 - 399606783.0", "399606783.0 - 499508302.5", "499508302.5 - 599409822.0", "599409822.0 - 699311341.5", "699311341.5 - 799212861.0", "799212861.0 - 899114380.5", "899114380.5 - 999015900"], "data": [118, 17, 57, 62, 31, 51, 67, 46, 15, 36]}, "label": "practicezip9code", "count": 10, "min": 705, "max": 999015900}, {"values": {"label": ["-2141564683.0 - -1712887730.7", "-1712887730.7 - -1284210778.4", "-1284210778.4 - -855533826.1", "-855533826.1 - -426856873.8", "-426856873.8 - 1820078.5", "1820078.5 - 430497030.8", "430497030.8 - 859173983.1", "859173983.1 - 1287850935.4", "1287850935.4 - 1716527887.7", "1716527887.7 - 2145204840.0"], "data": [46, 61, 54, 48, 52, 12, 93, 56, 9, 69]}, "label": "telephonenumber", "count": 10, "min": -2141564683, "max": 2145204840}, {"values": {"label": ["Pharmacy", "Medical Supply Company Other", "Certified Other|Pharmacy", "MSC With Respiratory Therapist", "MSC With Orthotic-Prosthetic", "Pharmacy|Grocery Store", "Pharmacy|Optician", "Medical Supply Company Other|Pharmacy|Optician", "Medical Supply Company Other|Orthotic Personnel", "Optometrist", "Medical Supply Company Other|MSC With Respiratory Therapist", "Optometrist|Optician", "Prosthetic Personnel", "Medical Supply Company Other|MSC With Orthotic Personnel", "MSC With Orthotic Personnel"], "data": [405, 6, 4, 1, 3, 21, 50, 1, 1, 2, 2, 1, 1, 1, 1]}, "label": "specialitieslist", "count": 15, "min": "Certified Other|MSC With Respiratory Therapist|Pharmacy", "max": "Prosthetic Personnel"}, {"values": {"label": ["OXYGEN & EQUIPMENT", "PHYSICIAN ASSISTANT", "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "OXYGEN & EQUIPMENT|PEDORTHIC PERSONNEL|MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "PEDORTHIC PERSONNEL"], "data": [493, 1, 2, 1, 3]}, "label": "providertypelist", "count": 5, "min": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "max": "PHYSICIAN ASSISTANT"}, {"values": {"label": ["Orthoses: Off-The-Shelf", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Limb Prostheses", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Heat & Cold Applications|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Nebulizer Equipment and/or Supplies", "Orthoses: Custom Fabricated|Limb Prostheses", "Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions", "Immunosuppressive Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies", "Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Continuous Positive Airway Pressure (CPAP) Devices|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Continuous Passive Motion (CPM) Devices|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Orthoses: Off-The-Shelf", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Seat Lift Mechanisms|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Pneumatic Compression Devices and/or Supplies|Ultraviolet Light Devices and/or Supplies|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "Canes and/or Crutches|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Surgical Dressings", "Immunosuppressive Drugs|Nebulizer Drugs", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Urological Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies", "Pneumatic Compression Devices and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Limb Prostheses|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Urological Supplies", "Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies|Surgical Dressings", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings|Lymphedema Compression Treatment Items", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings|Lymphedema Compression Treatment Items", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Nebulizer Drugs", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Nebulizer Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Lymphedema Compression Treatment Items", "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Nebulizer Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Heat & Cold Applications|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Seat Lift Mechanisms|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings|Diabetic Shoes and Inserts", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Infusion Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings"], "data": [2, 1, 2, 39, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 5, 1, 3, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 227, 86, 1, 1, 1, 1]}, "label": "supplieslist", "count": 93, "min": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "max": "Surgical Dressings"}, {"values": {"label": ["18.0 - 22.6", "22.6 - 27.2", "27.2 - 31.8", "31.8 - 36.4", "36.4 - 41.0", "41.0 - 45.6", "45.6 - 50.2", "50.2 - 54.8", "54.8 - 59.4", "59.4 - 64.0"], "data": [3, 27, 41, 104, 126, 179, 13, 0, 2, 5]}, "label": "latitude", "count": 10, "min": 18, "max": 64}, {"values": {"label": ["-157.0 - -147.9", "-147.9 - -138.8", "-138.8 - -129.7", "-129.7 - -120.6", "-120.6 - -111.5", "-111.5 - -102.4", "-102.4 - -93.3", "-93.3 - -84.2", "-84.2 - -75.1", "-75.1 - -66.0"], "data": [1, 0, 0, 35, 41, 28, 96, 67, 53, 179]}, "label": "longitude", "count": 10, "min": -157, "max": -66}, {"values": {"label": ["0"], "data": [500]}, "label": "is_contracted_for_cba", "count": 1, "min": "0", "max": "0"}, {"values": {"label": ["1.0 - 3.6", "3.6 - 6.2", "6.2 - 8.8", "8.8 - 11.4", "11.4 - 14.0", "14.0 - 16.6", "16.6 - 19.2", "19.2 - 21.8", "21.8 - 24.4", "24.4 - 27"], "data": [437, 7, 3, 11, 5, 10, 7, 10, 2, 8]}, "label": "participationbegindate_dayofmonth", "count": 10, "min": 1, "max": 27}, {"values": {"label": ["1", "12", "11", "10"], "data": [416, 15, 68, 1]}, "label": "participationbegindate_month", "count": 4, "min": "1", "max": "7"}, {"values": {"label": ["2024", "2023"], "data": [100, 400]}, "label": "participationbegindate_year", "count": 2, "min": "2023", "max": "2024"}, {"values": {"label": ["0.0 - 12.6", "12.6 - 25.2", "25.2 - 37.8", "37.8 - 50.4", "50.4 - 63.0", "63.0 - 75.6", "75.6 - 88.2", "88.2 - 100.8", "100.8 - 113.4", "113.4 - 126.0"], "data": [2, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, "label": "businessname_stringindexer_transform", "count": 10, "min": 0, "max": 126}, {"values": {"label": ["467.0"], "data": [500]}, "label": "practicename_stringindexer_transform", "count": 1, "min": "467.0", "max": "467.0"}, {"values": {"label": ["500.0"], "data": [500]}, "label": "practiceaddress1_stringindexer_transform", "count": 1, "min": "0.0", "max": "499.0"}, {"values": {"label": ["0.0 - 2.9", "2.9 - 5.8", "5.8 - 8.7", "8.7 - 11.6", "11.6 - 14.5", "14.5 - 17.4", "17.4 - 20.3", "20.3 - 23.2", "23.2 - 26.1", "26.1 - 29.0"], "data": [428, 3, 5, 1, 0, 0, 0, 2, 0, 0]}, "label": "practiceaddress2_stringindexer_transform", "count": 10, "min": 0, "max": 29}, {"values": {"label": ["0.0 - 39.7", "39.7 - 79.4", "79.4 - 119.1", "119.1 - 158.8", "158.8 - 198.5", "198.5 - 238.2", "238.2 - 277.9", "277.9 - 317.6", "317.6 - 357.3", "357.3 - 397.0"], "data": [117, 66, 40, 39, 40, 40, 39, 40, 40, 39]}, "label": "practicecity_stringindexer_transform", "count": 10, "min": 0, "max": 397}, {"values": {"label": ["0.0 - 3.7", "3.7 - 7.4", "7.4 - 11.1", "11.1 - 14.8", "14.8 - 18.5", "18.5 - 22.2", "22.2 - 25.9", "25.9 - 29.6", "29.6 - 33.3", "33.3 - 37.0"], "data": [303, 108, 32, 14, 13, 10, 6, 6, 4, 4]}, "label": "practicestate_stringindexer_transform", "count": 10, "min": 0, "max": 37}, {"values": {"label": ["0.0 - 1.4", "1.4 - 2.8", "2.8 - 4.2", "4.2 - 5.6", "5.6 - 7.0", "7.0 - 8.4", "8.4 - 9.8", "9.8 - 11.2", "11.2 - 12.6", "12.6 - 14.0"], "data": [425, 0, 31, 2, 9, 17, 1, 6, 3, 1]}, "label": "specialitieslist_stringindexer_transform", "count": 10, "min": 0, "max": 14}, {"values": {"label": ["0.0"], "data": [500]}, "label": "providertypelist_stringindexer_transform", "count": 1, "min": "0.0", "max": "0.0"}, {"values": {"label": ["1.0 - 6.5", "6.5 - 12.0", "12.0 - 17.5", "17.5 - 23.0", "23.0 - 28.5", "28.5 - 34.0", "34.0 - 39.5", "39.5 - 45.0", "45.0 - 50.5", "50.5 - 56.0"], "data": [352, 7, 2, 1, 0, 1, 0, 0, 2, 135]}, "label": "supplieslist_stringindexer_transform", "count": 10, "min": 1, "max": 56}], "stageId": "6781cddd8402090cd8fff5cc", "FESamplePath": "/FileStore/platform/sampleData/6781cddd8402090cd8fff5cc_AutoFE/part-00000-25ab2324-b510-4322-a426-e050905760c3-c000.csv", "manualfesamplepath": "/FileStore/platform/sampleData/6781cddd8402090cd8fff5cc_AutoFE/part-00000-25ab2324-b510-4322-a426-e050905760c3-c000.csv", "originalcount": 59566, "graphdata": {"provider_id": {"label": ["20310995.0 - 21715591.1", "21715591.1 - 23120187.2", "23120187.2 - 24524783.3", "24524783.3 - 25929379.4", "25929379.4 - 27333975.5", "27333975.5 - 28738571.6", "28738571.6 - 30143167.7", "30143167.7 - 31547763.8", "31547763.8 - 32952359.9", "32952359.9 - 34356956"], "data": [495, 0, 0, 1, 1, 0, 0, 0, 0, 3]}, "acceptsassignement": {"label": ["1", "0"], "data": [390, 110]}, "participationbegindate": {"label": ["2023-01-01 00:00:00", "2022-03-01 00:00:00", "2020-05-21 00:00:00", "2020-05-20 00:00:00", "2020-05-19 00:00:00", "2020-05-18 00:00:00", "2020-05-16 00:00:00", "2020-05-15 00:00:00", "2017-01-01 00:00:00", "2014-07-01 00:00:00", "2019-01-01 00:00:00", "2017-01-27 00:00:00", "2017-01-26 00:00:00", "2017-01-25 00:00:00", "2017-01-23 00:00:00", "2017-01-20 00:00:00", "2017-01-19 00:00:00", "2017-01-18 00:00:00", "2017-01-17 00:00:00", "2017-01-13 00:00:00", "2017-01-10 00:00:00", "2017-01-09 00:00:00", "2017-01-06 00:00:00", "2017-01-05 00:00:00", "2020-05-13 00:00:00", "2020-05-12 00:00:00", "2020-05-08 00:00:00", "2020-05-07 00:00:00", "2017-01-14 00:00:00", "2017-01-11 00:00:00", "2017-01-04 00:00:00", "2017-01-03 00:00:00", "2020-05-14 00:00:00", "2020-05-11 00:00:00"], "data": [152, 199, 1, 8, 3, 1, 1, 5, 18, 58, 9, 6, 1, 1, 2, 1, 1, 1, 1, 3, 1, 3, 4, 2, 1, 1, 2, 1, 1, 2, 1, 1, 3, 5]}, "businessname": {"label": ["RELIANT MEDICAL EQUIPMENT DISTRIBUTORS", "39 PHARMACY CORPORATION", "NV HEALTH, LLC", "MYRTLE RX PLUS INC", "LONE STAR PROSTHETICS, WICHITA FALLS, LLC", "S8 MEDICAL EQUIPMENT LLC", "QUICKRX LLC", "APPARO, INC.", "SDPM UNITED PHARMACY INC", "PROMEDICA MEDICAL SUPPLY INC", "ORTHO ELITE PERFORMANCE & RECOVERY PLLC", "WILLOW PHARMACY CORP", "HISPANOS PHARMACY INC", "HACKENSACK PHARMACY INC", "BRONX HEALTHPLUS RX INC", "FRESH POND PHARMACY INC", "SHIFA SPECIALTY INC", "NEB DOCTORS OF WESTERN PENNSYLVANIA LLC", "GOOD MERCY PHARMACY CORP", "PROSTHETIC AND ORTHOTIC ASSOCIATES OF SOUTH CAROLINA LLC", "MOBIUS MOBILITY, LLC", "COMFORT RX PHARMACY CORP", "SEARCY RX LLC", "OPTUM PHARMACY 705, LLC", "EMPIRE PHARMACY INC", "THRIVE SPECIALTY PHARMACY LLC", "FIT TO GO LLC", "JERICHO CHEMISTS INC", "PARKVIEW NOCO RX, LLC", "MAC RX OF MISSOURI LLC", "FIRSTCARE MEDICAL SUPPLY LLC", "JADD PHARMACY CORP", "SNEDS PEDORTHICS LLC", "PROSUM DME LLC", "S S HEALTHCARE INC", "ALLIANCE MEDICAL SUPPLY LLC", "OEI PROSTHETICS AND ORTHOTICS", "SINGH PHARMACY INC", "ROCHESTER HOME INFUSION INC", "RXMTS LLC", "SOUTHWEST FLORIDA EYE CARE, L.L.C.", "INFUSED THERAPIES LLC", "HEALARIAN LLC", "DIVINE MEDICAL SUPPLY AND EQUIPMENTS LLC", "PHOENIX MEDICAL EQUIPMENT, INC.", "HEAL MEDICAL SUPPLY LLC", "ST. RAPHAEL PHARMACY INC", "CHUBBUCK'S PHARMACY INC", "SEVENTEEN MEDICAL SUPPLY LLC", "WOOSTER PHARMACY LLC", "SHIV HARI RX INC", "MEDIX SUPPLIES INC", "MR PHARMACIST LLC", "BRISTOL CARE PHARMACY LLC", "VINITA FAMILY EYECARE, PLLC", "MS EYE CARE PA", "PICC LINES PLUS LLC", "BOSTON DME COMPANY LLC", "PEACH VALLEY PHARMACY LLC", "ROCKAWAY DRUGS RX INC", "C AND M HEALTH INC", "ILS HHA OF REGION 11 LLC", "POLARIS PHARMACY SERVICES OF VIRGINIA LLC", "STARLIGHT RX INC", "SHALOM RX INC", "ARKANSAS COMPRESSION SHOP LLC", "BARGAIN MEDICAL SUPPLY, INC", "MAASP  INC.", "DEVINES PHARMACY INC", "VIVITAL, INC.", "BILLINGS FAMILY EYECARE SHILOH PLLC", "STARLING PHARMACY II, INC.", "ASTORIA RX HOLDINGS INC", "DUFFY RX LLC", "FALCON MED EQPT LLC", "WB DRUG COMPANY INC", "THRIFTY DRUG STORES INC", "DOVE MEDICAL SUPPLY RETAIL LLC", "WENDY SOWELL GIBSON OD", "PREMIER KIDS CARE, INC.", "SAAD ENTERPRISES, INC.", "BOTICA PHARMACY CORP.", "DYNAMEDICS MEDICAL SOLUTIONS, INC.", "ROBERTS HOME MEDICAL LLC.", "YONKERS EXPRESS PHARMACY INC", "BLOOMING LIGHT RX INC", "SOUTH BROWARD HOSPITAL DISTRICT", "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "BALL GROUND PHARMACY LLC", "HOSPITAL PHARMACY INC", "CONCORD PHARMACY INC", "PHARMCAREOK OF TULSA, INC.", "OXYTECH OF NORTH CAROLINA, LLC", "J&G MEDICAL SUPPLIES", "ACCESS PT PENNSYLVANIA", "PHARMACY ON U LLC", "ADVANCED MEDICAL SUPPLY INC", "DIABETIC SOLUTIONS, INC.", "SIERRA HOME MEDICAL PRODUCTS, INC", "ADVANCED EYECARE, SC", "MED-SHOP OF HUGHES SPRINGS INC", "LIBERTY RX INC", "MEDI CITY PHARMACY INC", "U HEALTH PHARMACY LLC", "AB MEDICAL LLC", "CORONA PHARMACY RX INC", "STRENGTH GIVER PHARMACY LLC", "MEDICAL PHARMACY PA", "INFUSIONS SERVICES OF LOUISIANA LLC", "PINK PROMISES & DME LLC", "CHARITY COMFORT CARE MEDICAL SUPPLIES", "CPR DME LLC", "APEX RX INC", "ROYAL MEDICAL SUPPLY LLC", "SAINT MARY AND JESSIE LLC", "BUCKNER NEIGHBORHOOD PHARMACY INC", "PHARMSCRIPT OF FLORIDA LLC", "CVS PHARMACY INC", "HIGHLAND PARK CVS LLC", "LONGS DRUG STORES CALIFORNIA LLC", "HOOK- SUPERX, L.L.C..", "PENNSYLVANIA CVS PHARMACY LLC", "WASHINGTON CVS PHARMACY LLC", "GEORGIA CVS PHARMACY, L.L.C.", "PUERTO RICO CVS PHARMACY LLC", "MARYLAND CVS PHARMACY LLC.", "LOUISIANA CVS PHARMACY LLC"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 32, 1, 1, 3, 3, 1, 1, 10, 1, 1, 1, 14, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 203, 34, 60, 3, 9, 1, 2, 1, 2, 1]}, "practicename": {"label": ["RELIANT MEDICAL EQUIPMENT DIST", "39 PHARMACY", "NV HEALTH, LLC", "MYRTLE RX PLUS INC", "LONE STAR PROSTHETICS, WICHITA FALL", "S8 MEDICAL EQUIPMENT LLC", "BREWSTER PHARMACY", "EVERCARE MEDICAL SOLUTIONS INC", "SDPM UNITED PHARMACY INC", "PROMEDICA MEDICAL SUPPLY INC", "ORTHO ELITE PERFORMANCE & RECOVERY", "WILLOW PHARMACY CORP", "HISPANOS PHARMACY INC", "HACKENSACK PHARMACY", "BRONX HEALTHPLUS RX INC", "FRESH POND PHARMACY INC", "SHIFA SPECIALTY INC.", "NEB DOCTORS OF WESTERN PENNSYLVANIA", "GOOD MERCY PHARMACY CORP", "PROSTHETIC AND ORTHOTIC ASSOC OF SC", "MOBIUS MOBILITY LLC", "COMFORT RX PHARMACY CORP", "MEDICAL CENTER PHARMACY", "OPTUM PHARMACY 705, LLC", "NEW ROCHELLE PHARMACY", "THRIVE SPECIALTY PHARMACY LLC", "FIT TO GO LLC", "JERICHO CHEMISTS INC.", "PARKVIEW NOCO RX, LLC", "MAC RX OF MISSOURI, LLC", "FIRSTCARE MEDICAL SUPPLY LLC", "ROCK HILL PHARMACY", "SNEDS PEDORTHIC LLC", "PROSUM DME", "S S HEALTHCARE INC", "ALLIANCE MEDICAL SUPPLY LLC", "HQ", "SINGH PHARMACY INC.", "ROCHESTER HOME INFUSION", "RXMTS", "SOUTHWEST FLORIDA EYE CARE", "SOUTHWEST FLORIDA EYE CARE LLC", "VITAL CARE OF HENDERSON", "HEALARIAN PHARMACY", "DIVINE MEDICAL SUPPLY AND EQUIPMENT", "PHOENIX MEDICAL EQUIPMENT INC", "HEAL MEDICAL SUPPLY LLC", "ST. RAPHAEL CHEMISTS", "CHUBBUCK'S PHARMACY INC", "SEVENTEEN MEDICAL SUPPLY LLC", "WOOSTER PHARMACY LLC", "SHIV HARI RX INC", "MEDIX SUPPLIES INC", "MR PHARMACIST LLC", "BRISTOL CARE PHARMACY LLC", "VINITA FAMILY EYECARE, PLLC", "MS EYE CARE PA", "MISSISSIPPI EYE CARE CARTHAGE", "PICC LINES PLUS LLC", "LOUISVILLE EYE CARE", "BOSTON DME COMPANY LLC", "U SAVE IT PHARMACY PEACH VALLEY", "ROCKAWAY DRUGS RX INC", "C AND M HEALTH INC", "ILS HHA OF REGION 11 LLC", "POLARIS PHARMACY SERVICES OF VIRGIN", "STARLIGHT RX INC", "SHALOM PHARMACY", "ARKANSAS COMPRESSION SHOP LLC", "BARGAIN MEDICAL SUPPLY, INC", "MAA PHARMACY", "DEVINE'S PHARMACY", "VIVITAL, INC.", "BILLINGS FAMILY EYECARE SHILOH", "STARLING PHARMACY II, INC.", "ASTORIA RX HOLDINGS INC", "DUFFY RX LLC", "FALCON MED EQPT LLC", "WB DRUG COMPANY INC", "THRIFTY WHITE DRUG #756", "THRIFTY WHITE PHARMACY #768", "THRIFTY WHITE PHARMACY #742", "THRIFTY WHITE DRUG #762", "THRIFTY WHITE DRUG #760", "THRIFTY WHITE PHARMACY 767", "THRIFTY WHITE DRUG #758", "THRIFTY WHITE DRUG #736", "THRIFTY WHITE PHARMACY # 769", "THRIFTY WHITE PHARMACY #754", "THRIFTY WHITE PHARMACY #752", "THRIFTY WHITE DRUG #750", "THRIFTY WHITE DRUG #748", "THRIFTY WHITE PHARMACY #728", "THRIFTY WHITE DRUG #755", "THRIFTY WHITE PHARMACY #772", "THRIFTY WHITE PHARMACY #770", "THRIFTY WHITE PHARMACY #774", "THRIFTY WHITE PHARMACY #779", "DOVE MEDICAL SUPPLY RETAIL LLC", "THRIFTY WHITE PHARMACY #741", "DR. WENDY SOWELL GIBSON", "PREMIER KIDS CARE, INC.", "SAAD MEDICAL EQUIPMENT - SPANISH FO", "SAAD MEDICAL EQUIPMENT - UNIVERSITY", "BOTICA PHARMACY CORP.", "SAAD MEDICAL EQUIPMENT -D'IBERVILLE", "THRIFTY WHITE DRUG 729", "THRIFTY WHITE PHARMACY #727", "DYNAMEDICS MEDICAL SOLUTIONS INC", "ROBERTS HOME MEDICAL LLC", "YONKERS EXPRESS PHARMACY INC", "BLOOMING LIGHT RX INC", "THRIFTY WHITE PHARMACY #735", "MEMORIAL REGIONAL HOSPITAL SOUTH PH", "HEALTHDIRECT INSTITUTIONAL PHARMACY", "THRIFTY WHITE DRUG #746", "THRIFTY WHITE PHARMACY #738", "BALL GROUND PHARMACY LLC", "HOSPITAL PHARMACY WEST", "HOSPITAL PHARMACY INC", "PREMIER KIDS CARE", "WEST CONCORD PHARMACY", "PHARMCAREOK OF TULSA INC", "THRIFTY WHITE PHARMACY #740", "THRIFTY WHITE PHARMACY #776", "THRIFTY WHITE PHARMACY #778", "THRIFTY WHITE PHARMACY #734", "ROTECH", "THRIFTY WHITE DRUG #759", "J&G MEDICAL SUPPLIES", "ACCESS PT PENNSYLVANIA", "PHARMACY ON U LLC", "ADVANCED MEDICAL SUPPLY INC", "DIABETIC SOLUTIONS INC", "THC OF NEVADA", "ADVANCED EYECARE", "THE MED-SHOP PHARMACY", "LIBERTY RX INC", "THRIFTY WHITE PHARMACY #775", "THRIFTY WHITE PHARMACY #781", "MEDI CITY PHARMACY INC", "U HEALTH PHARMACY LLC", "VALLEY VIEW", "CORONA PHARMACY RX INC.", "THE MEDICINE SHOPPE #2193", "MEDICAL PHARMACY PA", "VITAL CARE OF LAFAYETTE", "PINK PROMISES & DME LLC", "CHARITY COMFORT CARE MEDICAL SUPPLY", "CPR DME, LLC", "REMEDY PHARMACY", "ROYAL MEDICAL SUPPLY", "SAINT MARY AND JESSIE LLC", "BUCKNER NEIGHBORHOOD PHARMACY INC.", "PHARMSCRIPT OF FLORIDA LLC", "CVS PHARMACY #01254", "CVS PHARMACY #10449", "CVS PHARMACY #10174", "CVS PHARMACY #10487", "CVS PHARMACY #10414", "CVS PHARMACY #10521", "CVS PHARMACY #10486", "CVS PHARMACY #10428", "CVS PHARMACY #10446", "CVS PHARMACY #10265", "CVS PHARMACY #10544", "CVS PHARMACY #10350", "CVS PHARMACY #10215", "CVS PHARMACY #00496", "CVS PHARMACY #10540", "CVS PHARMACY # 05465", "CVS PHARMACY #04879", "CVS PHARMACY #01020", "CVS PHARMACY #04599", "CVS PHARMACY # 02282", "CVS PHARMACY # 00861", "CVS PHARMACY # 01225", "CVS PHARMACY #00860", "CVS PHARMACY # 00844", "CVS PHARMACY # 00810", "CVS PHARMACY # 00769", "CVS PHARMACY INC", "CVS PHARMACY # 01871", "CVS PHARMACY # 01002", "CVS PHARMACY # 01870", "CVS PHARMACY # 01247", "CVS PHARMACY # 01143", "CVS PHARMACY # 01085", "CVS PHARMACY # 01121", "CVS PHARMACY # 08319", "CVS PHARMACY # 04471", "CVS PHARMACY # 00148", "CVS PHARMACY # 00130", "CVS PHARMACY # 00119", "CVS PHARMACY # 01869", "CVS PHARMACY #01021", "CVS PHARMACY # 01041", "CVS PHARMACY #16419", "CVS PHARMACY # 16205", "CVS PHARMACY # 01111", "CVS PHARMACY #01264", "CVS PHARMACY #00915", "CVS PHARMACY #01874", "CVS PHARMACY #02325", "CVS PHARMACY #00995", "CVS PHARMACY #01853", "CVS PHARMACY #10782", "CVS PHARMACY #01049", "CVS PHARMACY #01885", "CVS PHARMACY #01862", "CVS PHARMACY # 05872", "CVS PHARMACY #00983", "CVS PHARMACY #01368", "CVS PHARMACY# 05407", "CVS PHARMACY #07607", "CVS PHARMACY #00307", "CVS PHARMACY #00117", "CVS PHARMACY #01886", "CVS PHARMACY #02283", "CVS PHAMRACY #05402", "CVS PHARMACY #01068", "CVS PHARMACY #00946", "CVS PHARMACY #01010", "CVS PHARMACY #01234", "CVS PHARMACY #00704", "CVS PHARMACY #00636", "CVS PHARMACY # 00318", "CVS PHARMACY #01238", "CVS PHARMACY #01130", "CVS PHARMACY #01872", "CVS PHARMACY #05874", "CVS PHARMACY #02254", "CVS PHARMACY #01850", "CVS PHARMACY #01094", "CVS PHARMACY # 05913", "CVS PHARMACY # 07170", "CVS PHARMACY #10324", "CVS PHARMACY #01859", "CVS PHARMACY # 01873", "CVS PHARMACY # 01875", "CVS PHARMACY #05002", "CVS PHARMACY #10665", "CVS PHARMACY 17604", "CVS PHARMACY #10601", "CVS PHARMACY #10637", "CVS PHARMACY #17335", "CVS PHARMACY #16009", "CVS PHARMACY #10906", "CVS PHARMACY #16013", "CVS PHARMACY #16895", "CVS PHARMACY #16024", "CVS PHARMACY #10758", "CVS PHARMACY #10603", "CVS PHARMACY #17276", "CVS PHARMACY #17603", "CVS PHARMACY #16074", "CVS PHARMACY #17046", "CVS PHARMACY #16081", "CVS PHARMACY #16831", "CVS PHARMACY #16033", "CVS PHARMACY #10139", "CVS PHARMACY #10598", "CVS PHARMACY #16855", "CVS PHARMACY #10752", "CVS PHARMACY #10635", "CVS PHARMACY #10775", "CVS PHARMACY #10595", "CVS PHARMACY #10580", "CVS PHARMACY #10638", "CVS PHARMACY #10671", "CVS PHARMACY #10576", "CVS PHARMACY # 05987", "CVS PHARMACY # 05822", "CVS PHARMACY # 05829", "CVS PHARMACY # 05836", "CVS PHARMACY # 02903", "CVS PHARMACY # 02935", "CVS PHAMRACY # 02936", "CVS PHARMACY # 02942", "CVS PHARMACY # 02981", "CVS PHARMACY #02844", "CVS PHARMASCY # 05797", "CVS PHARMACY # 02692", "CVS PHARMACY # 09086", "CVS PHARMACY #05619", "CVS PHARMACY 05482", "CVS PHARMACY # 02827", "CVS PHARMACY # 06935", "CVS PHARMACY #08910", "CVS PHARMACY #04396", "CVS PHARMACY 01768", "CVS PHARMACY #00513", "CVS PHARMACY #01900", "CVS PHARMACY #00488", "CVS PHARMACY #00365", "CVS PHARMACY #00220", "CVS PHARMACY #01034", "CVS PHARMACY # 01095", "CVS PHARMACY # 02878", "CVS PHARMACY #16935", "CVS PHARMACY #02600", "CVS PHARMACY #01248", "HIGHLAND PARK CVS LLC", "CVS PHARMACY #07020", "CVS PHARMACY # 07166", "CVS PHARMACY #04581", "CVS PHARMACY #10664", "CVS PHARMACY #10673", "CVS PHARMACY #10691", "CVS PHARMACY #10818", "CVS PHARMACY #10602", "CVS PHARMACY #10667", "CVS PHARMACY #10880", "CVS PHARMACY #01996", "CVS PHARMACY #10579", "CVS PHARMACY #10634", "CVS PHARMACY #10944", "CVS PHARMACY #10670", "CVS PHARMACY #07970", "CVS PHARMACY #06748", "CVS PHARMACY # 06937", "CVS PHARMACY 07017", "CVS PHARMACY # 07142", "CVS PHARMACY #01184", "CVS PHARMACY #00929", "CVS PHARMACY #01024", "CVS PHARMACY #00272", "CVS PHARMACY #01867", "CVS PHARMACY #01868", "CVS PHARMACY #01955", "CVS PHARMACY #02054", "CVS PHARMACY #02161", "CVS PHARMACY #02200", "CVS PHARMACY #00062", "CVS PHARMACY #00137", "CVS PHARMACY #00260", "CVS PHARMACY #00335", "CVS PHARMACY #01861", "CVS PHARMACY #00373", "CVS PHARMACY #00394", "CVS PHARMACY #00517", "CVS PHARMACY #02206", "CVS PHARMACY # 07232", "CVS PHARMACY #06505", "CVS PHARMACY #02959", "CVS PHARMACY #01022", "CVS PHARMACY # 01876", "CVS PHARMACY #01865", "CVS PHARMACY #07222", "CVS PHARMACY #01179", "CVS PHARMACY #09320", "CVS PHARMACY #07962", "CVS PHARMACY # 06933", "CVS PHARMACY #09099", "CVS PHARMACY #09130", "CVS PHARMACY #09142", "CVS PHARMACY # 09147", "CVS PHARMACY #09896", "CVS PHARMACY #09135", "CVS PHARMACY #09929", "LONGS DRUG STORES CALIFORNIA LLC", "CVS PHARMACY #09922", "CVS PHARMACY #09921", "CVS PHARMACY #09920", "CVS PHARMACY #09909", "CVS PHARMACY #09917", "CVS PHARMACY #09919", "CVS PHARMACY #09801", "CVS PHARMACY #09146", "CVS PHARMACY #09800", "CVS PHARMACY #09128", "LONGS DRUG STORE #09815", "CVS PHARMACY #09818", "CVS PHARMACY #09819", "CVS PHARMACY #09208", "CVS PHARMACY #09296", "CVS PHARMACY #05421", "CVS PHARMACY #08734", "CVS PHARMACY #07553", "CVS PHARMACY #09167", "CVS PHARMACY #09149", "CVS PHARMACY # 09162", "CVS PHARMACY 09150", "CVS PHARMACY 09152", "CVS PHARMACY 09153", "CVS PHARMACY 09155", "CVS PHARMACY #09154", "CVS PHARMACY # 09156", "CVS PHARMACY #09845", "CVS PHARMACY #09158", "CVS PHARMACY 09161", "CVS PHARMACY #09821", "CVS PHARMACY 09282", "CVS PHARMACY #09796", "CVS PHARMACY #09783", "CVS PHARMACY #09752", "CVS PHARMACY #09834", "CVS PHARMACY #09872", "CVS PHARMACY #09219", "CVS PHARMACY #09159", "CVS PHARMACY #09822", "CVS PHARMACY #10886", "CVS PHARMACY #10750", "CVS PHARMACY #10681", "CVS PHARMACY #10177", "CVS PHARMACY #05493", "CVS PHARMACY #00046", "CVS PHARMACY #01023", "CVS PHARMACY #01265", "CVS PHARMACY #01199", "CVS PHARMACY #00055", "CVS PHARMACY #00107", "CVS PHARMACY #00714", "CVS PHARMACY #00736", "CVS PHARMACY# 08441", "CVS PHARMACY #02201", "CVS PHARMACY # 01009", "CVS PHARMACY#01803", "CVS PHARMACY #01012", "CVS #05494", "CVS PHARMACY #04820", "CVS PHARMACY #04880", "CVS PHARMACY # 07319", "CVS PHARMACY# 01878", "CVS PHARMACY #01001", "CVS PHARMACY #10581", "CVS PHARMACY #10535", "CVS PHARMACY #05382", "CVS PHARMACY", "CVS PHARMACY #00131", "CVS PHARMACY #01531", "CVS PHARMACY #01845", "CVS PHARMACY #00604", "CVS PHARMACY #00632", "CVS PHARMACY #00654", "CVS PHARMACY #00674", "CVS PHARMACY #07242", "CVS PHARMACY # 09844", "CVS PHARMACY #09198", "HOOK-SUPERX LLC", "HOOK- SUPERX, L.L.C..", "LONGS DRUGS #09835", "CVS PHARMACY #09833", "CVS PHARMACY #09735", "CVS PHARMACY #09802", "CVS PHARMACY #09163", "CVS PHARMACY #09851", "CVS PHARMACY #09632", "CVS PHARMACY #09809", "CVS PHARMACY #09623", "CVS PHARMACY #01921", "CVS PHARMACY #02755", "CVS PHARMACY #02756", "CVS PHARMACY #02782", "CVS PHARMACY #02783", "CVS PHARMACY # 10794", "CVS PHARMACY #02784", "CVS PHARMACY #01657", "CVS PHARMACY #04773", "CVS PHARMACY # 05088", "CVS PHARMACY #00835", "CVS PHARMACY #16537", "CVS PHARMACY # 07969", "CVS PHARMACY # 03047", "CVS PHARMACY # 10606", "CVS PHARMACY #07227", "CVS PHARMACY #08266"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "practiceaddress1": {"label": ["511 MONROE TPKE", "1239 E PUTNAM AVE", "3514 MAIN ST", "3141 WILSON BLVD", "1240 FARMINGTON AVE", "219 BROAD ST", "358 W MAIN ST", "777 MAIN ST", "20 BANK ST", "94 PARK ST", "229 HOPE ST", "734 BRIDGEPORT AVE", "1341 LONG STREET", "6400 LANSDOWNE CENTER", "714 HOPMEADOW ST", "1200 MAIN ST", "632 MIDDLE TPKE", "311 MAIN ST", "26 DAVIS ST", "22 WINDSOR AVE", "1055 FARMINGTON AVE", "526 MERIDEN RD", "1968 BLACK ROCK TPKE", "6 QUEEN ST", "47 HAZARD AVE", "844 JONES HILL RD", "2045 DIXWELL AVE", "26 WATERBURY RD", "1425 BARNUM AVE", "2000 N MAIN ST", "581 HIGHLAND AVE", "323 CROMWELL AVE", "35 PADANARAM RD", "1 HAWLEY LN", "225 SOUND BEACH AVE", "690 WETHERSFIELD AVE", "153 BROAD ST", "3440 WILKINSON BLVD", "2981 S. MILITARY HWY", "99 GREENWICH AVE", "110 MAIN STREET", "163 MOUNTAIN RD", "25 BROADWAY AVE", "279 BOSTON POST RD", "479 BLUE HILLS AVE", "964 POST RD", "106 BOSTON POST RD", "191 W MAIN ST", "900 N 6TH STREET", "300 E 8TH ST", "3222 S MAIN ST", "2703 ROUTE 130", "2025 FIRST AVENUE SE", "5046 S SHERIDAN RD", "4016 S STATE HIGHWAY 97", "591 S MILL ST", "27 S COAST HWY", "5518 MAGAZINE ST", "124 W WASHINGTON AVE", "701 W GROVE ST", "915 HILL ST", "220 N ALEXANDER AVE", "5905 DOLLARWAY RD", "2611 E OAKLAND AVE", "602 HIGHWAY 16 E", "12352 FM 1957", "101 N BUSINESS 60", "214 S MAIN ST", "304 E MAIN ST", "6 E SPRINGFIELD RD", "1219 E BUSTAMANTE ST", "2321 7TH AVE", "10601 S MAY AVE", "5711 ALTAMA AVE", "23122 SAINT FRANCIS BLVD", "15245 BLUEBIRD ST NW", "530 3RD ST NW", "100 ASMA BLVD", "2621 GREENHAVEN RD", "820 BAY AVE", "11983 TAMIAMI TRL N", "102 PRINCE ROYAL DR", "433 W ALLEN AVE", "151 GUY PARK AVE", "11001 ROOSEVELT BLVD N", "516 BECKLEY CROSSING SHPG CTR", "810 SE WASHINGTON ST", "81 NORTH ST", "60 MIDDLE ST", "3710 MAIN ST", "40 EAST ST", "1875 BOSTON AVE", "20 BURNSIDE AVE", "45 S MAIN ST", "241 MIDDLE TPKE W", "15 CHESTERFIELD RD", "57 PROVIDENCE PIKE", "11 FOREST ST", "66 HIGH RIDGE RD", "903 BENHAM ST", "2251 COMMERCE BLVD", "1142 N DESLOGE DR", "2401 N CENTRAL AVE", "PR #14 KM 51.5", "17703 VIRGINIA AVE", "24 SCHOOL ST.", "605 N MAIN ST", "6068 S 1ST ST", "3303 W 26TH ST STE 101", "11500 W BROAD ST", "5580 GEORGETOWN RD", "13723 N LITCHFIELD RD", "871 W OAKLAND PARK BLVD", "11 ASHFORD AVE", "6505 E 71ST ST", "950 E TAFT AVE", "1357 VETERANS MEMORIAL BLVD", "901 SW STATE ROUTE 150", "4500 OLD PASS RD", "11085 CATHELL RD", "411 KING ST", "3375 RINCONADA BLVD", "58 PENNSYLVANIA AVE", "905 S MAIN ST", "661 MAIN ST", "540 W MAIN ST", "369 MAIN ST", "330 GRASMERE AVE", "37 W MAIN ST", "1657 ROUTE 12", "111 ALBANY TPKE", "150 WASHINGTON STREET", "965 WHITE PLAINS RD", "281 CONNECTICUT AVE", "710 FAYETTEVILLE ST", "14095 RICHMOND HWY", "3140 HWY 280", "206 US HIGHWAY 117 S", "3555 COLORADO BLVD", "1812 HOLLOWAY STREET", "407 W MAIN STREET", "1124 PATTON AVE", "454 S MAIN ST", "140 NC 102 W", "28895 W IL RTE 120", "101 E ATKINS ST", "244 E 161ST ST", "4021 CROSS TIMBERS ROAD", "1645 CRANIUM DR", "1606 HIGHLAND COLONY PKWY", "1921 S 77 SUNSHINE STRIP", "17970 N TAMIAMI TRL", "40 FLOWING SPRINGS WAY", "2590 N TEXAS ST", "1086 JEFF RD NW", "81 US HIGHWAY 9", "3800 W MADISON ST STE 101", "7403 ALOMA AVE", "2719 GRAND AVE", "4720 S KIRKMAN RD", "4720 N MARINE DR", "4710 S WESTERN AVE", "1800 W INDIANTOWN RD", "12405 NE 85TH ST", "3601 W WILLIAM CANNON DR", "3200 E BAY DR", "19710 HOLZWARTH RD", "19302 KUYKENDAHL RD", "128 E BRANDON BLVD", "4320 26TH ST W", "6003 14TH ST W", "11000 VENTURA BLVD", "9307 N LAMAR BLVD", "305 N BREED ST", "1634 S FEDERAL HWY", "9865 GLADES RD", "3200 S FEDERAL HWY", "1851 CLINT MOORE RD", "4218 LINDELL BLVD", "1515 N ALEXANDER DR", "355 CAMPBELL AVE", "720 BRANCHVILLE RD", "891N COLONY RD", "8 ROYCE CIR", "162 WASHINGTON AVE", "644 W PUTNAM AVE", "24 PERSHING DR", "14 CANDLEWOOD LAKE RD", "1181 MAIN ST", "6 WILLARD RD", "146 SOUTH ST", "7 DURANT AVE", "7950 FAYETTEVILLE RD", "283 W IL ROUTE 173", "301 UNIVERSITY AVE", "3801 BISCAYNE BLVD", "101 N TENNESSEE STREET", "3 PLAISTOW RD", "8815 STAGECOACH RD", "1601 MAIN ST", "4003 W VERNON AVE", "4030 ANNAS RETREAT", "125 MORRIS AVE", "3501 N HALSTED ST", "302 ROUTE 25A", "5555W 79TH ST", "5496 UNIVERSITY PKWY", "3501 UNIQUE CIRCLE", "12020 CULEBRA RD", "4353 LAKE OTIS PKWY", "1801 W 11TH ST", "900 MERIDIAN E", "1455 NE DIVISION ST", "1302 E 38TH ST", "22 DEPOT HILL RD", "969 HIGH RIDGE RD", "10 LATHROP RD", "17 W MAIN ST", "1 MIFFLIN ST", "200 BUTLER CMNS", "467 MAIN ST", "341 COTTAGE GROVE RD", "372 W MAIN ST", "1044 BOULEVARD", "525 BUCKLAND RD", "656 NEW HAVEN AVE", "5550 FM 423", "401 S ROOSEVELT DR", "599 W 4TH ST", "1449 N ARIZONA BLVD", "6519 MAIN ST", "1125 2ND ST", "831 KUHIO HWY", "1810 S IRISH RD", "1515 W PARADISE DR", "10562 BELLEVILLE RD", "1445 E CENTRAL CT", "822 CITY AVE S", "505 S. PINE RIDGE AVE", "804 PIKE ST", "100 SARA WAY", "1501 WAGNER AVE", "4141 PEARL RD", "593 NEWFIELD AVE", "326 MAIN ST", "3151 UNIVERSITY AVE", "9256 SLAUSON AVE", "1830 N BROADWAY", "74955 US HIGHWAY 111", "25829 NARBONNE AVE", "1200 N SEPULVEDA BLVD", "9100 ROSEDALE HWY", "43525 10TH ST W", "1790 AIRLINE HWY", "3033 VINTAGE BLVD", "2417 TONGASS AVE", "3500 BRUMBACK BLVD", "340 WESTWIND DR", "131 EUREKA TWNCTR DR", "1309 NW 12TH AVE", "354 PRIVATE DRIVE 288", "825 E GREEN BAY AVE", "410 GRAND VALLEY BLVD", "100 SYCAMORE ESTATES DR", "2021 E INDEPENDENCE ST", "180 RIVER RD", "1733 2ND ST S", "205 HOUSE CARLSON DR", "4000 S BOLGER RD", "1903 COBBS FORD RD", "1420 HIGHWAY 231 S", "805 US HIGHWAY 27 S", "6812 N LAMAR BLVD", "804 W MARKET ST", "324 ROOSEVELT RD", "875 E NAPIER AVE", "4995 E US ROUTE 36", "1311 N STATE ROUTE 48", "1150 E SIBLEY BLVD", "1835 SAND LAKE RD", "1403 WAUKEGAN RD", "6297 PGA BLVD", "6200 W WILLIAM CANNON DR", "1213 PALM BAY RD", "175 MALABAR RD NW", "901 N ANKENY BLVD", "5896 CORTEZ RD W", "2501 S LAMAR BLVD", "6230 W. IRLO BRONSON MEMORIAL HWY", "5600 S 1ST ST", "5895 W PEORIA AVE", "900 SHELBY RD", "2310 MCCAUSLAND AVE", "3300 BROWN RD", "420 N FRAZIER ST", "7731 E NORTHERN LIGHTS BLVD", "301 N SANTA CLAUS LN", "MILE 1907 SEWARD HWY", "4000 W DIMOND BLVD", "500 RIVER ST", "17 US HIGHWAY 206", "11352 DORSETT RD", "169 TERRACE ST", "596 PROVIDENCE HWY", "1505 MERMAID AVE", "115 JOHNSON AVE N", "2249 86TH ST", "846 FORT DALE RD", "2846 E 101ST ST", "130 3RD ST NE", "3105 S MERIDIAN AVE", "3310 LAMAR AVE", "18049 MAGNOLIA ST", "2600 HWY 138", "611 STATE HIGHWAY 54", "1133 N MAIN ST", "38020 US HIGHWAY 18", "3915 GATEWAY DR", "920 US HWY 12", "W190 N9855 APPLETON AVE", "800 FOXCROFT AVE", "3333 US ROUTE 60", "254 CASSIDY BLVD", "4000 RED BANK RD", "18401 BUSINESS 13", "8118 PERRY HILLS CT", "2136 CAMPBELLSVILLE RD", "650 S TRUMAN BLVD", "3240 S WESTERN AVE", "414 KINGS HIGHWAY EAST", "5935 W ADDISON ST", "3915 S NOLAND RD", "600 W KARSCH BLVD", "1200 S MAIN ST", "10555 W OVERLAND RD", "955 N STATE ST", "2329 W CLAY ST", "13242 WICKER AVE", "5345 N IH 35", "4822 CATON FARM RD", "33975 DATE PALM DR", "11701 DETROIT AVE", "76 HEIGHTS RD", "W62N190 WASHINGTON AVE", "15738 W CAPITOL DR", "W156N11261 PILGRIM RD", "2204 NEVA RD", "603 W PINE ST", "9449 S HOWELL AVE", "2677 S 108TH ST", "S79W18885 JANESVILLE RD", "2420 E COLONIAL DR", "700 W COLLEGE AVE", "12101 SHELBYVILLE RD", "7914 FEGENBUSH LN", "8802 WEST COLONIAL DR", "12295 BISCAYNE BLVD", "8000 LAKE UNDERHILL RD", "20020 CORTEZ BLVD", "9320 LACKLAND RD", "8790 W MCNAB RD", "6401 W COMMERCIAL BLVD", "8800 W 95TH ST", "1723 E YOUNG CIR", "4200 WINNETKA AVE N", "4950 COUNTY RD 101", "655 NICOLLET MALL", "5428 LYNDALE AVE S", "780 E 9TH ST", "1600 N NOVA RD", "3705 HOLLYWOOD BLVD", "2280 N LAS VEGAS BLVD", "3325 N MAIN ST", "815 SUMMIT ST", "2311 OGDEN AVE", "23684 STRICKLAND DR", "200 MARQUIS PKWY", "4060 CAMPBELL AVE", "2601 RICHMOND HWY", "3336 WILSON BLVD", "2035 4TH AVE", "115 N 19TH AVE", "1902 BROOKS ST", "2402 GRAND AVE", "2001 10TH AVE S", "10100 BROOK RD", "1275 HARRISON AVE", "1300 E PARK AVE", "1311 GRAND AVE", "425 MAIN ST", "307 SE 4TH ST", "617 CENTRAL AVE", "3095 N MONTANA AVE", "2601 CENTRAL AVE", "1020 SENECA RD", "6010 PLANK RD", "603 N MONTANA AVE", "681 S OHIO ST", "1060 WOODS MILL PLZ", "452 WYTHE CREEK RD", "1788 N PIERCE ST", "3401 CHARLES STREET", "4310 FORTUNA CENTER PLZ", "1245 N MILITARY HWY", "15341 MONTANUS DR", "191 MARKET ST", "721 SOUTHPARK BLVD", "155 HOLT GARRISON PKWY", "2530 WEIR RD", "1316 GREENBRIER PKWY", "25 S GATEWAY DR", "3424 MORMON COULEE RD", "1250 WATERS PLACE", "136 JESSICA LN", "6238 HADLEY ST", "5722 GATEWOOD AVE", "7922 ROSECRANS AVE", "821 PROSPECT AVE", "940A SOUTHERN BLVD", "111 E CARSON ST", "4566 E FLORENCE AVE", "111 S 3RD ST", "1501 23RD AVE", "1075 W FM 3040", "13308 MERIDIAN E", "5137 E BASELINE RD", "3201 W GORE BLVD", "8440 E MCDONALD DR", "2611 W PARK ROW", "1222 E WOODLAND AVE", "301 S MAIN ST", "233 CARMICHAEL WAY", "12130 JEFFERSON AVE", "1700 SEMINOLE TRL", "17307 HULL STREET RD", "709 E MAIN ST", "12455 W BROAD ST", "2775 GODWIN BLVD", "2441 EISENHOWER AVE", "2704 OAKLAWN BLVD", "7235 BELL CREEK RD", "3149 E HARRY ST", "2440 N LEBANON ST", "1180 W 19TH ST", "8301 N CHURCH RD", "4201 N BELT HWY", "1212 S MADISON ST", "2100 N MAIN AVE", "885 E HIGHWAY 60", "11900 SAINT CHARLES ROCK RD", "2395 MAIN ST", "11601 E US 40 HWY", "2401 US HWY 14 EAST", "4024 ELKHART RD", "3270 TELEGRAPH RD", "16205 MILITARY TRL", "5245 RANGELINE SERVICE RD S", "3005 CHARITY ST", "7955 HWY N", "12380 SAINT CHARLES ROCK RD", "1749 WOODSTONE DR", "2120 W OSAGE ST", "3603 MCMASTERS AVE", "9433 MANCHESTER RD", "8101 CLAYTON RD", "4501 AIRLINE DR", "101 FLORIDA AVE SE", "880 S NEOSHO BLVD", "300 KEYSER AVE", "6250 PASEO DEL NORTE NE", "7776 COX LN", "188 UNION ST", "12659 S RIDGELAND AVE", "15514 W WADDELL RD", "806 NISSAN DR", "602 ALABAMA AVE", "2141 E BROADWAY RD", "52 JERICHO TPKE", "120 BERGEN AVE", "3900 S GRAND BLVD", "7402 N 56TH ST", "819 S SALINA ST", "2170 86TH ST", "2577 MALL RD", "950 MAIN ST", "1311 RING RD", "298 CENTRAL AVE", "2519 N 7TH ST", "7617 MYRTLE AVE", "3595 HIRAM DOUGLASVILLE HWY", "5501 W OREM DR", "3341 HALLS FERRY RD", "747 HIGHWAY 1 S", "765 E GLENN AVE", "54 CENTER SQ", "1615 N SAGINAW RD", "2985 CROOKS RD", "3100 N MARKET ST", "7994 US HIGHWAY 51 N", "3880 DICKERSON PIKE"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "practiceaddress2": {"label": ["UNIT B1", "CVS PHARMACY #01241", "CVS PHARMACY #06807", "STE E", "STE 11", "STE G", "STE B", "STE 203-E", "STE 203A", "STE 100C", "STE 2", "STE 116", "STE 1400", "BO PUEBLO SEC PUEBLO NORTE", "STE 100", "WALGREENS #5495", "# 36", "STE 260", "WALGREENS #5549", "STE A", "WALGREENS #5727", "WALGREENS #6153", "TOWER 2", "STE P2", "UNIT 8", "STE 4", "STE 202", "STE 907", "STE 107", "STE 102"], "data": [458, 1, 1, 2, 1, 1, 8, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]}, "practicecity": {"label": ["CHARLOTTE", "WESTMINSTER", "SILVER SPRING", "GLENDALE", "WICHITA FALLS", "FREMONT", "BREWSTER", "LA GRANGE", "RIDGEWOOD", "SAN DIEGO", "SCOTTSDALE", "FAR ROCKAWAY", "JACKSON HEIGHTS", "HACKENSACK", "BRONX", "LATHAM", "BRIDGEVILLE", "CHARLESTON", "MANCHESTER", "LONG ISLAND CITY", "SEARCY", "FRANKLIN", "BIRMINGHAM", "NEW ROCHELLE", "COLUMBUS", "PLANTATION", "NORWOOD", "BELLEROSE", "WATERTOWN", "MARYLAND HEIGHTS", "HOUSTON", "ROCK HILL", "WEBSTER", "PASADENA", "PHILADELPHIA", "DENVER", "CHATSWORTH", "OZONE PARK", "ROCHESTER", "OKLAHOMA CITY", "FORT MYERS", "CAPE CORAL", "NAPLES", "HENDERSON", "NEW YORK", "DALLAS", "DEARBORN", "TUSTIN", "CORONA", "FREEPORT", "GREENACRES", "WOOSTER", "VALLEY VILLAGE", "VINITA", "TAYLOR", "CARTHAGE", "ROYAL PALM BEACH", "LOUISVILLE", "STARKVILLE", "MALDEN", "SPARTANBURG", "SOUTH OZONE PARK", "PRINCETON", "MIAMI", "NORFOLK", "BROOKLYN", "ENCINO", "NORTH LITTLE ROCK", "PATERSON", "EDISON", "SANTA ANA", "BILLINGS", "BUFFALO", "ASTORIA", "HICKSVILLE", "AUSTIN", "CENTRALIA", "KARLSTAD", "TYLER", "MORRIS", "MAPLE GROVE", "GRANITE FALLS", "MILACA", "SPRINGFIELD", "THIEF RIVER FALLS", "BEMIDJI", "MOOSE LAKE", "MAHNOMEN", "FERTILE", "WALKER", "GRAND RAPIDS", "MADISON", "SANDSTONE", "MONTEVIDEO", "SLAYTON", "PIERZ", "GREENSBORO", "HIBBING", "BENTON", "SPANISH FORT", "MOBILE", "DIBERVILLE", "CROOKSTON", "MONROE", "WASECA", "RALEIGH", "ASHBURN", "YONKERS", "FLUSHING", "WINCHESTER", "GERMANTOWN", "FERGUS FALLS", "PEMBROKE PINES", "GOUVERNEUR", "N SYRACUSE", "BAGLEY", "BRAINERD", "BALL GROUND", "SHERIDAN", "HOLLYWOOD", "CONCORD", "CATOOSA", "RED LAKE FALLS", "COLD SPRING", "WADENA", "LA CROSSE", "WILMINGTON", "WILLISTON", "ADA", "FORT PIERCE", "MECHANICSBURG", "CARLISLE", "SAN MARCOS", "CORAL SPRINGS", "LAS VEGAS", "PLYMOUTH", "HUGHES SPRINGS", "JAMAICA", "WESTBROOK", "EAU CLAIRE", "LEHIGHTON", "BRECKENRIDGE", "SALEM", "FAIRFAX", "LYNCHBURG", "FREDERICKSBURG", "CHARLOTTESVILLE", "HARRISONBURG", "FREDERICK", "PUEBLO", "HOLTON", "LAFAYETTE", "SAN BENITO", "VAN NUYS", "CANOGA PARK", "PERTH AMBOY", "SUNRISE", "WELLESLEY", "SILVER CITY", "BOSTON", "ROANOKE", "BELTON", "LUBBOCK", "HUTTO", "SPRING BRANCH", "LAREDO", "HUNTSVILLE", "KATY", "SUGAR LAND", "EL PASO", "CHELSEA", "FAIR OAKS RANCH", "CHATHAM", "MARCY", "WASHINGTON", "LATROBE", "LANCASTER", "BURLESON", "MEXIA", "BROWNSVILLE", "LEANDER", "DORCHESTER", "BROCKTON", "BLACKSTONE", "HARWICH PORT", "WALPOLE", "LEOMINSTER", "EAST LONGMEADOW", "SOUTH YARMOUTH", "FRAMINGHAM", "CAMBRIDGE", "EAST FALMOUTH", "EAST WAREHAM", "NORTH READING", "METHUEN", "WESTFORD", "SOMERVILLE", "WALTHAM", "ARLINGTON", "WAKEFIELD", "HYANNIS", "SOUTH DENNIS", "TAUNTON", "IRVING", "THE WOODLANDS", "WARE", "JAMAICA PLAIN", "BEVERLY", "WAYLAND", "STOUGHTON", "MILLIS", "WEYMOUTH", "LITTLETON", "HYDE PARK", "CHESTNUT HILL", "SAN ANTONIO", "DRACUT", "ATLANTA", "LAKEVILLE", "LEXINGTON", "W ROXBURY", "HAVERHILL", "ATHOL", "UXBRIDGE", "MEDFORD", "WESTFIELD", "NORTHBOROUGH", "SANDWICH", "PEABODY", "MEDFIELD", "MIDDLEBORO", "MILFORD", "GREENFIELD", "PALATINE", "ROUND LAKE", "HARWICH", "ASHLAND", "LANTANA", "RICHARDSON", "LAKEWOOD", "ROSENBERG", "ARVADA", "CYPRESS", "BOULDER", "SUPERIOR", "GRAND JUNCTION", "ROSHARON", "HIGHLANDS RANCH", "COLORADO SPRINGS", "AURORA", "ENGLEWOOD", "LA MARQUE", "SILVERTHORNE", "RICHMOND", "ROYSE CITY", "HASLET", "CIBOLO", "CONROE", "MANSFIELD", "CHICAGO", "MOKENA", "ELGIN", "DOWNERS GROVE", "JOLIET", "OAK PARK", "CAROL STREAM", "JACKSONVILLE", "EL CERRITO", "CARY", "HILLSIDE", "MAHOMET", "PARK RIDGE", "OLYMPIA FIELDS", "RAYNHAM", "MARLBOROUGH", "AMHERST", "FALL RIVER", "GREELEY", "NORMAL", "RIVERDALE", "NILES", "MONTGOMERY", "MELISSA", "MARBLE FALLS", "WACO", "RAYMONDVILLE", "ALAMO HEIGHTS", "ALTON", "LAKE IN THE HILLS", "DANVILLE", "BLOOMINGTON", "LOCKPORT", "SCHAUMBURG", "ROWLEY", "ALLSTON", "GLOUCESTER", "FOXBORO", "SOUTH DARTMOUTH", "OXFORD", "MARSTONS MILLS", "QUINCY", "BRAINTREE", "HOLYOKE", "SEEKONK", "LONGMEADOW", "SOUTH ATTLEBORO", "NORTH EASTON", "NEWTON", "DANVERS", "PEMBROKE", "HUDSON", "MONTEREY", "RANTOUL", "OAKLAND", "DAVIS", "STOCKTON", "SAN JOSE", "ENCINITAS", "SANTA CLARA", "TEMECULA", "ATASCADERO", "VACAVILLE", "TURLOCK", "CLOVIS", "COVINA", "ALAMEDA", "WALNUT CREEK", "EL CAJON", "SONORA", "PLAINFIELD", "FRESNO", "LA MESA", "AUBURN", "SONOMA", "RANCHO MIRAGE", "GRASS VALLEY", "GOLETA", "PORTERVILLE", "OROVILLE", "MILPITAS", "SANTA MARIA", "WATSONVILLE", "NATIONAL CITY", "DALY CITY", "SARATOGA", "SEBASTOPOL", "GREENBRAE", "MADERA", "UKIAH", "FORT WORTH", "HOPKINTON", "LOWELL", "W NEWTON", "BURLINGTON", "EAST BOSTON", "BRIGHTON", "BEDFORD", "WINCHENDON", "DEDHAM", "CHARLESTOWN", "WEST BRIDGEWATER", "ALBUQUERQUE", "DUMAS", "DECATUR", "FRISCO", "BUDA", "NORTH BILLERICA", "ACTON", "NEEDHAM", "CAMARILLO", "SUNNYVALE", "EVANSVILLE", "HONOLULU", "SAN MATEO", "WEST COVINA", "PETALUMA", "GLENDORA", "CHULA VISTA", "CARMICHAEL", "MERCED", "GETTYSBURG", "BROOMALL", "DOYLESTOWN", "SEATTLE", "WEST GROVE", "YORK", "GILBERTSVILLE", "NORTH EAST", "ELSA", "CAGUAS", "LANHAM", "CHESAPEAKE BEACH", "NEW ORLEANS"], "data": [1, 3, 1, 1, 1, 2, 1, 1, 2, 4, 1, 1, 2, 1, 6, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 1, 1, 4, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 7, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 7, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "practicestate": {"label": ["NC", "CA", "MD", "NY", "TX", "WA", "KY", "AZ", "NJ", "PA", "SC", "NH", "AR", "TN", "AL", "MS", "FL", "MO", "MA", "CO", "MN", "OK", "NV", "MI", "OH", "VA", "MT", "IL", "GA", "WY", "WI", "VT", "KS", "LA", "NM", "IN", "HI", "PR"], "data": [5, 71, 5, 38, 68, 2, 2, 1, 5, 20, 2, 2, 2, 1, 3, 6, 12, 1, 126, 19, 33, 3, 3, 1, 1, 9, 1, 36, 4, 2, 3, 1, 1, 2, 4, 3, 1, 1]}, "practicezip9code": {"label": ["705.0 - 99902224.5", "99902224.5 - 199803744.0", "199803744.0 - 299705263.5", "299705263.5 - 399606783.0", "399606783.0 - 499508302.5", "499508302.5 - 599409822.0", "599409822.0 - 699311341.5", "699311341.5 - 799212861.0", "799212861.0 - 899114380.5", "899114380.5 - 999015900"], "data": [118, 17, 57, 62, 31, 51, 67, 46, 15, 36]}, "telephonenumber": {"label": ["-2141564683.0 - -1712887730.7", "-1712887730.7 - -1284210778.4", "-1284210778.4 - -855533826.1", "-855533826.1 - -426856873.8", "-426856873.8 - 1820078.5", "1820078.5 - 430497030.8", "430497030.8 - 859173983.1", "859173983.1 - 1287850935.4", "1287850935.4 - 1716527887.7", "1716527887.7 - 2145204840.0"], "data": [46, 61, 54, 48, 52, 12, 93, 56, 9, 69]}, "specialitieslist": {"label": ["Pharmacy", "Medical Supply Company Other", "Certified Other|Pharmacy", "MSC With Respiratory Therapist", "MSC With Orthotic-Prosthetic", "Pharmacy|Grocery Store", "Pharmacy|Optician", "Medical Supply Company Other|Pharmacy|Optician", "Medical Supply Company Other|Orthotic Personnel", "Optometrist", "Medical Supply Company Other|MSC With Respiratory Therapist", "Optometrist|Optician", "Prosthetic Personnel", "Medical Supply Company Other|MSC With Orthotic Personnel", "MSC With Orthotic Personnel"], "data": [405, 6, 4, 1, 3, 21, 50, 1, 1, 2, 2, 1, 1, 1, 1]}, "providertypelist": {"label": ["OXYGEN & EQUIPMENT", "PHYSICIAN ASSISTANT", "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "OXYGEN & EQUIPMENT|PEDORTHIC PERSONNEL|MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "PEDORTHIC PERSONNEL"], "data": [493, 1, 2, 1, 3]}, "supplieslist": {"label": ["Orthoses: Off-The-Shelf", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Limb Prostheses", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Heat & Cold Applications|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Nebulizer Equipment and/or Supplies", "Orthoses: Custom Fabricated|Limb Prostheses", "Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions", "Immunosuppressive Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies", "Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Continuous Positive Airway Pressure (CPAP) Devices|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Continuous Passive Motion (CPM) Devices|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Orthoses: Off-The-Shelf", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Seat Lift Mechanisms|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Pneumatic Compression Devices and/or Supplies|Ultraviolet Light Devices and/or Supplies|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "Canes and/or Crutches|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Surgical Dressings", "Immunosuppressive Drugs|Nebulizer Drugs", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Urological Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies", "Pneumatic Compression Devices and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Limb Prostheses|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Urological Supplies", "Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies|Surgical Dressings", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings|Lymphedema Compression Treatment Items", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings|Lymphedema Compression Treatment Items", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Nebulizer Drugs", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Nebulizer Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Lymphedema Compression Treatment Items", "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Nebulizer Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Heat & Cold Applications|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Seat Lift Mechanisms|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings|Diabetic Shoes and Inserts", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Infusion Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings"], "data": [2, 1, 2, 39, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 5, 1, 3, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 227, 86, 1, 1, 1, 1]}, "latitude": {"label": ["18.0 - 22.6", "22.6 - 27.2", "27.2 - 31.8", "31.8 - 36.4", "36.4 - 41.0", "41.0 - 45.6", "45.6 - 50.2", "50.2 - 54.8", "54.8 - 59.4", "59.4 - 64.0"], "data": [3, 27, 41, 104, 126, 179, 13, 0, 2, 5]}, "longitude": {"label": ["-157.0 - -147.9", "-147.9 - -138.8", "-138.8 - -129.7", "-129.7 - -120.6", "-120.6 - -111.5", "-111.5 - -102.4", "-102.4 - -93.3", "-93.3 - -84.2", "-84.2 - -75.1", "-75.1 - -66.0"], "data": [1, 0, 0, 35, 41, 28, 96, 67, 53, 179]}, "is_contracted_for_cba": {"label": ["0"], "data": [500]}, "participationbegindate_dayofmonth": {"label": ["1.0 - 3.6", "3.6 - 6.2", "6.2 - 8.8", "8.8 - 11.4", "11.4 - 14.0", "14.0 - 16.6", "16.6 - 19.2", "19.2 - 21.8", "21.8 - 24.4", "24.4 - 27"], "data": [437, 7, 3, 11, 5, 10, 7, 10, 2, 8]}, "participationbegindate_month": {"label": ["1", "12", "11", "10"], "data": [416, 15, 68, 1]}, "participationbegindate_year": {"label": ["2024", "2023"], "data": [100, 400]}, "businessname_stringindexer_transform": {"label": ["0.0 - 12.6", "12.6 - 25.2", "25.2 - 37.8", "37.8 - 50.4", "50.4 - 63.0", "63.0 - 75.6", "75.6 - 88.2", "88.2 - 100.8", "100.8 - 113.4", "113.4 - 126.0"], "data": [2, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, "practicename_stringindexer_transform": {"label": ["467.0"], "data": [500]}, "practiceaddress1_stringindexer_transform": {"label": ["500.0"], "data": [500]}, "practiceaddress2_stringindexer_transform": {"label": ["0.0 - 2.9", "2.9 - 5.8", "5.8 - 8.7", "8.7 - 11.6", "11.6 - 14.5", "14.5 - 17.4", "17.4 - 20.3", "20.3 - 23.2", "23.2 - 26.1", "26.1 - 29.0"], "data": [428, 3, 5, 1, 0, 0, 0, 2, 0, 0]}, "practicecity_stringindexer_transform": {"label": ["0.0 - 39.7", "39.7 - 79.4", "79.4 - 119.1", "119.1 - 158.8", "158.8 - 198.5", "198.5 - 238.2", "238.2 - 277.9", "277.9 - 317.6", "317.6 - 357.3", "357.3 - 397.0"], "data": [117, 66, 40, 39, 40, 40, 39, 40, 40, 39]}, "practicestate_stringindexer_transform": {"label": ["0.0 - 3.7", "3.7 - 7.4", "7.4 - 11.1", "11.1 - 14.8", "14.8 - 18.5", "18.5 - 22.2", "22.2 - 25.9", "25.9 - 29.6", "29.6 - 33.3", "33.3 - 37.0"], "data": [303, 108, 32, 14, 13, 10, 6, 6, 4, 4]}, "specialitieslist_stringindexer_transform": {"label": ["0.0 - 1.4", "1.4 - 2.8", "2.8 - 4.2", "4.2 - 5.6", "5.6 - 7.0", "7.0 - 8.4", "8.4 - 9.8", "9.8 - 11.2", "11.2 - 12.6", "12.6 - 14.0"], "data": [425, 0, 31, 2, 9, 17, 1, 6, 3, 1]}, "providertypelist_stringindexer_transform": {"label": ["0.0"], "data": [500]}, "supplieslist_stringindexer_transform": {"label": ["1.0 - 6.5", "6.5 - 12.0", "12.0 - 17.5", "17.5 - 23.0", "23.0 - 28.5", "28.5 - 34.0", "34.0 - 39.5", "39.5 - 45.0", "45.0 - 50.5", "50.5 - 56.0"], "data": [352, 7, 2, 1, 0, 1, 0, 0, 2, 135]}}}, "ManualFE": {"FE": [{"transformationsData": [{"transformation_label": "novalue"}], "feature": "provider_id", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "21091081.02", "stddev": "2231189.01", "min": "20303219", "max": "34359440", "missing": "0"}, "updatedLabel": "provider_id"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "acceptsassignement", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.78", "stddev": "0.41", "min": "0", "max": "1", "missing": "0"}, "updatedLabel": "acceptsassignement"}, {"transformationsData": [{"feature_label": "participationbegindate", "transformation_label": "Extract Date"}], "feature": "participationbegindate", "type": "date", "selected": true, "replaceby": "random", "stats": {"count": "", "mean": "", "stddev": "", "min": "", "max": "", "missing": "0"}, "transformation": [{"transformation": "Extract Date", "selectedAsDefault": 1}], "generated": false, "updatedLabel": "participationbegindate"}, {"transformationsData": [{"feature_label": "businessname", "transformation_label": "String Indexer"}], "feature": "businessname", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "39 PHARMACY CORPORATION", "max": "YONKERS EXPRESS PHARMACY INC", "missing": "0", "distinct": "127"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "businessname"}, {"transformationsData": [{"feature_label": "practicename", "transformation_label": "String Indexer"}], "feature": "practicename", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "86 BOBO PHARMACY INC", "max": "WONDERFUL RX PHARMACY INC", "missing": "0", "distinct": "457"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicename"}, {"transformationsData": [{"feature_label": "practiceaddress1", "transformation_label": "String Indexer"}], "feature": "practiceaddress1", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "1 HAWLEY LN", "max": "W62N190 WASHINGTON AVE", "missing": "0", "distinct": "500"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress1"}, {"transformationsData": [{"feature_label": "practiceaddress2", "transformation_label": "String Indexer"}], "feature": "practiceaddress2", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "77", "mean": "", "stddev": "", "min": "ALWIFE PLAZA", "max": "UNIT B1", "missing": "423", "distinct": "63"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress2"}, {"transformationsData": [{"feature_label": "practicecity", "transformation_label": "String Indexer"}], "feature": "practicecity", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "ABBEVILLE", "max": "WOODBRIDGE", "missing": "0", "distinct": "397"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicecity"}, {"transformationsData": [{"feature_label": "practicestate", "transformation_label": "String Indexer"}], "feature": "practicestate", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "AK", "max": "WV", "missing": "0", "distinct": "38"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicestate"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "practicezip9code", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "420303669.23", "stddev": "287747118.78", "min": "705", "max": "999015900", "missing": "0"}, "updatedLabel": "practicezip9code"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "telephonenumber", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "6144013752076.46", "stddev": "136516631952037.42", "min": "2014881230", "max": "3052621292106456", "missing": "0"}, "updatedLabel": "telephonenumber"}, {"transformationsData": [{"feature_label": "specialitieslist", "transformation_label": "String Indexer"}], "feature": "specialitieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "494", "mean": "", "stddev": "", "min": "Certified Other|MSC With Respiratory Therapist|Pharmacy", "max": "Prosthetic Personnel", "missing": "6", "distinct": "15"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "specialitieslist"}, {"transformationsData": [{"feature_label": "providertypelist", "transformation_label": "String Indexer"}], "feature": "providertypelist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "23", "mean": "", "stddev": "", "min": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "max": "PHYSICIAN ASSISTANT", "missing": "498", "distinct": "1"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "providertypelist"}, {"transformationsData": [{"feature_label": "supplieslist", "transformation_label": "String Indexer"}], "feature": "supplieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "max": "Surgical Dressings", "missing": "0", "distinct": "93"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "supplieslist"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "latitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "38.25", "stddev": "5.86", "min": "18.13874", "max": "64.75669", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "latitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "longitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "-89.16", "stddev": "17.29", "min": "-157.8097", "max": "-66.03487", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "longitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "is_contracted_for_cba", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.0", "stddev": "0.0", "min": "0", "max": "0", "missing": "0"}, "updatedLabel": "is_contracted_for_cba"}, {"feature": "participationbegindate_dayofmonth", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "2.83", "stddev": "5.33", "min": "1", "max": "27", "missing": "0"}, "updatedLabel": "participationbegindate_da..."}, {"feature": "participationbegindate_month", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "2.75", "stddev": "1.93", "min": "1", "max": "7", "missing": "0"}, "updatedLabel": "participationbegindate_mo..."}, {"feature": "participationbegindate_year", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "numeric", "generated": true, "selected": true, "stats": {"count": "500", "mean": "2023.2", "stddev": "0.4", "min": "2023", "max": "2024", "missing": "0"}, "updatedLabel": "participationbegindate_ye..."}, {"feature": "businessname_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "126.48", "stddev": "7.69", "min": "6.0", "max": "127.0", "missing": "0"}, "updatedLabel": "businessname_stringindexe..."}, {"feature": "practicename_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "467.0", "stddev": "0.0", "min": "467.0", "max": "467.0", "missing": "0"}, "updatedLabel": "practicename_stringindexe..."}, {"feature": "practiceaddress1_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "249.5", "stddev": "144.48", "min": "0.0", "max": "499.0", "missing": "0"}, "updatedLabel": "practiceaddress1_stringin..."}, {"feature": "practiceaddress2_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "3.87", "stddev": "9.88", "min": "0.0", "max": "30.0", "missing": "0"}, "updatedLabel": "practiceaddress2_stringin..."}, {"feature": "practicecity_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "340.95", "stddev": "121.12", "min": "0.0", "max": "397.0", "missing": "0"}, "updatedLabel": "practicecity_stringindexe..."}, {"feature": "practicestate_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "4.69", "stddev": "6.69", "min": "0.0", "max": "37.0", "missing": "0"}, "updatedLabel": "practicestate_stringindex..."}, {"feature": "specialitieslist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "0.98", "stddev": "2.72", "min": "0.0", "max": "15.0", "missing": "0"}, "updatedLabel": "specialitieslist_stringin..."}, {"feature": "providertypelist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "0.0", "stddev": "0.0", "min": "0.0", "max": "0.0", "missing": "0"}, "updatedLabel": "providertypelist_stringin..."}, {"feature": "supplieslist_stringindexer_transform", "transformation": [{"transformation": "novalue", "selectedAsDefault": 0}], "transformationsData": [{"transformation_label": "novalue"}], "type": "real", "selected": true, "stats": {"count": "500", "mean": "16.88", "stddev": "24.05", "min": "1.0", "max": "56.0", "missing": "0"}, "updatedLabel": "supplieslist_stringindexe..."}], "message": "Successfully executed", "status": 1, "userid": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "autoFE_flag": true, "stageId": "6781cddd8402090cd8fff5cc", "FESamplePath": "/FileStore/platform/sampleData/6781cddd8402090cd8fff5cc_AutoFE/part-00000-25ab2324-b510-4322-a426-e050905760c3-c000.csv", "manualfesamplepath": "/FileStore/platform/sampleData/6781cddd8402090cd8fff5cc_AutoFE/part-00000-25ab2324-b510-4322-a426-e050905760c3-c000.csv", "samplecount": 500, "originalcount": 59566, "dataPercentage": "10", "FEGraph": [{"values": {"label": ["20310995.0 - 21715591.1", "21715591.1 - 23120187.2", "23120187.2 - 24524783.3", "24524783.3 - 25929379.4", "25929379.4 - 27333975.5", "27333975.5 - 28738571.6", "28738571.6 - 30143167.7", "30143167.7 - 31547763.8", "31547763.8 - 32952359.9", "32952359.9 - 34356956"], "data": [495, 0, 0, 1, 1, 0, 0, 0, 0, 3]}, "label": "provider_id", "count": 10, "min": 20310995, "max": 34356956}, {"values": {"label": ["1", "0"], "data": [390, 110]}, "label": "acceptsassignement", "count": 2, "min": "0", "max": "1"}, {"values": {"label": ["2023-01-01 00:00:00", "2022-03-01 00:00:00", "2020-05-21 00:00:00", "2020-05-20 00:00:00", "2020-05-19 00:00:00", "2020-05-18 00:00:00", "2020-05-16 00:00:00", "2020-05-15 00:00:00", "2017-01-01 00:00:00", "2014-07-01 00:00:00", "2019-01-01 00:00:00", "2017-01-27 00:00:00", "2017-01-26 00:00:00", "2017-01-25 00:00:00", "2017-01-23 00:00:00", "2017-01-20 00:00:00", "2017-01-19 00:00:00", "2017-01-18 00:00:00", "2017-01-17 00:00:00", "2017-01-13 00:00:00", "2017-01-10 00:00:00", "2017-01-09 00:00:00", "2017-01-06 00:00:00", "2017-01-05 00:00:00", "2020-05-13 00:00:00", "2020-05-12 00:00:00", "2020-05-08 00:00:00", "2020-05-07 00:00:00", "2017-01-14 00:00:00", "2017-01-11 00:00:00", "2017-01-04 00:00:00", "2017-01-03 00:00:00", "2020-05-14 00:00:00", "2020-05-11 00:00:00"], "data": [152, 199, 1, 8, 3, 1, 1, 5, 18, 58, 9, 6, 1, 1, 2, 1, 1, 1, 1, 3, 1, 3, 4, 2, 1, 1, 2, 1, 1, 2, 1, 1, 3, 5]}, "label": "participationbegindate", "count": 34, "min": "", "max": ""}, {"values": {"label": ["RELIANT MEDICAL EQUIPMENT DISTRIBUTORS", "39 PHARMACY CORPORATION", "NV HEALTH, LLC", "MYRTLE RX PLUS INC", "LONE STAR PROSTHETICS, WICHITA FALLS, LLC", "S8 MEDICAL EQUIPMENT LLC", "QUICKRX LLC", "APPARO, INC.", "SDPM UNITED PHARMACY INC", "PROMEDICA MEDICAL SUPPLY INC", "ORTHO ELITE PERFORMANCE & RECOVERY PLLC", "WILLOW PHARMACY CORP", "HISPANOS PHARMACY INC", "HACKENSACK PHARMACY INC", "BRONX HEALTHPLUS RX INC", "FRESH POND PHARMACY INC", "SHIFA SPECIALTY INC", "NEB DOCTORS OF WESTERN PENNSYLVANIA LLC", "GOOD MERCY PHARMACY CORP", "PROSTHETIC AND ORTHOTIC ASSOCIATES OF SOUTH CAROLINA LLC", "MOBIUS MOBILITY, LLC", "COMFORT RX PHARMACY CORP", "SEARCY RX LLC", "OPTUM PHARMACY 705, LLC", "EMPIRE PHARMACY INC", "THRIVE SPECIALTY PHARMACY LLC", "FIT TO GO LLC", "JERICHO CHEMISTS INC", "PARKVIEW NOCO RX, LLC", "MAC RX OF MISSOURI LLC", "FIRSTCARE MEDICAL SUPPLY LLC", "JADD PHARMACY CORP", "SNEDS PEDORTHICS LLC", "PROSUM DME LLC", "S S HEALTHCARE INC", "ALLIANCE MEDICAL SUPPLY LLC", "OEI PROSTHETICS AND ORTHOTICS", "SINGH PHARMACY INC", "ROCHESTER HOME INFUSION INC", "RXMTS LLC", "SOUTHWEST FLORIDA EYE CARE, L.L.C.", "INFUSED THERAPIES LLC", "HEALARIAN LLC", "DIVINE MEDICAL SUPPLY AND EQUIPMENTS LLC", "PHOENIX MEDICAL EQUIPMENT, INC.", "HEAL MEDICAL SUPPLY LLC", "ST. RAPHAEL PHARMACY INC", "CHUBBUCK'S PHARMACY INC", "SEVENTEEN MEDICAL SUPPLY LLC", "WOOSTER PHARMACY LLC", "SHIV HARI RX INC", "MEDIX SUPPLIES INC", "MR PHARMACIST LLC", "BRISTOL CARE PHARMACY LLC", "VINITA FAMILY EYECARE, PLLC", "MS EYE CARE PA", "PICC LINES PLUS LLC", "BOSTON DME COMPANY LLC", "PEACH VALLEY PHARMACY LLC", "ROCKAWAY DRUGS RX INC", "C AND M HEALTH INC", "ILS HHA OF REGION 11 LLC", "POLARIS PHARMACY SERVICES OF VIRGINIA LLC", "STARLIGHT RX INC", "SHALOM RX INC", "ARKANSAS COMPRESSION SHOP LLC", "BARGAIN MEDICAL SUPPLY, INC", "MAASP  INC.", "DEVINES PHARMACY INC", "VIVITAL, INC.", "BILLINGS FAMILY EYECARE SHILOH PLLC", "STARLING PHARMACY II, INC.", "ASTORIA RX HOLDINGS INC", "DUFFY RX LLC", "FALCON MED EQPT LLC", "WB DRUG COMPANY INC", "THRIFTY DRUG STORES INC", "DOVE MEDICAL SUPPLY RETAIL LLC", "WENDY SOWELL GIBSON OD", "PREMIER KIDS CARE, INC.", "SAAD ENTERPRISES, INC.", "BOTICA PHARMACY CORP.", "DYNAMEDICS MEDICAL SOLUTIONS, INC.", "ROBERTS HOME MEDICAL LLC.", "YONKERS EXPRESS PHARMACY INC", "BLOOMING LIGHT RX INC", "SOUTH BROWARD HOSPITAL DISTRICT", "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "BALL GROUND PHARMACY LLC", "HOSPITAL PHARMACY INC", "CONCORD PHARMACY INC", "PHARMCAREOK OF TULSA, INC.", "OXYTECH OF NORTH CAROLINA, LLC", "J&G MEDICAL SUPPLIES", "ACCESS PT PENNSYLVANIA", "PHARMACY ON U LLC", "ADVANCED MEDICAL SUPPLY INC", "DIABETIC SOLUTIONS, INC.", "SIERRA HOME MEDICAL PRODUCTS, INC", "ADVANCED EYECARE, SC", "MED-SHOP OF HUGHES SPRINGS INC", "LIBERTY RX INC", "MEDI CITY PHARMACY INC", "U HEALTH PHARMACY LLC", "AB MEDICAL LLC", "CORONA PHARMACY RX INC", "STRENGTH GIVER PHARMACY LLC", "MEDICAL PHARMACY PA", "INFUSIONS SERVICES OF LOUISIANA LLC", "PINK PROMISES & DME LLC", "CHARITY COMFORT CARE MEDICAL SUPPLIES", "CPR DME LLC", "APEX RX INC", "ROYAL MEDICAL SUPPLY LLC", "SAINT MARY AND JESSIE LLC", "BUCKNER NEIGHBORHOOD PHARMACY INC", "PHARMSCRIPT OF FLORIDA LLC", "CVS PHARMACY INC", "HIGHLAND PARK CVS LLC", "LONGS DRUG STORES CALIFORNIA LLC", "HOOK- SUPERX, L.L.C..", "PENNSYLVANIA CVS PHARMACY LLC", "WASHINGTON CVS PHARMACY LLC", "GEORGIA CVS PHARMACY, L.L.C.", "PUERTO RICO CVS PHARMACY LLC", "MARYLAND CVS PHARMACY LLC.", "LOUISIANA CVS PHARMACY LLC"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 32, 1, 1, 3, 3, 1, 1, 10, 1, 1, 1, 14, 1, 2, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 203, 34, 60, 3, 9, 1, 2, 1, 2, 1]}, "label": "businessname", "count": 127, "min": "39 PHARMACY CORPORATION", "max": "YONKERS EXPRESS PHARMACY INC"}, {"values": {"label": ["RELIANT MEDICAL EQUIPMENT DIST", "39 PHARMACY", "NV HEALTH, LLC", "MYRTLE RX PLUS INC", "LONE STAR PROSTHETICS, WICHITA FALL", "S8 MEDICAL EQUIPMENT LLC", "BREWSTER PHARMACY", "EVERCARE MEDICAL SOLUTIONS INC", "SDPM UNITED PHARMACY INC", "PROMEDICA MEDICAL SUPPLY INC", "ORTHO ELITE PERFORMANCE & RECOVERY", "WILLOW PHARMACY CORP", "HISPANOS PHARMACY INC", "HACKENSACK PHARMACY", "BRONX HEALTHPLUS RX INC", "FRESH POND PHARMACY INC", "SHIFA SPECIALTY INC.", "NEB DOCTORS OF WESTERN PENNSYLVANIA", "GOOD MERCY PHARMACY CORP", "PROSTHETIC AND ORTHOTIC ASSOC OF SC", "MOBIUS MOBILITY LLC", "COMFORT RX PHARMACY CORP", "MEDICAL CENTER PHARMACY", "OPTUM PHARMACY 705, LLC", "NEW ROCHELLE PHARMACY", "THRIVE SPECIALTY PHARMACY LLC", "FIT TO GO LLC", "JERICHO CHEMISTS INC.", "PARKVIEW NOCO RX, LLC", "MAC RX OF MISSOURI, LLC", "FIRSTCARE MEDICAL SUPPLY LLC", "ROCK HILL PHARMACY", "SNEDS PEDORTHIC LLC", "PROSUM DME", "S S HEALTHCARE INC", "ALLIANCE MEDICAL SUPPLY LLC", "HQ", "SINGH PHARMACY INC.", "ROCHESTER HOME INFUSION", "RXMTS", "SOUTHWEST FLORIDA EYE CARE", "SOUTHWEST FLORIDA EYE CARE LLC", "VITAL CARE OF HENDERSON", "HEALARIAN PHARMACY", "DIVINE MEDICAL SUPPLY AND EQUIPMENT", "PHOENIX MEDICAL EQUIPMENT INC", "HEAL MEDICAL SUPPLY LLC", "ST. RAPHAEL CHEMISTS", "CHUBBUCK'S PHARMACY INC", "SEVENTEEN MEDICAL SUPPLY LLC", "WOOSTER PHARMACY LLC", "SHIV HARI RX INC", "MEDIX SUPPLIES INC", "MR PHARMACIST LLC", "BRISTOL CARE PHARMACY LLC", "VINITA FAMILY EYECARE, PLLC", "MS EYE CARE PA", "MISSISSIPPI EYE CARE CARTHAGE", "PICC LINES PLUS LLC", "LOUISVILLE EYE CARE", "BOSTON DME COMPANY LLC", "U SAVE IT PHARMACY PEACH VALLEY", "ROCKAWAY DRUGS RX INC", "C AND M HEALTH INC", "ILS HHA OF REGION 11 LLC", "POLARIS PHARMACY SERVICES OF VIRGIN", "STARLIGHT RX INC", "SHALOM PHARMACY", "ARKANSAS COMPRESSION SHOP LLC", "BARGAIN MEDICAL SUPPLY, INC", "MAA PHARMACY", "DEVINE'S PHARMACY", "VIVITAL, INC.", "BILLINGS FAMILY EYECARE SHILOH", "STARLING PHARMACY II, INC.", "ASTORIA RX HOLDINGS INC", "DUFFY RX LLC", "FALCON MED EQPT LLC", "WB DRUG COMPANY INC", "THRIFTY WHITE DRUG #756", "THRIFTY WHITE PHARMACY #768", "THRIFTY WHITE PHARMACY #742", "THRIFTY WHITE DRUG #762", "THRIFTY WHITE DRUG #760", "THRIFTY WHITE PHARMACY 767", "THRIFTY WHITE DRUG #758", "THRIFTY WHITE DRUG #736", "THRIFTY WHITE PHARMACY # 769", "THRIFTY WHITE PHARMACY #754", "THRIFTY WHITE PHARMACY #752", "THRIFTY WHITE DRUG #750", "THRIFTY WHITE DRUG #748", "THRIFTY WHITE PHARMACY #728", "THRIFTY WHITE DRUG #755", "THRIFTY WHITE PHARMACY #772", "THRIFTY WHITE PHARMACY #770", "THRIFTY WHITE PHARMACY #774", "THRIFTY WHITE PHARMACY #779", "DOVE MEDICAL SUPPLY RETAIL LLC", "THRIFTY WHITE PHARMACY #741", "DR. WENDY SOWELL GIBSON", "PREMIER KIDS CARE, INC.", "SAAD MEDICAL EQUIPMENT - SPANISH FO", "SAAD MEDICAL EQUIPMENT - UNIVERSITY", "BOTICA PHARMACY CORP.", "SAAD MEDICAL EQUIPMENT -D'IBERVILLE", "THRIFTY WHITE DRUG 729", "THRIFTY WHITE PHARMACY #727", "DYNAMEDICS MEDICAL SOLUTIONS INC", "ROBERTS HOME MEDICAL LLC", "YONKERS EXPRESS PHARMACY INC", "BLOOMING LIGHT RX INC", "THRIFTY WHITE PHARMACY #735", "MEMORIAL REGIONAL HOSPITAL SOUTH PH", "HEALTHDIRECT INSTITUTIONAL PHARMACY", "THRIFTY WHITE DRUG #746", "THRIFTY WHITE PHARMACY #738", "BALL GROUND PHARMACY LLC", "HOSPITAL PHARMACY WEST", "HOSPITAL PHARMACY INC", "PREMIER KIDS CARE", "WEST CONCORD PHARMACY", "PHARMCAREOK OF TULSA INC", "THRIFTY WHITE PHARMACY #740", "THRIFTY WHITE PHARMACY #776", "THRIFTY WHITE PHARMACY #778", "THRIFTY WHITE PHARMACY #734", "ROTECH", "THRIFTY WHITE DRUG #759", "J&G MEDICAL SUPPLIES", "ACCESS PT PENNSYLVANIA", "PHARMACY ON U LLC", "ADVANCED MEDICAL SUPPLY INC", "DIABETIC SOLUTIONS INC", "THC OF NEVADA", "ADVANCED EYECARE", "THE MED-SHOP PHARMACY", "LIBERTY RX INC", "THRIFTY WHITE PHARMACY #775", "THRIFTY WHITE PHARMACY #781", "MEDI CITY PHARMACY INC", "U HEALTH PHARMACY LLC", "VALLEY VIEW", "CORONA PHARMACY RX INC.", "THE MEDICINE SHOPPE #2193", "MEDICAL PHARMACY PA", "VITAL CARE OF LAFAYETTE", "PINK PROMISES & DME LLC", "CHARITY COMFORT CARE MEDICAL SUPPLY", "CPR DME, LLC", "REMEDY PHARMACY", "ROYAL MEDICAL SUPPLY", "SAINT MARY AND JESSIE LLC", "BUCKNER NEIGHBORHOOD PHARMACY INC.", "PHARMSCRIPT OF FLORIDA LLC", "CVS PHARMACY #01254", "CVS PHARMACY #10449", "CVS PHARMACY #10174", "CVS PHARMACY #10487", "CVS PHARMACY #10414", "CVS PHARMACY #10521", "CVS PHARMACY #10486", "CVS PHARMACY #10428", "CVS PHARMACY #10446", "CVS PHARMACY #10265", "CVS PHARMACY #10544", "CVS PHARMACY #10350", "CVS PHARMACY #10215", "CVS PHARMACY #00496", "CVS PHARMACY #10540", "CVS PHARMACY # 05465", "CVS PHARMACY #04879", "CVS PHARMACY #01020", "CVS PHARMACY #04599", "CVS PHARMACY # 02282", "CVS PHARMACY # 00861", "CVS PHARMACY # 01225", "CVS PHARMACY #00860", "CVS PHARMACY # 00844", "CVS PHARMACY # 00810", "CVS PHARMACY # 00769", "CVS PHARMACY INC", "CVS PHARMACY # 01871", "CVS PHARMACY # 01002", "CVS PHARMACY # 01870", "CVS PHARMACY # 01247", "CVS PHARMACY # 01143", "CVS PHARMACY # 01085", "CVS PHARMACY # 01121", "CVS PHARMACY # 08319", "CVS PHARMACY # 04471", "CVS PHARMACY # 00148", "CVS PHARMACY # 00130", "CVS PHARMACY # 00119", "CVS PHARMACY # 01869", "CVS PHARMACY #01021", "CVS PHARMACY # 01041", "CVS PHARMACY #16419", "CVS PHARMACY # 16205", "CVS PHARMACY # 01111", "CVS PHARMACY #01264", "CVS PHARMACY #00915", "CVS PHARMACY #01874", "CVS PHARMACY #02325", "CVS PHARMACY #00995", "CVS PHARMACY #01853", "CVS PHARMACY #10782", "CVS PHARMACY #01049", "CVS PHARMACY #01885", "CVS PHARMACY #01862", "CVS PHARMACY # 05872", "CVS PHARMACY #00983", "CVS PHARMACY #01368", "CVS PHARMACY# 05407", "CVS PHARMACY #07607", "CVS PHARMACY #00307", "CVS PHARMACY #00117", "CVS PHARMACY #01886", "CVS PHARMACY #02283", "CVS PHAMRACY #05402", "CVS PHARMACY #01068", "CVS PHARMACY #00946", "CVS PHARMACY #01010", "CVS PHARMACY #01234", "CVS PHARMACY #00704", "CVS PHARMACY #00636", "CVS PHARMACY # 00318", "CVS PHARMACY #01238", "CVS PHARMACY #01130", "CVS PHARMACY #01872", "CVS PHARMACY #05874", "CVS PHARMACY #02254", "CVS PHARMACY #01850", "CVS PHARMACY #01094", "CVS PHARMACY # 05913", "CVS PHARMACY # 07170", "CVS PHARMACY #10324", "CVS PHARMACY #01859", "CVS PHARMACY # 01873", "CVS PHARMACY # 01875", "CVS PHARMACY #05002", "CVS PHARMACY #10665", "CVS PHARMACY 17604", "CVS PHARMACY #10601", "CVS PHARMACY #10637", "CVS PHARMACY #17335", "CVS PHARMACY #16009", "CVS PHARMACY #10906", "CVS PHARMACY #16013", "CVS PHARMACY #16895", "CVS PHARMACY #16024", "CVS PHARMACY #10758", "CVS PHARMACY #10603", "CVS PHARMACY #17276", "CVS PHARMACY #17603", "CVS PHARMACY #16074", "CVS PHARMACY #17046", "CVS PHARMACY #16081", "CVS PHARMACY #16831", "CVS PHARMACY #16033", "CVS PHARMACY #10139", "CVS PHARMACY #10598", "CVS PHARMACY #16855", "CVS PHARMACY #10752", "CVS PHARMACY #10635", "CVS PHARMACY #10775", "CVS PHARMACY #10595", "CVS PHARMACY #10580", "CVS PHARMACY #10638", "CVS PHARMACY #10671", "CVS PHARMACY #10576", "CVS PHARMACY # 05987", "CVS PHARMACY # 05822", "CVS PHARMACY # 05829", "CVS PHARMACY # 05836", "CVS PHARMACY # 02903", "CVS PHARMACY # 02935", "CVS PHAMRACY # 02936", "CVS PHARMACY # 02942", "CVS PHARMACY # 02981", "CVS PHARMACY #02844", "CVS PHARMASCY # 05797", "CVS PHARMACY # 02692", "CVS PHARMACY # 09086", "CVS PHARMACY #05619", "CVS PHARMACY 05482", "CVS PHARMACY # 02827", "CVS PHARMACY # 06935", "CVS PHARMACY #08910", "CVS PHARMACY #04396", "CVS PHARMACY 01768", "CVS PHARMACY #00513", "CVS PHARMACY #01900", "CVS PHARMACY #00488", "CVS PHARMACY #00365", "CVS PHARMACY #00220", "CVS PHARMACY #01034", "CVS PHARMACY # 01095", "CVS PHARMACY # 02878", "CVS PHARMACY #16935", "CVS PHARMACY #02600", "CVS PHARMACY #01248", "HIGHLAND PARK CVS LLC", "CVS PHARMACY #07020", "CVS PHARMACY # 07166", "CVS PHARMACY #04581", "CVS PHARMACY #10664", "CVS PHARMACY #10673", "CVS PHARMACY #10691", "CVS PHARMACY #10818", "CVS PHARMACY #10602", "CVS PHARMACY #10667", "CVS PHARMACY #10880", "CVS PHARMACY #01996", "CVS PHARMACY #10579", "CVS PHARMACY #10634", "CVS PHARMACY #10944", "CVS PHARMACY #10670", "CVS PHARMACY #07970", "CVS PHARMACY #06748", "CVS PHARMACY # 06937", "CVS PHARMACY 07017", "CVS PHARMACY # 07142", "CVS PHARMACY #01184", "CVS PHARMACY #00929", "CVS PHARMACY #01024", "CVS PHARMACY #00272", "CVS PHARMACY #01867", "CVS PHARMACY #01868", "CVS PHARMACY #01955", "CVS PHARMACY #02054", "CVS PHARMACY #02161", "CVS PHARMACY #02200", "CVS PHARMACY #00062", "CVS PHARMACY #00137", "CVS PHARMACY #00260", "CVS PHARMACY #00335", "CVS PHARMACY #01861", "CVS PHARMACY #00373", "CVS PHARMACY #00394", "CVS PHARMACY #00517", "CVS PHARMACY #02206", "CVS PHARMACY # 07232", "CVS PHARMACY #06505", "CVS PHARMACY #02959", "CVS PHARMACY #01022", "CVS PHARMACY # 01876", "CVS PHARMACY #01865", "CVS PHARMACY #07222", "CVS PHARMACY #01179", "CVS PHARMACY #09320", "CVS PHARMACY #07962", "CVS PHARMACY # 06933", "CVS PHARMACY #09099", "CVS PHARMACY #09130", "CVS PHARMACY #09142", "CVS PHARMACY # 09147", "CVS PHARMACY #09896", "CVS PHARMACY #09135", "CVS PHARMACY #09929", "LONGS DRUG STORES CALIFORNIA LLC", "CVS PHARMACY #09922", "CVS PHARMACY #09921", "CVS PHARMACY #09920", "CVS PHARMACY #09909", "CVS PHARMACY #09917", "CVS PHARMACY #09919", "CVS PHARMACY #09801", "CVS PHARMACY #09146", "CVS PHARMACY #09800", "CVS PHARMACY #09128", "LONGS DRUG STORE #09815", "CVS PHARMACY #09818", "CVS PHARMACY #09819", "CVS PHARMACY #09208", "CVS PHARMACY #09296", "CVS PHARMACY #05421", "CVS PHARMACY #08734", "CVS PHARMACY #07553", "CVS PHARMACY #09167", "CVS PHARMACY #09149", "CVS PHARMACY # 09162", "CVS PHARMACY 09150", "CVS PHARMACY 09152", "CVS PHARMACY 09153", "CVS PHARMACY 09155", "CVS PHARMACY #09154", "CVS PHARMACY # 09156", "CVS PHARMACY #09845", "CVS PHARMACY #09158", "CVS PHARMACY 09161", "CVS PHARMACY #09821", "CVS PHARMACY 09282", "CVS PHARMACY #09796", "CVS PHARMACY #09783", "CVS PHARMACY #09752", "CVS PHARMACY #09834", "CVS PHARMACY #09872", "CVS PHARMACY #09219", "CVS PHARMACY #09159", "CVS PHARMACY #09822", "CVS PHARMACY #10886", "CVS PHARMACY #10750", "CVS PHARMACY #10681", "CVS PHARMACY #10177", "CVS PHARMACY #05493", "CVS PHARMACY #00046", "CVS PHARMACY #01023", "CVS PHARMACY #01265", "CVS PHARMACY #01199", "CVS PHARMACY #00055", "CVS PHARMACY #00107", "CVS PHARMACY #00714", "CVS PHARMACY #00736", "CVS PHARMACY# 08441", "CVS PHARMACY #02201", "CVS PHARMACY # 01009", "CVS PHARMACY#01803", "CVS PHARMACY #01012", "CVS #05494", "CVS PHARMACY #04820", "CVS PHARMACY #04880", "CVS PHARMACY # 07319", "CVS PHARMACY# 01878", "CVS PHARMACY #01001", "CVS PHARMACY #10581", "CVS PHARMACY #10535", "CVS PHARMACY #05382", "CVS PHARMACY", "CVS PHARMACY #00131", "CVS PHARMACY #01531", "CVS PHARMACY #01845", "CVS PHARMACY #00604", "CVS PHARMACY #00632", "CVS PHARMACY #00654", "CVS PHARMACY #00674", "CVS PHARMACY #07242", "CVS PHARMACY # 09844", "CVS PHARMACY #09198", "HOOK-SUPERX LLC", "HOOK- SUPERX, L.L.C..", "LONGS DRUGS #09835", "CVS PHARMACY #09833", "CVS PHARMACY #09735", "CVS PHARMACY #09802", "CVS PHARMACY #09163", "CVS PHARMACY #09851", "CVS PHARMACY #09632", "CVS PHARMACY #09809", "CVS PHARMACY #09623", "CVS PHARMACY #01921", "CVS PHARMACY #02755", "CVS PHARMACY #02756", "CVS PHARMACY #02782", "CVS PHARMACY #02783", "CVS PHARMACY # 10794", "CVS PHARMACY #02784", "CVS PHARMACY #01657", "CVS PHARMACY #04773", "CVS PHARMACY # 05088", "CVS PHARMACY #00835", "CVS PHARMACY #16537", "CVS PHARMACY # 07969", "CVS PHARMACY # 03047", "CVS PHARMACY # 10606", "CVS PHARMACY #07227", "CVS PHARMACY #08266"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 10, 1, 1, 1, 1, 14, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practicename", "count": 467, "min": "86 BOBO PHARMACY INC", "max": "WONDERFUL RX PHARMACY INC"}, {"values": {"label": ["511 MONROE TPKE", "1239 E PUTNAM AVE", "3514 MAIN ST", "3141 WILSON BLVD", "1240 FARMINGTON AVE", "219 BROAD ST", "358 W MAIN ST", "777 MAIN ST", "20 BANK ST", "94 PARK ST", "229 HOPE ST", "734 BRIDGEPORT AVE", "1341 LONG STREET", "6400 LANSDOWNE CENTER", "714 HOPMEADOW ST", "1200 MAIN ST", "632 MIDDLE TPKE", "311 MAIN ST", "26 DAVIS ST", "22 WINDSOR AVE", "1055 FARMINGTON AVE", "526 MERIDEN RD", "1968 BLACK ROCK TPKE", "6 QUEEN ST", "47 HAZARD AVE", "844 JONES HILL RD", "2045 DIXWELL AVE", "26 WATERBURY RD", "1425 BARNUM AVE", "2000 N MAIN ST", "581 HIGHLAND AVE", "323 CROMWELL AVE", "35 PADANARAM RD", "1 HAWLEY LN", "225 SOUND BEACH AVE", "690 WETHERSFIELD AVE", "153 BROAD ST", "3440 WILKINSON BLVD", "2981 S. MILITARY HWY", "99 GREENWICH AVE", "110 MAIN STREET", "163 MOUNTAIN RD", "25 BROADWAY AVE", "279 BOSTON POST RD", "479 BLUE HILLS AVE", "964 POST RD", "106 BOSTON POST RD", "191 W MAIN ST", "900 N 6TH STREET", "300 E 8TH ST", "3222 S MAIN ST", "2703 ROUTE 130", "2025 FIRST AVENUE SE", "5046 S SHERIDAN RD", "4016 S STATE HIGHWAY 97", "591 S MILL ST", "27 S COAST HWY", "5518 MAGAZINE ST", "124 W WASHINGTON AVE", "701 W GROVE ST", "915 HILL ST", "220 N ALEXANDER AVE", "5905 DOLLARWAY RD", "2611 E OAKLAND AVE", "602 HIGHWAY 16 E", "12352 FM 1957", "101 N BUSINESS 60", "214 S MAIN ST", "304 E MAIN ST", "6 E SPRINGFIELD RD", "1219 E BUSTAMANTE ST", "2321 7TH AVE", "10601 S MAY AVE", "5711 ALTAMA AVE", "23122 SAINT FRANCIS BLVD", "15245 BLUEBIRD ST NW", "530 3RD ST NW", "100 ASMA BLVD", "2621 GREENHAVEN RD", "820 BAY AVE", "11983 TAMIAMI TRL N", "102 PRINCE ROYAL DR", "433 W ALLEN AVE", "151 GUY PARK AVE", "11001 ROOSEVELT BLVD N", "516 BECKLEY CROSSING SHPG CTR", "810 SE WASHINGTON ST", "81 NORTH ST", "60 MIDDLE ST", "3710 MAIN ST", "40 EAST ST", "1875 BOSTON AVE", "20 BURNSIDE AVE", "45 S MAIN ST", "241 MIDDLE TPKE W", "15 CHESTERFIELD RD", "57 PROVIDENCE PIKE", "11 FOREST ST", "66 HIGH RIDGE RD", "903 BENHAM ST", "2251 COMMERCE BLVD", "1142 N DESLOGE DR", "2401 N CENTRAL AVE", "PR #14 KM 51.5", "17703 VIRGINIA AVE", "24 SCHOOL ST.", "605 N MAIN ST", "6068 S 1ST ST", "3303 W 26TH ST STE 101", "11500 W BROAD ST", "5580 GEORGETOWN RD", "13723 N LITCHFIELD RD", "871 W OAKLAND PARK BLVD", "11 ASHFORD AVE", "6505 E 71ST ST", "950 E TAFT AVE", "1357 VETERANS MEMORIAL BLVD", "901 SW STATE ROUTE 150", "4500 OLD PASS RD", "11085 CATHELL RD", "411 KING ST", "3375 RINCONADA BLVD", "58 PENNSYLVANIA AVE", "905 S MAIN ST", "661 MAIN ST", "540 W MAIN ST", "369 MAIN ST", "330 GRASMERE AVE", "37 W MAIN ST", "1657 ROUTE 12", "111 ALBANY TPKE", "150 WASHINGTON STREET", "965 WHITE PLAINS RD", "281 CONNECTICUT AVE", "710 FAYETTEVILLE ST", "14095 RICHMOND HWY", "3140 HWY 280", "206 US HIGHWAY 117 S", "3555 COLORADO BLVD", "1812 HOLLOWAY STREET", "407 W MAIN STREET", "1124 PATTON AVE", "454 S MAIN ST", "140 NC 102 W", "28895 W IL RTE 120", "101 E ATKINS ST", "244 E 161ST ST", "4021 CROSS TIMBERS ROAD", "1645 CRANIUM DR", "1606 HIGHLAND COLONY PKWY", "1921 S 77 SUNSHINE STRIP", "17970 N TAMIAMI TRL", "40 FLOWING SPRINGS WAY", "2590 N TEXAS ST", "1086 JEFF RD NW", "81 US HIGHWAY 9", "3800 W MADISON ST STE 101", "7403 ALOMA AVE", "2719 GRAND AVE", "4720 S KIRKMAN RD", "4720 N MARINE DR", "4710 S WESTERN AVE", "1800 W INDIANTOWN RD", "12405 NE 85TH ST", "3601 W WILLIAM CANNON DR", "3200 E BAY DR", "19710 HOLZWARTH RD", "19302 KUYKENDAHL RD", "128 E BRANDON BLVD", "4320 26TH ST W", "6003 14TH ST W", "11000 VENTURA BLVD", "9307 N LAMAR BLVD", "305 N BREED ST", "1634 S FEDERAL HWY", "9865 GLADES RD", "3200 S FEDERAL HWY", "1851 CLINT MOORE RD", "4218 LINDELL BLVD", "1515 N ALEXANDER DR", "355 CAMPBELL AVE", "720 BRANCHVILLE RD", "891N COLONY RD", "8 ROYCE CIR", "162 WASHINGTON AVE", "644 W PUTNAM AVE", "24 PERSHING DR", "14 CANDLEWOOD LAKE RD", "1181 MAIN ST", "6 WILLARD RD", "146 SOUTH ST", "7 DURANT AVE", "7950 FAYETTEVILLE RD", "283 W IL ROUTE 173", "301 UNIVERSITY AVE", "3801 BISCAYNE BLVD", "101 N TENNESSEE STREET", "3 PLAISTOW RD", "8815 STAGECOACH RD", "1601 MAIN ST", "4003 W VERNON AVE", "4030 ANNAS RETREAT", "125 MORRIS AVE", "3501 N HALSTED ST", "302 ROUTE 25A", "5555W 79TH ST", "5496 UNIVERSITY PKWY", "3501 UNIQUE CIRCLE", "12020 CULEBRA RD", "4353 LAKE OTIS PKWY", "1801 W 11TH ST", "900 MERIDIAN E", "1455 NE DIVISION ST", "1302 E 38TH ST", "22 DEPOT HILL RD", "969 HIGH RIDGE RD", "10 LATHROP RD", "17 W MAIN ST", "1 MIFFLIN ST", "200 BUTLER CMNS", "467 MAIN ST", "341 COTTAGE GROVE RD", "372 W MAIN ST", "1044 BOULEVARD", "525 BUCKLAND RD", "656 NEW HAVEN AVE", "5550 FM 423", "401 S ROOSEVELT DR", "599 W 4TH ST", "1449 N ARIZONA BLVD", "6519 MAIN ST", "1125 2ND ST", "831 KUHIO HWY", "1810 S IRISH RD", "1515 W PARADISE DR", "10562 BELLEVILLE RD", "1445 E CENTRAL CT", "822 CITY AVE S", "505 S. PINE RIDGE AVE", "804 PIKE ST", "100 SARA WAY", "1501 WAGNER AVE", "4141 PEARL RD", "593 NEWFIELD AVE", "326 MAIN ST", "3151 UNIVERSITY AVE", "9256 SLAUSON AVE", "1830 N BROADWAY", "74955 US HIGHWAY 111", "25829 NARBONNE AVE", "1200 N SEPULVEDA BLVD", "9100 ROSEDALE HWY", "43525 10TH ST W", "1790 AIRLINE HWY", "3033 VINTAGE BLVD", "2417 TONGASS AVE", "3500 BRUMBACK BLVD", "340 WESTWIND DR", "131 EUREKA TWNCTR DR", "1309 NW 12TH AVE", "354 PRIVATE DRIVE 288", "825 E GREEN BAY AVE", "410 GRAND VALLEY BLVD", "100 SYCAMORE ESTATES DR", "2021 E INDEPENDENCE ST", "180 RIVER RD", "1733 2ND ST S", "205 HOUSE CARLSON DR", "4000 S BOLGER RD", "1903 COBBS FORD RD", "1420 HIGHWAY 231 S", "805 US HIGHWAY 27 S", "6812 N LAMAR BLVD", "804 W MARKET ST", "324 ROOSEVELT RD", "875 E NAPIER AVE", "4995 E US ROUTE 36", "1311 N STATE ROUTE 48", "1150 E SIBLEY BLVD", "1835 SAND LAKE RD", "1403 WAUKEGAN RD", "6297 PGA BLVD", "6200 W WILLIAM CANNON DR", "1213 PALM BAY RD", "175 MALABAR RD NW", "901 N ANKENY BLVD", "5896 CORTEZ RD W", "2501 S LAMAR BLVD", "6230 W. IRLO BRONSON MEMORIAL HWY", "5600 S 1ST ST", "5895 W PEORIA AVE", "900 SHELBY RD", "2310 MCCAUSLAND AVE", "3300 BROWN RD", "420 N FRAZIER ST", "7731 E NORTHERN LIGHTS BLVD", "301 N SANTA CLAUS LN", "MILE 1907 SEWARD HWY", "4000 W DIMOND BLVD", "500 RIVER ST", "17 US HIGHWAY 206", "11352 DORSETT RD", "169 TERRACE ST", "596 PROVIDENCE HWY", "1505 MERMAID AVE", "115 JOHNSON AVE N", "2249 86TH ST", "846 FORT DALE RD", "2846 E 101ST ST", "130 3RD ST NE", "3105 S MERIDIAN AVE", "3310 LAMAR AVE", "18049 MAGNOLIA ST", "2600 HWY 138", "611 STATE HIGHWAY 54", "1133 N MAIN ST", "38020 US HIGHWAY 18", "3915 GATEWAY DR", "920 US HWY 12", "W190 N9855 APPLETON AVE", "800 FOXCROFT AVE", "3333 US ROUTE 60", "254 CASSIDY BLVD", "4000 RED BANK RD", "18401 BUSINESS 13", "8118 PERRY HILLS CT", "2136 CAMPBELLSVILLE RD", "650 S TRUMAN BLVD", "3240 S WESTERN AVE", "414 KINGS HIGHWAY EAST", "5935 W ADDISON ST", "3915 S NOLAND RD", "600 W KARSCH BLVD", "1200 S MAIN ST", "10555 W OVERLAND RD", "955 N STATE ST", "2329 W CLAY ST", "13242 WICKER AVE", "5345 N IH 35", "4822 CATON FARM RD", "33975 DATE PALM DR", "11701 DETROIT AVE", "76 HEIGHTS RD", "W62N190 WASHINGTON AVE", "15738 W CAPITOL DR", "W156N11261 PILGRIM RD", "2204 NEVA RD", "603 W PINE ST", "9449 S HOWELL AVE", "2677 S 108TH ST", "S79W18885 JANESVILLE RD", "2420 E COLONIAL DR", "700 W COLLEGE AVE", "12101 SHELBYVILLE RD", "7914 FEGENBUSH LN", "8802 WEST COLONIAL DR", "12295 BISCAYNE BLVD", "8000 LAKE UNDERHILL RD", "20020 CORTEZ BLVD", "9320 LACKLAND RD", "8790 W MCNAB RD", "6401 W COMMERCIAL BLVD", "8800 W 95TH ST", "1723 E YOUNG CIR", "4200 WINNETKA AVE N", "4950 COUNTY RD 101", "655 NICOLLET MALL", "5428 LYNDALE AVE S", "780 E 9TH ST", "1600 N NOVA RD", "3705 HOLLYWOOD BLVD", "2280 N LAS VEGAS BLVD", "3325 N MAIN ST", "815 SUMMIT ST", "2311 OGDEN AVE", "23684 STRICKLAND DR", "200 MARQUIS PKWY", "4060 CAMPBELL AVE", "2601 RICHMOND HWY", "3336 WILSON BLVD", "2035 4TH AVE", "115 N 19TH AVE", "1902 BROOKS ST", "2402 GRAND AVE", "2001 10TH AVE S", "10100 BROOK RD", "1275 HARRISON AVE", "1300 E PARK AVE", "1311 GRAND AVE", "425 MAIN ST", "307 SE 4TH ST", "617 CENTRAL AVE", "3095 N MONTANA AVE", "2601 CENTRAL AVE", "1020 SENECA RD", "6010 PLANK RD", "603 N MONTANA AVE", "681 S OHIO ST", "1060 WOODS MILL PLZ", "452 WYTHE CREEK RD", "1788 N PIERCE ST", "3401 CHARLES STREET", "4310 FORTUNA CENTER PLZ", "1245 N MILITARY HWY", "15341 MONTANUS DR", "191 MARKET ST", "721 SOUTHPARK BLVD", "155 HOLT GARRISON PKWY", "2530 WEIR RD", "1316 GREENBRIER PKWY", "25 S GATEWAY DR", "3424 MORMON COULEE RD", "1250 WATERS PLACE", "136 JESSICA LN", "6238 HADLEY ST", "5722 GATEWOOD AVE", "7922 ROSECRANS AVE", "821 PROSPECT AVE", "940A SOUTHERN BLVD", "111 E CARSON ST", "4566 E FLORENCE AVE", "111 S 3RD ST", "1501 23RD AVE", "1075 W FM 3040", "13308 MERIDIAN E", "5137 E BASELINE RD", "3201 W GORE BLVD", "8440 E MCDONALD DR", "2611 W PARK ROW", "1222 E WOODLAND AVE", "301 S MAIN ST", "233 CARMICHAEL WAY", "12130 JEFFERSON AVE", "1700 SEMINOLE TRL", "17307 HULL STREET RD", "709 E MAIN ST", "12455 W BROAD ST", "2775 GODWIN BLVD", "2441 EISENHOWER AVE", "2704 OAKLAWN BLVD", "7235 BELL CREEK RD", "3149 E HARRY ST", "2440 N LEBANON ST", "1180 W 19TH ST", "8301 N CHURCH RD", "4201 N BELT HWY", "1212 S MADISON ST", "2100 N MAIN AVE", "885 E HIGHWAY 60", "11900 SAINT CHARLES ROCK RD", "2395 MAIN ST", "11601 E US 40 HWY", "2401 US HWY 14 EAST", "4024 ELKHART RD", "3270 TELEGRAPH RD", "16205 MILITARY TRL", "5245 RANGELINE SERVICE RD S", "3005 CHARITY ST", "7955 HWY N", "12380 SAINT CHARLES ROCK RD", "1749 WOODSTONE DR", "2120 W OSAGE ST", "3603 MCMASTERS AVE", "9433 MANCHESTER RD", "8101 CLAYTON RD", "4501 AIRLINE DR", "101 FLORIDA AVE SE", "880 S NEOSHO BLVD", "300 KEYSER AVE", "6250 PASEO DEL NORTE NE", "7776 COX LN", "188 UNION ST", "12659 S RIDGELAND AVE", "15514 W WADDELL RD", "806 NISSAN DR", "602 ALABAMA AVE", "2141 E BROADWAY RD", "52 JERICHO TPKE", "120 BERGEN AVE", "3900 S GRAND BLVD", "7402 N 56TH ST", "819 S SALINA ST", "2170 86TH ST", "2577 MALL RD", "950 MAIN ST", "1311 RING RD", "298 CENTRAL AVE", "2519 N 7TH ST", "7617 MYRTLE AVE", "3595 HIRAM DOUGLASVILLE HWY", "5501 W OREM DR", "3341 HALLS FERRY RD", "747 HIGHWAY 1 S", "765 E GLENN AVE", "54 CENTER SQ", "1615 N SAGINAW RD", "2985 CROOKS RD", "3100 N MARKET ST", "7994 US HIGHWAY 51 N", "3880 DICKERSON PIKE"], "data": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practiceaddress1", "count": 500, "min": "1 HAWLEY LN", "max": "W62N190 WASHINGTON AVE"}, {"values": {"label": ["UNIT B1", "CVS PHARMACY #01241", "CVS PHARMACY #06807", "STE E", "STE 11", "STE G", "STE B", "STE 203-E", "STE 203A", "STE 100C", "STE 2", "STE 116", "STE 1400", "BO PUEBLO SEC PUEBLO NORTE", "STE 100", "WALGREENS #5495", "# 36", "STE 260", "WALGREENS #5549", "STE A", "WALGREENS #5727", "WALGREENS #6153", "TOWER 2", "STE P2", "UNIT 8", "STE 4", "STE 202", "STE 907", "STE 107", "STE 102"], "data": [458, 1, 1, 2, 1, 1, 8, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]}, "label": "practiceaddress2", "count": 30, "min": "ALWIFE PLAZA", "max": "UNIT B1"}, {"values": {"label": ["CHARLOTTE", "WESTMINSTER", "SILVER SPRING", "GLENDALE", "WICHITA FALLS", "FREMONT", "BREWSTER", "LA GRANGE", "RIDGEWOOD", "SAN DIEGO", "SCOTTSDALE", "FAR ROCKAWAY", "JACKSON HEIGHTS", "HACKENSACK", "BRONX", "LATHAM", "BRIDGEVILLE", "CHARLESTON", "MANCHESTER", "LONG ISLAND CITY", "SEARCY", "FRANKLIN", "BIRMINGHAM", "NEW ROCHELLE", "COLUMBUS", "PLANTATION", "NORWOOD", "BELLEROSE", "WATERTOWN", "MARYLAND HEIGHTS", "HOUSTON", "ROCK HILL", "WEBSTER", "PASADENA", "PHILADELPHIA", "DENVER", "CHATSWORTH", "OZONE PARK", "ROCHESTER", "OKLAHOMA CITY", "FORT MYERS", "CAPE CORAL", "NAPLES", "HENDERSON", "NEW YORK", "DALLAS", "DEARBORN", "TUSTIN", "CORONA", "FREEPORT", "GREENACRES", "WOOSTER", "VALLEY VILLAGE", "VINITA", "TAYLOR", "CARTHAGE", "ROYAL PALM BEACH", "LOUISVILLE", "STARKVILLE", "MALDEN", "SPARTANBURG", "SOUTH OZONE PARK", "PRINCETON", "MIAMI", "NORFOLK", "BROOKLYN", "ENCINO", "NORTH LITTLE ROCK", "PATERSON", "EDISON", "SANTA ANA", "BILLINGS", "BUFFALO", "ASTORIA", "HICKSVILLE", "AUSTIN", "CENTRALIA", "KARLSTAD", "TYLER", "MORRIS", "MAPLE GROVE", "GRANITE FALLS", "MILACA", "SPRINGFIELD", "THIEF RIVER FALLS", "BEMIDJI", "MOOSE LAKE", "MAHNOMEN", "FERTILE", "WALKER", "GRAND RAPIDS", "MADISON", "SANDSTONE", "MONTEVIDEO", "SLAYTON", "PIERZ", "GREENSBORO", "HIBBING", "BENTON", "SPANISH FORT", "MOBILE", "DIBERVILLE", "CROOKSTON", "MONROE", "WASECA", "RALEIGH", "ASHBURN", "YONKERS", "FLUSHING", "WINCHESTER", "GERMANTOWN", "FERGUS FALLS", "PEMBROKE PINES", "GOUVERNEUR", "N SYRACUSE", "BAGLEY", "BRAINERD", "BALL GROUND", "SHERIDAN", "HOLLYWOOD", "CONCORD", "CATOOSA", "RED LAKE FALLS", "COLD SPRING", "WADENA", "LA CROSSE", "WILMINGTON", "WILLISTON", "ADA", "FORT PIERCE", "MECHANICSBURG", "CARLISLE", "SAN MARCOS", "CORAL SPRINGS", "LAS VEGAS", "PLYMOUTH", "HUGHES SPRINGS", "JAMAICA", "WESTBROOK", "EAU CLAIRE", "LEHIGHTON", "BRECKENRIDGE", "SALEM", "FAIRFAX", "LYNCHBURG", "FREDERICKSBURG", "CHARLOTTESVILLE", "HARRISONBURG", "FREDERICK", "PUEBLO", "HOLTON", "LAFAYETTE", "SAN BENITO", "VAN NUYS", "CANOGA PARK", "PERTH AMBOY", "SUNRISE", "WELLESLEY", "SILVER CITY", "BOSTON", "ROANOKE", "BELTON", "LUBBOCK", "HUTTO", "SPRING BRANCH", "LAREDO", "HUNTSVILLE", "KATY", "SUGAR LAND", "EL PASO", "CHELSEA", "FAIR OAKS RANCH", "CHATHAM", "MARCY", "WASHINGTON", "LATROBE", "LANCASTER", "BURLESON", "MEXIA", "BROWNSVILLE", "LEANDER", "DORCHESTER", "BROCKTON", "BLACKSTONE", "HARWICH PORT", "WALPOLE", "LEOMINSTER", "EAST LONGMEADOW", "SOUTH YARMOUTH", "FRAMINGHAM", "CAMBRIDGE", "EAST FALMOUTH", "EAST WAREHAM", "NORTH READING", "METHUEN", "WESTFORD", "SOMERVILLE", "WALTHAM", "ARLINGTON", "WAKEFIELD", "HYANNIS", "SOUTH DENNIS", "TAUNTON", "IRVING", "THE WOODLANDS", "WARE", "JAMAICA PLAIN", "BEVERLY", "WAYLAND", "STOUGHTON", "MILLIS", "WEYMOUTH", "LITTLETON", "HYDE PARK", "CHESTNUT HILL", "SAN ANTONIO", "DRACUT", "ATLANTA", "LAKEVILLE", "LEXINGTON", "W ROXBURY", "HAVERHILL", "ATHOL", "UXBRIDGE", "MEDFORD", "WESTFIELD", "NORTHBOROUGH", "SANDWICH", "PEABODY", "MEDFIELD", "MIDDLEBORO", "MILFORD", "GREENFIELD", "PALATINE", "ROUND LAKE", "HARWICH", "ASHLAND", "LANTANA", "RICHARDSON", "LAKEWOOD", "ROSENBERG", "ARVADA", "CYPRESS", "BOULDER", "SUPERIOR", "GRAND JUNCTION", "ROSHARON", "HIGHLANDS RANCH", "COLORADO SPRINGS", "AURORA", "ENGLEWOOD", "LA MARQUE", "SILVERTHORNE", "RICHMOND", "ROYSE CITY", "HASLET", "CIBOLO", "CONROE", "MANSFIELD", "CHICAGO", "MOKENA", "ELGIN", "DOWNERS GROVE", "JOLIET", "OAK PARK", "CAROL STREAM", "JACKSONVILLE", "EL CERRITO", "CARY", "HILLSIDE", "MAHOMET", "PARK RIDGE", "OLYMPIA FIELDS", "RAYNHAM", "MARLBOROUGH", "AMHERST", "FALL RIVER", "GREELEY", "NORMAL", "RIVERDALE", "NILES", "MONTGOMERY", "MELISSA", "MARBLE FALLS", "WACO", "RAYMONDVILLE", "ALAMO HEIGHTS", "ALTON", "LAKE IN THE HILLS", "DANVILLE", "BLOOMINGTON", "LOCKPORT", "SCHAUMBURG", "ROWLEY", "ALLSTON", "GLOUCESTER", "FOXBORO", "SOUTH DARTMOUTH", "OXFORD", "MARSTONS MILLS", "QUINCY", "BRAINTREE", "HOLYOKE", "SEEKONK", "LONGMEADOW", "SOUTH ATTLEBORO", "NORTH EASTON", "NEWTON", "DANVERS", "PEMBROKE", "HUDSON", "MONTEREY", "RANTOUL", "OAKLAND", "DAVIS", "STOCKTON", "SAN JOSE", "ENCINITAS", "SANTA CLARA", "TEMECULA", "ATASCADERO", "VACAVILLE", "TURLOCK", "CLOVIS", "COVINA", "ALAMEDA", "WALNUT CREEK", "EL CAJON", "SONORA", "PLAINFIELD", "FRESNO", "LA MESA", "AUBURN", "SONOMA", "RANCHO MIRAGE", "GRASS VALLEY", "GOLETA", "PORTERVILLE", "OROVILLE", "MILPITAS", "SANTA MARIA", "WATSONVILLE", "NATIONAL CITY", "DALY CITY", "SARATOGA", "SEBASTOPOL", "GREENBRAE", "MADERA", "UKIAH", "FORT WORTH", "HOPKINTON", "LOWELL", "W NEWTON", "BURLINGTON", "EAST BOSTON", "BRIGHTON", "BEDFORD", "WINCHENDON", "DEDHAM", "CHARLESTOWN", "WEST BRIDGEWATER", "ALBUQUERQUE", "DUMAS", "DECATUR", "FRISCO", "BUDA", "NORTH BILLERICA", "ACTON", "NEEDHAM", "CAMARILLO", "SUNNYVALE", "EVANSVILLE", "HONOLULU", "SAN MATEO", "WEST COVINA", "PETALUMA", "GLENDORA", "CHULA VISTA", "CARMICHAEL", "MERCED", "GETTYSBURG", "BROOMALL", "DOYLESTOWN", "SEATTLE", "WEST GROVE", "YORK", "GILBERTSVILLE", "NORTH EAST", "ELSA", "CAGUAS", "LANHAM", "CHESAPEAKE BEACH", "NEW ORLEANS"], "data": [1, 3, 1, 1, 1, 2, 1, 1, 2, 4, 1, 1, 2, 1, 6, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 1, 1, 4, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 7, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 7, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}, "label": "practicecity", "count": 393, "min": "ABBEVILLE", "max": "WOODBRIDGE"}, {"values": {"label": ["NC", "CA", "MD", "NY", "TX", "WA", "KY", "AZ", "NJ", "PA", "SC", "NH", "AR", "TN", "AL", "MS", "FL", "MO", "MA", "CO", "MN", "OK", "NV", "MI", "OH", "VA", "MT", "IL", "GA", "WY", "WI", "VT", "KS", "LA", "NM", "IN", "HI", "PR"], "data": [5, 71, 5, 38, 68, 2, 2, 1, 5, 20, 2, 2, 2, 1, 3, 6, 12, 1, 126, 19, 33, 3, 3, 1, 1, 9, 1, 36, 4, 2, 3, 1, 1, 2, 4, 3, 1, 1]}, "label": "practicestate", "count": 38, "min": "AK", "max": "WV"}, {"values": {"label": ["705.0 - 99902224.5", "99902224.5 - 199803744.0", "199803744.0 - 299705263.5", "299705263.5 - 399606783.0", "399606783.0 - 499508302.5", "499508302.5 - 599409822.0", "599409822.0 - 699311341.5", "699311341.5 - 799212861.0", "799212861.0 - 899114380.5", "899114380.5 - 999015900"], "data": [118, 17, 57, 62, 31, 51, 67, 46, 15, 36]}, "label": "practicezip9code", "count": 10, "min": 705, "max": 999015900}, {"values": {"label": ["-2141564683.0 - -1712887730.7", "-1712887730.7 - -1284210778.4", "-1284210778.4 - -855533826.1", "-855533826.1 - -426856873.8", "-426856873.8 - 1820078.5", "1820078.5 - 430497030.8", "430497030.8 - 859173983.1", "859173983.1 - 1287850935.4", "1287850935.4 - 1716527887.7", "1716527887.7 - 2145204840.0"], "data": [46, 61, 54, 48, 52, 12, 93, 56, 9, 69]}, "label": "telephonenumber", "count": 10, "min": -2141564683, "max": 2145204840}, {"values": {"label": ["Pharmacy", "Medical Supply Company Other", "Certified Other|Pharmacy", "MSC With Respiratory Therapist", "MSC With Orthotic-Prosthetic", "Pharmacy|Grocery Store", "Pharmacy|Optician", "Medical Supply Company Other|Pharmacy|Optician", "Medical Supply Company Other|Orthotic Personnel", "Optometrist", "Medical Supply Company Other|MSC With Respiratory Therapist", "Optometrist|Optician", "Prosthetic Personnel", "Medical Supply Company Other|MSC With Orthotic Personnel", "MSC With Orthotic Personnel"], "data": [405, 6, 4, 1, 3, 21, 50, 1, 1, 2, 2, 1, 1, 1, 1]}, "label": "specialitieslist", "count": 15, "min": "Certified Other|MSC With Respiratory Therapist|Pharmacy", "max": "Prosthetic Personnel"}, {"values": {"label": ["OXYGEN & EQUIPMENT", "PHYSICIAN ASSISTANT", "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "OXYGEN & EQUIPMENT|PEDORTHIC PERSONNEL|MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "PEDORTHIC PERSONNEL"], "data": [493, 1, 2, 1, 3]}, "label": "providertypelist", "count": 5, "min": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "max": "PHYSICIAN ASSISTANT"}, {"values": {"label": ["Orthoses: Off-The-Shelf", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Limb Prostheses", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Heat & Cold Applications|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Nebulizer Equipment and/or Supplies", "Orthoses: Custom Fabricated|Limb Prostheses", "Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions", "Immunosuppressive Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies", "Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Continuous Positive Airway Pressure (CPAP) Devices|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Continuous Passive Motion (CPM) Devices|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Orthoses: Off-The-Shelf", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Seat Lift Mechanisms|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Pneumatic Compression Devices and/or Supplies|Ultraviolet Light Devices and/or Supplies|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "Canes and/or Crutches|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Surgical Dressings", "Immunosuppressive Drugs|Nebulizer Drugs", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Urological Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Urological Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies", "Pneumatic Compression Devices and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Limb Prostheses|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Urological Supplies", "Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies|Surgical Dressings", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings|Lymphedema Compression Treatment Items", "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Suction Pumps|Surgical Dressings|Lymphedema Compression Treatment Items", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Nebulizer Drugs", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Nebulizer Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Insulin Infusion Pumps and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Lymphedema Compression Treatment Items", "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Penile Pumps|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Nebulizer Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Ostomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchairs (Complex Rehabilitative Manual)|Wheelchairs (Complex Rehab Manual Rel Accessories)|Wheelchairs (Complex Rehabilitative Power)|Wheelchairs (Complex Rehab Power Rel Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "Commodes, Urinals, Bedpans|Heat & Cold Applications|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Seat Lift Mechanisms|Walkers|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Surgical Dressings|Diabetic Shoes and Inserts", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Infusion Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings"], "data": [2, 1, 2, 39, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 5, 1, 3, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 12, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 227, 86, 1, 1, 1, 1]}, "label": "supplieslist", "count": 93, "min": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "max": "Surgical Dressings"}, {"values": {"label": ["18.0 - 22.6", "22.6 - 27.2", "27.2 - 31.8", "31.8 - 36.4", "36.4 - 41.0", "41.0 - 45.6", "45.6 - 50.2", "50.2 - 54.8", "54.8 - 59.4", "59.4 - 64.0"], "data": [3, 27, 41, 104, 126, 179, 13, 0, 2, 5]}, "label": "latitude", "count": 10, "min": 18, "max": 64}, {"values": {"label": ["-157.0 - -147.9", "-147.9 - -138.8", "-138.8 - -129.7", "-129.7 - -120.6", "-120.6 - -111.5", "-111.5 - -102.4", "-102.4 - -93.3", "-93.3 - -84.2", "-84.2 - -75.1", "-75.1 - -66.0"], "data": [1, 0, 0, 35, 41, 28, 96, 67, 53, 179]}, "label": "longitude", "count": 10, "min": -157, "max": -66}, {"values": {"label": ["0"], "data": [500]}, "label": "is_contracted_for_cba", "count": 1, "min": "0", "max": "0"}, {"values": {"label": ["1.0 - 3.6", "3.6 - 6.2", "6.2 - 8.8", "8.8 - 11.4", "11.4 - 14.0", "14.0 - 16.6", "16.6 - 19.2", "19.2 - 21.8", "21.8 - 24.4", "24.4 - 27"], "data": [437, 7, 3, 11, 5, 10, 7, 10, 2, 8]}, "label": "participationbegindate_dayofmonth", "count": 10, "min": 1, "max": 27}, {"values": {"label": ["1", "12", "11", "10"], "data": [416, 15, 68, 1]}, "label": "participationbegindate_month", "count": 4, "min": "1", "max": "7"}, {"values": {"label": ["2024", "2023"], "data": [100, 400]}, "label": "participationbegindate_year", "count": 2, "min": "2023", "max": "2024"}, {"values": {"label": ["0.0 - 12.6", "12.6 - 25.2", "25.2 - 37.8", "37.8 - 50.4", "50.4 - 63.0", "63.0 - 75.6", "75.6 - 88.2", "88.2 - 100.8", "100.8 - 113.4", "113.4 - 126.0"], "data": [2, 0, 0, 0, 0, 0, 0, 0, 1, 0]}, "label": "businessname_stringindexer_transform", "count": 10, "min": 0, "max": 126}, {"values": {"label": ["467.0"], "data": [500]}, "label": "practicename_stringindexer_transform", "count": 1, "min": "467.0", "max": "467.0"}, {"values": {"label": ["500.0"], "data": [500]}, "label": "practiceaddress1_stringindexer_transform", "count": 1, "min": "0.0", "max": "499.0"}, {"values": {"label": ["0.0 - 2.9", "2.9 - 5.8", "5.8 - 8.7", "8.7 - 11.6", "11.6 - 14.5", "14.5 - 17.4", "17.4 - 20.3", "20.3 - 23.2", "23.2 - 26.1", "26.1 - 29.0"], "data": [428, 3, 5, 1, 0, 0, 0, 2, 0, 0]}, "label": "practiceaddress2_stringindexer_transform", "count": 10, "min": 0, "max": 29}, {"values": {"label": ["0.0 - 39.7", "39.7 - 79.4", "79.4 - 119.1", "119.1 - 158.8", "158.8 - 198.5", "198.5 - 238.2", "238.2 - 277.9", "277.9 - 317.6", "317.6 - 357.3", "357.3 - 397.0"], "data": [117, 66, 40, 39, 40, 40, 39, 40, 40, 39]}, "label": "practicecity_stringindexer_transform", "count": 10, "min": 0, "max": 397}, {"values": {"label": ["0.0 - 3.7", "3.7 - 7.4", "7.4 - 11.1", "11.1 - 14.8", "14.8 - 18.5", "18.5 - 22.2", "22.2 - 25.9", "25.9 - 29.6", "29.6 - 33.3", "33.3 - 37.0"], "data": [303, 108, 32, 14, 13, 10, 6, 6, 4, 4]}, "label": "practicestate_stringindexer_transform", "count": 10, "min": 0, "max": 37}, {"values": {"label": ["0.0 - 1.4", "1.4 - 2.8", "2.8 - 4.2", "4.2 - 5.6", "5.6 - 7.0", "7.0 - 8.4", "8.4 - 9.8", "9.8 - 11.2", "11.2 - 12.6", "12.6 - 14.0"], "data": [425, 0, 31, 2, 9, 17, 1, 6, 3, 1]}, "label": "specialitieslist_stringindexer_transform", "count": 10, "min": 0, "max": 14}, {"values": {"label": ["0.0"], "data": [500]}, "label": "providertypelist_stringindexer_transform", "count": 1, "min": "0.0", "max": "0.0"}, {"values": {"label": ["1.0 - 6.5", "6.5 - 12.0", "12.0 - 17.5", "17.5 - 23.0", "23.0 - 28.5", "28.5 - 34.0", "34.0 - 39.5", "39.5 - 45.0", "45.0 - 50.5", "50.5 - 56.0"], "data": [352, 7, 2, 1, 0, 1, 0, 0, 2, 135]}, "label": "supplieslist_stringindexer_transform", "count": 10, "min": 1, "max": 56}]}, "selectedFE": [{"transformationsData": [{"transformation_label": "novalue"}], "feature": "provider_id", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "21091081.02", "stddev": "2231189.01", "min": "20303219", "max": "34359440", "missing": "0"}, "updatedLabel": "provider_id"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "acceptsassignement", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.78", "stddev": "0.41", "min": "0", "max": "1", "missing": "0"}, "updatedLabel": "acceptsassignement"}, {"transformationsData": [{"feature_label": "participationbegindate", "transformation_label": "Extract Date"}], "feature": "participationbegindate", "type": "date", "selected": true, "replaceby": "random", "stats": {"count": "", "mean": "", "stddev": "", "min": "", "max": "", "missing": "0"}, "transformation": [{"transformation": "Extract Date", "selectedAsDefault": 1}], "generated": false, "updatedLabel": "participationbegindate"}, {"transformationsData": [{"feature_label": "businessname", "transformation_label": "String Indexer"}], "feature": "businessname", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "39 PHARMACY CORPORATION", "max": "YONKERS EXPRESS PHARMACY INC", "missing": "0", "distinct": "127"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "businessname"}, {"transformationsData": [{"feature_label": "practicename", "transformation_label": "String Indexer"}], "feature": "practicename", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "86 BOBO PHARMACY INC", "max": "WONDERFUL RX PHARMACY INC", "missing": "0", "distinct": "457"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicename"}, {"transformationsData": [{"feature_label": "practiceaddress1", "transformation_label": "String Indexer"}], "feature": "practiceaddress1", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "1 HAWLEY LN", "max": "W62N190 WASHINGTON AVE", "missing": "0", "distinct": "500"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress1"}, {"transformationsData": [{"feature_label": "practiceaddress2", "transformation_label": "String Indexer"}], "feature": "practiceaddress2", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "77", "mean": "", "stddev": "", "min": "ALWIFE PLAZA", "max": "UNIT B1", "missing": "423", "distinct": "63"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practiceaddress2"}, {"transformationsData": [{"feature_label": "practicecity", "transformation_label": "String Indexer"}], "feature": "practicecity", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "ABBEVILLE", "max": "WOODBRIDGE", "missing": "0", "distinct": "397"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicecity"}, {"transformationsData": [{"feature_label": "practicestate", "transformation_label": "String Indexer"}], "feature": "practicestate", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "AK", "max": "WV", "missing": "0", "distinct": "38"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "practicestate"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "practicezip9code", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "420303669.23", "stddev": "287747118.78", "min": "705", "max": "999015900", "missing": "0"}, "updatedLabel": "practicezip9code"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "telephonenumber", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "6144013752076.46", "stddev": "136516631952037.42", "min": "2014881230", "max": "3052621292106456", "missing": "0"}, "updatedLabel": "telephonenumber"}, {"transformationsData": [{"feature_label": "specialitieslist", "transformation_label": "String Indexer"}], "feature": "specialitieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "494", "mean": "", "stddev": "", "min": "Certified Other|MSC With Respiratory Therapist|Pharmacy", "max": "Prosthetic Personnel", "missing": "6", "distinct": "15"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "specialitieslist"}, {"transformationsData": [{"feature_label": "providertypelist", "transformation_label": "String Indexer"}], "feature": "providertypelist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "23", "mean": "", "stddev": "", "min": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "max": "PHYSICIAN ASSISTANT", "missing": "498", "distinct": "1"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "providertypelist"}, {"transformationsData": [{"feature_label": "supplieslist", "transformation_label": "String Indexer"}], "feature": "supplieslist", "type": "string", "selected": true, "replaceby": "max", "stats": {"count": "500", "mean": "", "stddev": "", "min": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "max": "Surgical Dressings", "missing": "0", "distinct": "93"}, "transformation": [{"transformation": "String Indexer", "selectedAsDefault": 1}], "updatedLabel": "supplieslist"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "latitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "38.25", "stddev": "5.86", "min": "18.13874", "max": "64.75669", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "latitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "longitude", "type": "real", "selected": true, "replaceby": "mean", "stats": {"count": "500", "mean": "-89.16", "stddev": "17.29", "min": "-157.8097", "max": "-66.03487", "missing": "0"}, "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "updatedLabel": "longitude"}, {"transformationsData": [{"transformation_label": "novalue"}], "feature": "is_contracted_for_cba", "transformation": [{"transformation": "novalue", "selectedAsDefault": 1}], "type": "numeric", "replaceby": "mean", "selected": true, "stats": {"count": "500", "mean": "0.0", "stddev": "0.0", "min": "0", "max": "0", "missing": "0"}, "updatedLabel": "is_contracted_for_cba"}], "autoFE_flag": true, "modeltrainingpercent": "60", "server_url": "/nexusMax/NexusMaxPlatform/uploads/platform/"}, "status": "new", "position": {"x": 62, "y": 160}, "shape_attributes": {"image": {"refWidth": "100%", "refHeight": "100%", "xlinkHref": "assets/svg/transformation/feature-transformation.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 10, "fill": "#333333", "type": "transformation", "text": "Auto FE", "slug": "auto-fe", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}, "root": {"dataTooltipPosition": "bottom", "dataTooltipPositionSelector": ".joint-stencil", "mode": "auto"}, "body": {"fill": "transparent", "stroke": "#4295d1", "strokeWidth": 2, "strokeDasharray": "0"}, "dbValues": {"AutoFE": {"autoFE_flag": true, "dataPercentage": "10"}, "ManualFE": {"FE": []}, "selectedFE": [], "autoFE_flag": true}}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"inherited": true, "checked": true, "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": 0}, {"inherited": true, "checked": true, "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": 3}, {"inherited": true, "checked": true, "field": "latitude", "alias": "latitude", "type": "real", "position": 4}, {"inherited": true, "checked": true, "field": "longitude", "alias": "longitude", "type": "real", "position": 5}, {"inherited": true, "checked": true, "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": 6}, {"inherited": true, "checked": true, "field": "participationbegindate_dayofmonth", "alias": "participationbegindate_dayofmonth", "type": "numeric", "position": 7, "generated": true}, {"inherited": true, "checked": true, "field": "participationbegindate_month", "alias": "participationbegindate_month", "type": "numeric", "position": 8, "generated": true}, {"inherited": true, "checked": true, "field": "participationbegindate_year", "alias": "participationbegindate_year", "type": "numeric", "position": 9, "generated": true}, {"inherited": true, "checked": true, "field": "businessname_stringindexer", "alias": "businessname_stringindexer", "type": "real", "position": 10}, {"inherited": true, "checked": true, "field": "practicename_stringindexer", "alias": "practicename_stringindexer", "type": "real", "position": 11}, {"inherited": true, "checked": true, "field": "practiceaddress1_stringindexer", "alias": "practiceaddress1_stringindexer", "type": "real", "position": 12}, {"inherited": true, "checked": true, "field": "practiceaddress2_stringindexer", "alias": "practiceaddress2_stringindexer", "type": "real", "position": 13}, {"inherited": true, "checked": true, "field": "practicecity_stringindexer", "alias": "practicecity_stringindexer", "type": "real", "position": 14}, {"inherited": true, "checked": true, "field": "practicestate_stringindexer", "alias": "practicestate_stringindexer", "type": "real", "position": 15}, {"inherited": true, "checked": true, "field": "specialitieslist_stringindexer", "alias": "specialitieslist_stringindexer", "type": "real", "position": 16}, {"inherited": true, "checked": true, "field": "providertypelist_stringindexer", "alias": "providertypelist_stringindexer", "type": "real", "position": 17}, {"inherited": true, "checked": true, "field": "supplieslist_stringindexer", "alias": "supplieslist_stringindexer", "type": "real", "position": 18}], "actual_schema": [{"inherited": true, "checked": true, "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": 0}, {"inherited": true, "checked": true, "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": 1}, {"inherited": true, "checked": true, "field": "participationbegindate", "alias": "participationbegindate", "type": "numeric", "position": 2}, {"inherited": true, "checked": true, "field": "businessname", "alias": "businessname", "type": "String", "position": 3}, {"inherited": true, "checked": true, "field": "practicename", "alias": "practicename", "type": "String", "position": 4}, {"inherited": true, "checked": true, "field": "practiceaddress1", "alias": "practiceaddress1", "type": "String", "position": 5}, {"inherited": true, "checked": true, "field": "practiceaddress2", "alias": "practiceaddress2", "type": "String", "position": 6}, {"inherited": true, "checked": true, "field": "practicecity", "alias": "practicecity", "type": "String", "position": 7}, {"inherited": true, "checked": true, "field": "practicestate", "alias": "practicestate", "type": "String", "position": 8}, {"inherited": true, "checked": true, "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": 9}, {"inherited": true, "checked": true, "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": 10}, {"inherited": true, "checked": true, "field": "specialitieslist", "alias": "specialitieslist", "type": "String", "position": 11}, {"inherited": true, "checked": true, "field": "providertypelist", "alias": "providertypelist", "type": "String", "position": 12}, {"inherited": true, "checked": true, "field": "supplieslist", "alias": "supplieslist", "type": "String", "position": 13}, {"inherited": true, "checked": true, "field": "latitude", "alias": "latitude", "type": "real", "position": 14}, {"inherited": true, "checked": true, "field": "longitude", "alias": "longitude", "type": "real", "position": 15}, {"inherited": true, "checked": true, "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": 16}], "selected_schema": [], "created_at": "2025-01-11 01:48:13.007000", "originalcount": 59566, "samplecount": 5929, "samplefile": "/FileStore/platform/sampleData/6781cddd8402090cd8fff5cb/part-00000-762f6ec5-acbf-46af-bfb5-62cf2c0fe966-c000.csv", "joinSchema": [], "updated_at": "2025-01-14 03:48:00.983000", "__v": 0, "datacache": 0, "sampleData": [{"provider_id": 34358738, "acceptsassignement": true, "participationbegindate": 1704758400000, "businessname": "BRONX HEALTHPLUS RX INC", "practicename": "BRONX HEALTHPLUS RX INC", "practiceaddress1": "582 E 187TH ST", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104586765, "telephonenumber": 7186844360, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.8556697103, "longitude": -73.8880333462, "is_contracted_for_cba": false}, {"provider_id": 23280337, "acceptsassignement": true, "participationbegindate": 1701907200000, "businessname": "NEB DOCTORS OF WESTERN PENNSYLVANIA LLC", "practicename": "NEB DOCTORS OF WESTERN PENNSYLVANIA", "practiceaddress1": "850 BOYCE RD", "practiceaddress2": "STE 5", "practicecity": "BRIDGEVILLE", "practicestate": "PA", "practicezip9code": 150171541, "telephonenumber": 4126533750, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Nebulizer Equipment and/or Supplies", "latitude": 40.3282190069, "longitude": -80.1256620419, "is_contracted_for_cba": false}, {"provider_id": 23280361, "acceptsassignement": true, "participationbegindate": 1701734400000, "businessname": "SEARCY RX LLC", "practicename": "MEDICAL CENTER PHARMACY", "practiceaddress1": "2900 HAWKINS DR", "practiceaddress2": null, "practicecity": "SEARCY", "practicestate": "AR", "practicezip9code": 72143, "telephonenumber": 5012683311, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs", "latitude": 35.2523289226, "longitude": -91.7035943697, "is_contracted_for_cba": false}, {"provider_id": 20420801, "acceptsassignement": true, "participationbegindate": 1701302400000, "businessname": "JADD PHARMACY CORP", "practicename": "ROCK HILL PHARMACY", "practiceaddress1": "253 ROCK HILL DR", "practiceaddress2": null, "practicecity": "ROCK HILL", "practicestate": "NY", "practicezip9code": 127756620, "telephonenumber": 8457911515, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 41.62404, "longitude": -74.59359, "is_contracted_for_cba": false}, {"provider_id": 20303219, "acceptsassignement": false, "participationbegindate": 1701216000000, "businessname": "SNEDS PEDORTHICS LLC", "practicename": "SNEDS PEDORTHIC LLC", "practiceaddress1": "336 THOMPSON RD", "practiceaddress2": "STE 4", "practicecity": "WEBSTER", "practicestate": "MA", "practicezip9code": 15701586, "telephonenumber": 5084617511, "specialitieslist": null, "providertypelist": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 42.03648, "longitude": -71.85558, "is_contracted_for_cba": false}, {"provider_id": 20507753, "acceptsassignement": true, "participationbegindate": 1701129600000, "businessname": "ROCHESTER HOME INFUSION INC", "practicename": "ROCHESTER HOME INFUSION", "practiceaddress1": "221 1ST AVE SW", "practiceaddress2": "SUITE 105", "practicecity": "ROCHESTER", "practicestate": "MN", "practicezip9code": 559023107, "telephonenumber": 5073160001, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 44.02133, "longitude": -92.46463, "is_contracted_for_cba": false}, {"provider_id": 23280469, "acceptsassignement": true, "participationbegindate": 1700438400000, "businessname": "HEAL MEDICAL SUPPLY LLC", "practicename": "HEAL MEDICAL SUPPLY LLC", "practiceaddress1": "17541 17TH ST", "practiceaddress2": "STE 202", "practicecity": "TUSTIN", "practicestate": "CA", "practicezip9code": 927801984, "telephonenumber": 6575002023, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Pneumatic Compression Devices and/or Supplies|Ultraviolet Light Devices and/or Supplies|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 33.7601450103, "longitude": -117.8262130347, "is_contracted_for_cba": false}, {"provider_id": 23280481, "acceptsassignement": true, "participationbegindate": 1700179200000, "businessname": "SHIV HARI RX INC", "practicename": "SHIV HARI RX INC", "practiceaddress1": "255B E 165TH ST", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104566057, "telephonenumber": 7185370365, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.8295859819, "longitude": -73.9168416122, "is_contracted_for_cba": false}, {"provider_id": 23280493, "acceptsassignement": true, "participationbegindate": 1700092800000, "businessname": "MR PHARMACIST LLC", "practicename": "MR PHARMACIST LLC", "practiceaddress1": "3552 E TREMONT AVE", "practiceaddress2": "STORE #2", "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104652059, "telephonenumber": 3472935741, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.8299095234, "longitude": -73.82573988, "is_contracted_for_cba": false}, {"provider_id": 20303285, "acceptsassignement": true, "participationbegindate": 1699920000000, "businessname": "BOSTON DME COMPANY LLC", "practicename": "BOSTON DME COMPANY LLC", "practiceaddress1": "67 MAPLEWOOD ST", "practiceaddress2": "STE 120", "practicecity": "MALDEN", "practicestate": "MA", "practicezip9code": 21484377, "telephonenumber": 8338331721, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 42.43129, "longitude": -71.04586, "is_contracted_for_cba": false}, {"provider_id": 23280199, "acceptsassignement": true, "participationbegindate": 1704326400000, "businessname": "VIVITAL, INC.", "practicename": "VIVITAL, INC.", "practiceaddress1": "1450 N TUSTIN AVE", "practiceaddress2": "STE 150", "practicecity": "SANTA ANA", "practicestate": "CA", "practicezip9code": 927058653, "telephonenumber": 6572358255, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf", "latitude": 33.7576430122, "longitude": -117.8347530206, "is_contracted_for_cba": false}, {"provider_id": 20680415, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #760", "practiceaddress1": "760 PRENTICE ST", "practiceaddress2": null, "practicecity": "GRANITE FALLS", "practicestate": "MN", "practicezip9code": 562411541, "telephonenumber": 3205642339, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 44.8107, "longitude": -95.53813, "is_contracted_for_cba": false}, {"provider_id": 20680553, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #752", "practiceaddress1": "211 SOUTH MAIN STREET", "practiceaddress2": null, "practicecity": "MAHNOMEN", "practicestate": "MN", "practicezip9code": 565570457, "telephonenumber": 2189352525, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47.31371, "longitude": -95.96873, "is_contracted_for_cba": false}, {"provider_id": 23280547, "acceptsassignement": true, "participationbegindate": 1699401600000, "businessname": "BLOOMING LIGHT RX INC", "practicename": "BLOOMING LIGHT RX INC", "practiceaddress1": "3907 PRINCE ST", "practiceaddress2": "STE 1B", "practicecity": "FLUSHING", "practicestate": "NY", "practicezip9code": 113545321, "telephonenumber": 9179832638, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7593726231, "longitude": -73.8320351922, "is_contracted_for_cba": false}, {"provider_id": 20347331, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "SOUTH BROWARD HOSPITAL DISTRICT", "practicename": "MEMORIAL REGIONAL HOSPITAL SOUTH PH", "practiceaddress1": "777 S DOUGLAS RD", "practiceaddress2": null, "practicecity": "PEMBROKE PINES", "practicestate": "FL", "practicezip9code": 330251353, "telephonenumber": 9545185675, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 26.00298, "longitude": -80.17975, "is_contracted_for_cba": false}, {"provider_id": 20680463, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #738", "practiceaddress1": "209 WASHINGTON ST", "practiceaddress2": null, "practicecity": "BRAINERD", "practicestate": "MN", "practicezip9code": 564013393, "telephonenumber": 2188293529, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 46.35822, "longitude": -94.20591, "is_contracted_for_cba": false}, {"provider_id": 20412839, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "1721 MILLER ST", "practiceaddress2": null, "practicecity": "LA CROSSE", "practicestate": "WI", "practicezip9code": 546015217, "telephonenumber": 6087846500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.79506, "longitude": -91.25194, "is_contracted_for_cba": false}, {"provider_id": 20680481, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE PHARMACY #734", "practiceaddress1": "1484 W LINCOLN AVE", "practiceaddress2": null, "practicecity": "FERGUS FALLS", "practicestate": "MN", "practicezip9code": 565371032, "telephonenumber": 2187365565, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 46.28421, "longitude": -96.10038, "is_contracted_for_cba": false}, {"provider_id": 20680601, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "THRIFTY DRUG STORES INC", "practicename": "THRIFTY WHITE DRUG #759", "practiceaddress1": "319 W MAIN ST", "practiceaddress2": null, "practicecity": "ADA", "practicestate": "MN", "practicezip9code": 565101251, "telephonenumber": 2187842434, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Surgical Dressings", "latitude": 47.29911, "longitude": -96.51676, "is_contracted_for_cba": false}, {"provider_id": 21611367, "acceptsassignement": false, "participationbegindate": 1704067200000, "businessname": "LIBERTY RX INC", "practicename": "LIBERTY RX INC", "practiceaddress1": "12704 LIBERTY AVE", "practiceaddress2": null, "practicecity": "JAMAICA", "practicestate": "NY", "practicezip9code": 114192216, "telephonenumber": 7188802053, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.6886337608, "longitude": -73.8176484098, "is_contracted_for_cba": false}, {"provider_id": 20412827, "acceptsassignement": true, "participationbegindate": 1704067200000, "businessname": "HEALTHDIRECT INSTITUTIONAL PHARMACY SERVICES INC", "practicename": "HEALTHDIRECT INSTITUTIONAL PHARMACY", "practiceaddress1": "3184 LONDON RD", "practiceaddress2": null, "practicecity": "EAU CLAIRE", "practicestate": "WI", "practicezip9code": 547016834, "telephonenumber": 7158323780, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44.78695, "longitude": -91.46303, "is_contracted_for_cba": false}, {"provider_id": 20578151, "acceptsassignement": false, "participationbegindate": 1699401600000, "businessname": "ROBERTS HOME MEDICAL LLC.", "practicename": "ROBERTS HOME MEDICAL LLC", "practiceaddress1": "115 JULIAD CT", "practiceaddress2": "STE 111", "practicecity": "FREDERICKSBURG", "practicestate": "VA", "practicezip9code": 224061100, "telephonenumber": 5403483033, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies", "latitude": 38.35985, "longitude": -77.51268, "is_contracted_for_cba": false}, {"provider_id": 23280595, "acceptsassignement": true, "participationbegindate": 1698969600000, "businessname": "INFUSIONS SERVICES OF LOUISIANA LLC", "practicename": "VITAL CARE OF LAFAYETTE", "practiceaddress1": "101 LA RUE FRANCE", "practiceaddress2": "STE 100", "practicecity": "LAFAYETTE", "practicestate": "LA", "practicezip9code": 705083138, "telephonenumber": 3379018880, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 30.1948690089, "longitude": -92.0147239938, "is_contracted_for_cba": false}, {"provider_id": 20510897, "acceptsassignement": false, "participationbegindate": 1698710400000, "businessname": "PHARMSCRIPT OF FLORIDA LLC", "practicename": "PHARMSCRIPT OF FLORIDA LLC", "practiceaddress1": "15491 SW 12TH ST", "practiceaddress2": "STE 400", "practicecity": "SUNRISE", "practicestate": "FL", "practicezip9code": 333261994, "telephonenumber": 9083891818, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 26.10421, "longitude": -80.35486, "is_contracted_for_cba": false}, {"provider_id": 20339039, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10265", "practiceaddress1": "2421 SAM HOUSTON AVE", "practiceaddress2": null, "practicecity": "HUNTSVILLE", "practicestate": "TX", "practicezip9code": 773405862, "telephonenumber": 9364399038, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.71426, "longitude": -95.55097, "is_contracted_for_cba": false}, {"provider_id": 20339033, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10544", "practiceaddress1": "5902 FM 1463 RD", "practiceaddress2": null, "practicecity": "KATY", "practicestate": "TX", "practicezip9code": 774945647, "telephonenumber": 2812327014, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.76275, "longitude": -95.81303, "is_contracted_for_cba": false}, {"provider_id": 20315759, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01020", "practiceaddress1": "1484 RUBEN TORRES SR BLVD", "practiceaddress2": null, "practicecity": "BROWNSVILLE", "practicestate": "TX", "practicezip9code": 785211537, "telephonenumber": 9565410167, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 25.95117, "longitude": -97.49635, "is_contracted_for_cba": false}, {"provider_id": 20338865, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 02282", "practiceaddress1": "703 GALLIVAN BLVD", "practiceaddress2": null, "practicecity": "DORCHESTER", "practicestate": "MA", "practicezip9code": 21245423, "telephonenumber": 6172878292, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.28339, "longitude": -71.04835, "is_contracted_for_cba": false}, {"provider_id": 20338655, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01247", "practiceaddress1": "2992 CRANBERRY HWY", "practiceaddress2": null, "practicecity": "EAST WAREHAM", "practicestate": "MA", "practicezip9code": 25381336, "telephonenumber": 5082953880, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.75998, "longitude": -70.66765, "is_contracted_for_cba": false}, {"provider_id": 20339729, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00915", "practiceaddress1": "19 DODGE ST", "practiceaddress2": "STE A", "practicecity": "BEVERLY", "practicestate": "MA", "practicezip9code": 19151705, "telephonenumber": 9789270060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.57611, "longitude": -70.89147, "is_contracted_for_cba": false}, {"provider_id": 20339711, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02325", "practiceaddress1": "1025 CENTRAL ST", "practiceaddress2": null, "practicecity": "STOUGHTON", "practicestate": "MA", "practicezip9code": 20724401, "telephonenumber": 7813416114, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.13553, "longitude": -71.10167, "is_contracted_for_cba": false}, {"provider_id": 20339735, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00946", "practiceaddress1": "323 N MAIN ST", "practiceaddress2": null, "practicecity": "UXBRIDGE", "practicestate": "MA", "practicezip9code": 15691757, "telephonenumber": 5082782456, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.0909, "longitude": -71.64283, "is_contracted_for_cba": false}, {"provider_id": 20335241, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 07170", "practiceaddress1": "1229 W IL ROUTE 134", "practiceaddress2": null, "practicecity": "ROUND LAKE", "practicestate": "IL", "practicezip9code": 600739725, "telephonenumber": 8477406795, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.36304, "longitude": -88.11244, "is_contracted_for_cba": false}, {"provider_id": 20338997, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10324", "practiceaddress1": "6420 GASTON AVE", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752144022, "telephonenumber": 4693340758, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.81524, "longitude": -96.75148, "is_contracted_for_cba": false}, {"provider_id": 20315537, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01875", "practiceaddress1": "414 UNION STREET", "practiceaddress2": null, "practicecity": "ASHLAND", "practicestate": "MA", "practicezip9code": 17212154, "telephonenumber": 5088817606, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.25558, "longitude": -71.46559, "is_contracted_for_cba": false}, {"provider_id": 20314637, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10665", "practiceaddress1": "1555 E RENNER RD", "practiceaddress2": null, "practicecity": "RICHARDSON", "practicestate": "TX", "practicezip9code": 750822299, "telephonenumber": 9722381395, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.99736, "longitude": -96.69384, "is_contracted_for_cba": false}, {"provider_id": 20315111, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 17604", "practiceaddress1": "460 S VANCE ST", "practiceaddress2": null, "practicecity": "LAKEWOOD", "practicestate": "CO", "practicezip9code": 802263305, "telephonenumber": 3032097750, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.70879, "longitude": -105.07966, "is_contracted_for_cba": false}, {"provider_id": 20314643, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10601", "practiceaddress1": "655 MOUNT AUBURN STREET", "practiceaddress2": null, "practicecity": "WATERTOWN", "practicestate": "MA", "practicezip9code": 2472, "telephonenumber": 6177440842, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.3716, "longitude": -71.15735, "is_contracted_for_cba": false}, {"provider_id": 20315081, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10906", "practiceaddress1": "22125 CUMBERLAND RIDGE DR", "practiceaddress2": null, "practicecity": "CYPRESS", "practicestate": "TX", "practicezip9code": 774334074, "telephonenumber": 2817581031, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.93262, "longitude": -95.72533, "is_contracted_for_cba": false}, {"provider_id": 20314841, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10635", "practiceaddress1": "476 W I-30", "practiceaddress2": null, "practicecity": "ROYSE CITY", "practicestate": "TX", "practicezip9code": 751899706, "telephonenumber": 9726352470, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.88657, "longitude": -96.34084, "is_contracted_for_cba": false}, {"provider_id": 20314715, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10580", "practiceaddress1": "9884 HWY 242", "practiceaddress2": null, "practicecity": "CONROE", "practicestate": "TX", "practicezip9code": 77385, "telephonenumber": 9362735444, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.20838, "longitude": -95.42853, "is_contracted_for_cba": false}, {"provider_id": 20335163, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #07020", "practiceaddress1": "1701 FORT JESSE RD", "practiceaddress2": null, "practicecity": "NORMAL", "practicestate": "IL", "practicezip9code": 617612285, "telephonenumber": 3094521370, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.51763, "longitude": -88.95117, "is_contracted_for_cba": false}, {"provider_id": 20314757, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10667", "practiceaddress1": "111 E HIDALGO AVE", "practiceaddress2": null, "practicecity": "RAYMONDVILLE", "practicestate": "TX", "practicezip9code": 78580, "telephonenumber": 9566892830, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 26.48199, "longitude": -97.78209, "is_contracted_for_cba": false}, {"provider_id": 20317013, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01184", "practiceaddress1": "MARKET BASKET CENTER RT 1 NEWBURYPORT TURNPIKE", "practiceaddress2": null, "practicecity": "ROWLEY", "practicestate": "MA", "practicezip9code": 19699801, "telephonenumber": 9789482575, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.71576, "longitude": -70.87893, "is_contracted_for_cba": false}, {"provider_id": 20316989, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00929", "practiceaddress1": "272 E CENTRAL ST", "practiceaddress2": null, "practicecity": "FRANKLIN", "practicestate": "MA", "practicezip9code": 20381319, "telephonenumber": 5085280597, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.08031, "longitude": -71.38542, "is_contracted_for_cba": false}, {"provider_id": 20315669, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 07232", "practiceaddress1": "689 DEPOT ST", "practiceaddress2": null, "practicecity": "NORTH EASTON", "practicestate": "MA", "practicezip9code": 23562703, "telephonenumber": 5082380604, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.02632, "longitude": -71.11748, "is_contracted_for_cba": false}, {"provider_id": 20315261, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01865", "practiceaddress1": "155 CENTER ST", "practiceaddress2": null, "practicecity": "PEMBROKE", "practicestate": "MA", "practicezip9code": 23592654, "telephonenumber": 7812933113, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.06809, "longitude": -70.81013, "is_contracted_for_cba": false}, {"provider_id": 20337131, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #07962", "practiceaddress1": "5685 BALBOA AVE", "practiceaddress2": null, "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921112705, "telephonenumber": 8582792860, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.81998, "longitude": -117.17947, "is_contracted_for_cba": false}, {"provider_id": 20337095, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09146", "practiceaddress1": "575 S CITRUS AVE", "practiceaddress2": null, "practicecity": "COVINA", "practicestate": "CA", "practicezip9code": 917232930, "telephonenumber": 6263310036, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.07949, "longitude": -117.89023, "is_contracted_for_cba": false}, {"provider_id": 20336915, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY 09153", "practiceaddress1": "42520 BOB HOPE DRIVE", "practiceaddress2": null, "practicecity": "RANCHO MIRAGE", "practicestate": "CA", "practicezip9code": 922704471, "telephonenumber": 7605685651, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.73907, "longitude": -116.40808, "is_contracted_for_cba": false}, {"provider_id": 20340527, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01023", "practiceaddress1": "34 CAMBRIDGE ST", "practiceaddress2": "SPACE 160", "practicecity": "BURLINGTON", "practicestate": "MA", "practicezip9code": 18034611, "telephonenumber": 7812733645, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.49451, "longitude": -71.19444, "is_contracted_for_cba": false}, {"provider_id": 20340461, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY# 08441", "practiceaddress1": "301 CENTRAL ST", "practiceaddress2": null, "practicecity": "WINCHENDON", "practicestate": "MA", "practicezip9code": 14751402, "telephonenumber": 9782973792, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.68618, "longitude": -72.04417, "is_contracted_for_cba": false}, {"provider_id": 20340587, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #04820", "practiceaddress1": "100 N DUMAS AVE", "practiceaddress2": null, "practicecity": "DUMAS", "practicestate": "TX", "practicezip9code": 790292432, "telephonenumber": 8069352387, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.86667, "longitude": -101.97311, "is_contracted_for_cba": false}, {"provider_id": 20339303, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00674", "practiceaddress1": "980-986 GREAT PLAIN AVE", "practiceaddress2": null, "practicecity": "NEEDHAM", "practicestate": "MA", "practicezip9code": 24922508, "telephonenumber": 7814492270, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.28033, "longitude": -71.23685, "is_contracted_for_cba": false}, {"provider_id": 20337359, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09809", "practiceaddress1": "4959 MARCONI AVE", "practiceaddress2": null, "practicecity": "CARMICHAEL", "practicestate": "CA", "practicezip9code": 956084112, "telephonenumber": 9164851144, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.61748, "longitude": -121.34814, "is_contracted_for_cba": false}, {"provider_id": 20308487, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MARYLAND CVS PHARMACY LLC.", "practicename": "CVS PHARMACY # 10606", "practiceaddress1": "7955 BAYSIDE RD", "practiceaddress2": null, "practicecity": "CHESAPEAKE BEACH", "practicestate": "MD", "practicezip9code": 207323112, "telephonenumber": 4102572050, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.69006, "longitude": -76.53575, "is_contracted_for_cba": false}, {"provider_id": 20308691, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05304", "practiceaddress1": "4572 HIGHWAY 1", "practiceaddress2": null, "practicecity": "RACELAND", "practicestate": "LA", "practicezip9code": 703942772, "telephonenumber": 9855373296, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.70525, "longitude": -90.56783, "is_contracted_for_cba": false}, {"provider_id": 23279887, "acceptsassignement": false, "participationbegindate": 1714608000000, "businessname": "PHARMCARE USA OF EL PASO LLC", "practicename": "PHARMCARE USA OF EL PASO", "practiceaddress1": "10350 MONTANA AVE", "practiceaddress2": "SUITE A", "practicecity": "EL PASO", "practicestate": "TX", "practicezip9code": 799251602, "telephonenumber": 9154551167, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 31.7966789947, "longitude": -106.3381129998, "is_contracted_for_cba": false}, {"provider_id": 34358414, "acceptsassignement": true, "participationbegindate": 1714435200000, "businessname": "WECARE DME SUPPLIES CORP", "practicename": "WECARE DME SUPPLIES", "practiceaddress1": "7111 HARWIN DR", "practiceaddress2": "STE 175", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770362132, "telephonenumber": 7133895200, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Surgical Dressings", "latitude": 29.7176960202, "longitude": -95.5080350281, "is_contracted_for_cba": false}, {"provider_id": 20459411, "acceptsassignement": true, "participationbegindate": 1714348800000, "businessname": "VALLEY PHARMACY & DME OF EAST ALABAMA INC", "practicename": "VALLEY PHARMACY", "practiceaddress1": "4103 20TH AVE", "practiceaddress2": null, "practicecity": "VALLEY", "practicestate": "AL", "practicezip9code": 368543448, "telephonenumber": 3347562037, "specialitieslist": "Orthotic Personnel|Pharmacy", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Diabetic Shoes and Inserts", "latitude": 32.79123, "longitude": -85.15705, "is_contracted_for_cba": false}, {"provider_id": 20683847, "acceptsassignement": true, "participationbegindate": 1713916800000, "businessname": "PATHWAY MEDICAL SUPPLY", "practicename": "PATHWAY MEDICAL SUPPLY", "practiceaddress1": "525 N AZUSA AVE", "practiceaddress2": "STE 111", "practicecity": "LA PUENTE", "practicestate": "CA", "practicezip9code": 917444261, "telephonenumber": 3108018575, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 34.0268909903, "longitude": -117.9173880247, "is_contracted_for_cba": false}, {"provider_id": 23280229, "acceptsassignement": true, "participationbegindate": 1713398400000, "businessname": "KABAFUSION OH, LLC", "practicename": "KABAFUSION OH, LLC", "practiceaddress1": "4153 ARLINGATE PLAZA", "practiceaddress2": "SUITES 4153 & 4157", "practicecity": "COLUMBUS", "practicestate": "OH", "practicezip9code": 432284115, "telephonenumber": 8773784063, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Infusion Drugs|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Urological Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 39.9885150138, "longitude": -83.1164270188, "is_contracted_for_cba": false}, {"provider_id": 23278987, "acceptsassignement": true, "participationbegindate": 1713312000000, "businessname": "IRIDIUM SPECIALTY PHARMACY PLLC", "practicename": "IRIDIUM SPECIALTY PHARMACY", "practiceaddress1": "2240 NAVIGATION BLVD", "practiceaddress2": "STE 200-B", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770031564, "telephonenumber": 7133247235, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "External Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies", "latitude": 29.7578579931, "longitude": -95.34736702, "is_contracted_for_cba": false}, {"provider_id": 23279083, "acceptsassignement": true, "participationbegindate": 1712102400000, "businessname": "108 PHARMACY INC", "practicename": "108 PHARMACY INC", "practiceaddress1": "4502 108TH ST", "practiceaddress2": null, "practicecity": "CORONA", "practicestate": "NY", "practicezip9code": 113682917, "telephonenumber": 7188471982, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7477796547, "longitude": -73.8574176067, "is_contracted_for_cba": false}, {"provider_id": 20328287, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02408", "practiceaddress1": "802 LANDSDOWNE AVE", "practiceaddress2": null, "practicecity": "DREXEL HILL", "practicestate": "PA", "practicezip9code": 190261526, "telephonenumber": 6108536018, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.95982, "longitude": -75.28809, "is_contracted_for_cba": false}, {"provider_id": 20328707, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05098", "practiceaddress1": "330 W COLUMBUS AVE", "practiceaddress2": null, "practicecity": "CORRY", "practicestate": "PA", "practicezip9code": 16407, "telephonenumber": 8146642617, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.9346, "longitude": -79.65726, "is_contracted_for_cba": false}, {"provider_id": 20328851, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 02131", "practiceaddress1": "3943 HULMEVILLE ROAD", "practiceaddress2": null, "practicecity": "BENSALEM", "practicestate": "PA", "practicezip9code": 19020, "telephonenumber": 2152447002, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.10923, "longitude": -74.93623, "is_contracted_for_cba": false}, {"provider_id": 20328809, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07132", "practiceaddress1": "3015 LINCOLN HWY", "practiceaddress2": null, "practicecity": "THORNDALE", "practicestate": "PA", "practicezip9code": 193721114, "telephonenumber": 6103807180, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.99364, "longitude": -75.76287, "is_contracted_for_cba": false}, {"provider_id": 20327261, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02880", "practiceaddress1": "901 BRISTOL PIKE", "practiceaddress2": null, "practicecity": "CROYDON", "practicestate": "PA", "practicezip9code": 190216267, "telephonenumber": 2157856345, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.09421, "longitude": -74.90529, "is_contracted_for_cba": false}, {"provider_id": 20327297, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02986", "practiceaddress1": "7065 LINCOLN DR", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191192541, "telephonenumber": 2152421869, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.05284, "longitude": -75.19324, "is_contracted_for_cba": false}, {"provider_id": 20329343, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "WOODWARD DETROIT CVS LLC", "practiceaddress1": "3250 US HIGHWAY 41 W", "practiceaddress2": null, "practicecity": "MARQUETTE", "practicestate": "MI", "practicezip9code": 498559483, "telephonenumber": 9062260095, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 46.51718, "longitude": -87.45015, "is_contracted_for_cba": false}, {"provider_id": 20329337, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #16128", "practiceaddress1": "2772 TITTABAWASSEE RD", "practiceaddress2": null, "practicecity": "SAGINAW", "practicestate": "MI", "practicezip9code": 486049433, "telephonenumber": 9897935701, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.4801, "longitude": -83.97107, "is_contracted_for_cba": false}, {"provider_id": 20327285, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05011", "practiceaddress1": "9 MAIN ST", "practiceaddress2": null, "practicecity": "WELLSBORO", "practicestate": "PA", "practicezip9code": 169011601, "telephonenumber": 5707244303, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.74983, "longitude": -77.29878, "is_contracted_for_cba": false}, {"provider_id": 20329427, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #17126", "practiceaddress1": "3100 FAIRLANE DR", "practiceaddress2": null, "practicecity": "ALLEN PARK", "practicestate": "MI", "practicezip9code": 481012870, "telephonenumber": 3137680065, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.27383, "longitude": -83.20623, "is_contracted_for_cba": false}, {"provider_id": 20308187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03730", "practiceaddress1": "3700 S CARROLLTON AVE", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701184708, "telephonenumber": 5044881110, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.96552, "longitude": -90.11049, "is_contracted_for_cba": false}, {"provider_id": 20521823, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #409", "practiceaddress1": "100 OLD ORCHARD SQ", "practiceaddress2": null, "practicecity": "ELLIJAY", "practicestate": "GA", "practicezip9code": 305408172, "telephonenumber": 7066357176, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.67582, "longitude": -84.47832, "is_contracted_for_cba": false}, {"provider_id": 20521277, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #451", "practiceaddress1": "1502 ATLANTA HWY", "practiceaddress2": null, "practicecity": "AUBURN", "practicestate": "GA", "practicezip9code": 300113648, "telephonenumber": 7702775284, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.0101, "longitude": -83.83832, "is_contracted_for_cba": false}, {"provider_id": 20521871, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #457", "practiceaddress1": "1735 ZEBULON RD", "practiceaddress2": null, "practicecity": "GRIFFIN", "practicestate": "GA", "practicezip9code": 302235103, "telephonenumber": 7702285815, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.1927, "longitude": -84.28711, "is_contracted_for_cba": false}, {"provider_id": 20521775, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #498", "practiceaddress1": "631 VETERANS PKWY", "practiceaddress2": null, "practicecity": "BARNESVILLE", "practicestate": "GA", "practicezip9code": 302041555, "telephonenumber": 7703586815, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.04484, "longitude": -84.17252, "is_contracted_for_cba": false}, {"provider_id": 20521829, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #080", "practiceaddress1": "225 CARL ELLER RD", "practiceaddress2": null, "practicecity": "MARS HILL", "practicestate": "NC", "practicezip9code": 287546004, "telephonenumber": 8286809569, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.82508, "longitude": -82.54608, "is_contracted_for_cba": false}, {"provider_id": 20684033, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "EVERFIT MEDICAL INC", "practicename": "EVERFIT MEDICAL INC", "practiceaddress1": "2959 CHEROKEE ST NW", "practiceaddress2": "STE 103C", "practicecity": "KENNESAW", "practicestate": "GA", "practicezip9code": 301446522, "telephonenumber": 4043375542, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Diabetic Shoes and Inserts", "latitude": 34.025804528, "longitude": -84.6112634263, "is_contracted_for_cba": false}, {"provider_id": 20308127, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01939", "practiceaddress1": "1801 JEFFERSON HWY", "practiceaddress2": null, "practicecity": "JEFFERSON", "practicestate": "LA", "practicezip9code": 701212303, "telephonenumber": 5043246632, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.9635, "longitude": -90.14837, "is_contracted_for_cba": false}, {"provider_id": 20308595, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05354", "practiceaddress1": "1624 N BURNSIDE AVE", "practiceaddress2": null, "practicecity": "GONZALES", "practicestate": "LA", "practicezip9code": 707372139, "telephonenumber": 2256447528, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.2446, "longitude": -90.92073, "is_contracted_for_cba": false}, {"provider_id": 20308583, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05374", "practiceaddress1": "14360 WAX RD", "practiceaddress2": null, "practicecity": "BATON ROUGE", "practicestate": "LA", "practicezip9code": 708184279, "telephonenumber": 2252616541, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.54329, "longitude": -91.03076, "is_contracted_for_cba": false}, {"provider_id": 20308571, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05297", "practiceaddress1": "201 N CANAL BLVD", "practiceaddress2": null, "practicecity": "THIBODAUX", "practicestate": "LA", "practicezip9code": 703012910, "telephonenumber": 9854465646, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.79782, "longitude": -90.81805, "is_contracted_for_cba": false}, {"provider_id": 23279173, "acceptsassignement": false, "participationbegindate": 1710979200000, "businessname": "PRN MEDICAL SUPPLY INC", "practicename": "PRN MEDICAL SUPPLY INC", "practiceaddress1": "9898 BISSONNET ST", "practiceaddress2": "STE 277", "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770368025, "telephonenumber": 3469339432, "specialitieslist": "Certified Other", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Facial Prostheses|Neurostimulators and/or Supplies|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Nebulizer Equipment and/or Supplies|Respiratory Assist Devices|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 29.6758020109, "longitude": -95.5531229617, "is_contracted_for_cba": false}, {"provider_id": 23279179, "acceptsassignement": false, "participationbegindate": 1710892800000, "businessname": "HEALING CACTUS RX INC", "practicename": "HEALING CACTUS RX", "practiceaddress1": "12633 N CAVE CREEK RD", "practiceaddress2": "# 102", "practicecity": "PHOENIX", "practicestate": "AZ", "practicezip9code": 850225858, "telephonenumber": 4809563904, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33.6017126234, "longitude": -112.0364930444, "is_contracted_for_cba": false}, {"provider_id": 23279185, "acceptsassignement": true, "participationbegindate": 1710806400000, "businessname": "ADDICKS MEDICAL SUPPLY LLC", "practicename": "ADDICKS MEDICAL SUPPLY LLC", "practiceaddress1": "2735 VILLA CREEK DR", "practiceaddress2": "STE A-290", "practicecity": "FARMERS BRANCH", "practicestate": "TX", "practicezip9code": 752347454, "telephonenumber": 4692904040, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 32.9123740098, "longitude": -96.8854930237, "is_contracted_for_cba": false}, {"provider_id": 20521355, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #206", "practiceaddress1": "1500 GEER HWY", "practiceaddress2": null, "practicecity": "TRAVELERS REST", "practicestate": "SC", "practicezip9code": 296909204, "telephonenumber": 8648344409, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.99495, "longitude": -82.4714, "is_contracted_for_cba": false}, {"provider_id": 20521493, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #39", "practiceaddress1": "4396 HIGHWAY 24", "practiceaddress2": null, "practicecity": "ANDERSON", "practicestate": "SC", "practicezip9code": 296265212, "telephonenumber": 8642262398, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.50866, "longitude": -82.74658, "is_contracted_for_cba": false}, {"provider_id": 20521571, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #079", "practiceaddress1": "780 HENDERSONVILLE RD", "practiceaddress2": null, "practicecity": "ASHEVILLE", "practicestate": "NC", "practicezip9code": 288032900, "telephonenumber": 8282777466, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.54477, "longitude": -82.5335, "is_contracted_for_cba": false}, {"provider_id": 23283211, "acceptsassignement": true, "participationbegindate": 1727049600000, "businessname": "LIU SERVICES CORP", "practicename": "LIU SERVICES CORP", "practiceaddress1": "1850 SW 8TH ST", "practiceaddress2": "STE 204G", "practicecity": "MIAMI", "practicestate": "FL", "practicezip9code": 331353434, "telephonenumber": 7863913978, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 25.7653741146, "longitude": -80.2254722362, "is_contracted_for_cba": false}, {"provider_id": 24548514, "acceptsassignement": false, "participationbegindate": 1727049600000, "businessname": "WELLCARE HEALTH SOLUTIONS INC", "practicename": "WELLCARE HEALTH SOLUTIONS INC", "practiceaddress1": "2800 W OAKLAND PARK BLVD", "practiceaddress2": "STE 102D", "practicecity": "OAKLAND PARK", "practicestate": "FL", "practicezip9code": 333111312, "telephonenumber": 9543147629, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 26.1649609805, "longitude": -80.1806700417, "is_contracted_for_cba": false}, {"provider_id": 23283205, "acceptsassignement": true, "participationbegindate": 1727049600000, "businessname": "CASO QUALITY EAST CORP", "practicename": "CASO QUALITY EAST CORP", "practiceaddress1": "4471 NW 36TH ST", "practiceaddress2": "STE 233", "practicecity": "MIAMI SPRINGS", "practicestate": "FL", "practicezip9code": 331667289, "telephonenumber": 7863594271, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 25.8085037422, "longitude": -80.2701180243, "is_contracted_for_cba": false}, {"provider_id": 23282941, "acceptsassignement": true, "participationbegindate": 1726444800000, "businessname": "LMT PHARMACY", "practicename": "EVERGREEN PHARMACY", "practiceaddress1": "9475 WARNER AVE", "practiceaddress2": "STE B", "practicecity": "FOUNTAIN VALLEY", "practicestate": "CA", "practicezip9code": 927082814, "telephonenumber": 7144659639, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33.7165040028, "longitude": -117.9637100259, "is_contracted_for_cba": false}, {"provider_id": 20684063, "acceptsassignement": true, "participationbegindate": 1726185600000, "businessname": "A-PLUS MEDICAL SUPPLIES, INC.", "practicename": "A-PLUS MEDICAL SUPPLIES, INC.", "practiceaddress1": "101 S KRAEMER BLVD", "practiceaddress2": "STE 223", "practicecity": "PLACENTIA", "practicestate": "CA", "practicezip9code": 928706110, "telephonenumber": 7142031373, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Off-The-Shelf|Urological Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 33.870235064, "longitude": -117.8636099854, "is_contracted_for_cba": false}, {"provider_id": 23282947, "acceptsassignement": true, "participationbegindate": 1726012800000, "businessname": "QUICKFILL RX INC", "practicename": "QUICKFILL PHARMACY", "practiceaddress1": "18455 BURBANK BLVD", "practiceaddress2": "STE 105", "practicecity": "TARZANA", "practicestate": "CA", "practicezip9code": 913566916, "telephonenumber": 8184574011, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.1725729938, "longitude": -118.5354369593, "is_contracted_for_cba": false}, {"provider_id": 20330243, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #04573", "practiceaddress1": "2650 RICE ST", "practiceaddress2": null, "practicecity": "LITTLE CANADA", "practicestate": "MN", "practicezip9code": 551132201, "telephonenumber": 6514840504, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.02189, "longitude": -93.10597, "is_contracted_for_cba": false}, {"provider_id": 20353535, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #324", "practiceaddress1": "216 WESTLAKE CTR", "practiceaddress2": null, "practicecity": "DALY CITY", "practicestate": "CA", "practicezip9code": 940151430, "telephonenumber": 6507564535, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.70088, "longitude": -122.48536, "is_contracted_for_cba": false}, {"provider_id": 20351075, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3829", "practiceaddress1": "8398 SHELDON RD", "practiceaddress2": null, "practicecity": "TAMPA", "practicestate": "FL", "practicezip9code": 336151609, "telephonenumber": 8138841487, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.02527, "longitude": -82.58315, "is_contracted_for_cba": false}, {"provider_id": 20308655, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05387", "practiceaddress1": "3621 GENERAL DEGAULLE DR", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701146716, "telephonenumber": 5043620700, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.9249, "longitude": -90.022, "is_contracted_for_cba": false}, {"provider_id": 20308895, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16708", "practiceaddress1": "6885 SIEGEN LN", "practiceaddress2": null, "practicecity": "BATON ROUGE", "practicestate": "LA", "practicezip9code": 708094528, "telephonenumber": 2252930652, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.38754, "longitude": -91.06299, "is_contracted_for_cba": false}, {"provider_id": 20310977, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17219", "practiceaddress1": "10302 156TH ST E", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983749321, "telephonenumber": 2536041067, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.11623, "longitude": -122.29085, "is_contracted_for_cba": false}, {"provider_id": 20312093, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17881", "practiceaddress1": "3450 HIGHWAY 190", "practiceaddress2": "STE 2", "practicecity": "MANDEVILLE", "practicestate": "LA", "practicezip9code": 704713196, "telephonenumber": 9853777247, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.39964, "longitude": -90.11563, "is_contracted_for_cba": false}, {"provider_id": 20308619, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 05503", "practiceaddress1": "4901 PRYTANIA ST", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701154017, "telephonenumber": 5048916307, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.92466, "longitude": -90.10833, "is_contracted_for_cba": false}, {"provider_id": 20308883, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17441", "practiceaddress1": "3225 LOUISIANA AVE", "practiceaddress2": null, "practicecity": "LAFAYETTE", "practicestate": "LA", "practicezip9code": 705011406, "telephonenumber": 3377697516, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.26155, "longitude": -91.99351, "is_contracted_for_cba": false}, {"provider_id": 20352617, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1131 E SUPERIOR ST", "practiceaddress2": null, "practicecity": "DULUTH", "practicestate": "MN", "practicezip9code": 558022216, "telephonenumber": 2187243060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 46.79794, "longitude": -92.08402, "is_contracted_for_cba": false}, {"provider_id": 20352569, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11630", "practiceaddress1": "6918 HAMILTON AVE", "practiceaddress2": null, "practicecity": "CINCINNATI", "practicestate": "OH", "practicezip9code": 452315212, "telephonenumber": 5139311717, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.218, "longitude": -84.54935, "is_contracted_for_cba": false}, {"provider_id": 20352677, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7177", "practiceaddress1": "705 N PEBBLE BEACH BLVD", "practiceaddress2": null, "practicecity": "SUN CITY CENTER", "practicestate": "FL", "practicezip9code": 335735350, "telephonenumber": 8136348393, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.71301, "longitude": -82.35178, "is_contracted_for_cba": false}, {"provider_id": 20311991, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OKLAHOMA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06222", "practiceaddress1": "1220 N COMMERCE ST", "practiceaddress2": null, "practicecity": "ARDMORE", "practicestate": "OK", "practicezip9code": 734011806, "telephonenumber": 5802231041, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.18808, "longitude": -97.14284, "is_contracted_for_cba": false}, {"provider_id": 20308391, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10108", "practiceaddress1": "5902 READ BLVD", "practiceaddress2": null, "practicecity": "NEW ORLEANS", "practicestate": "LA", "practicezip9code": 701272615, "telephonenumber": 5042440969, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.0351, "longitude": -89.97497, "is_contracted_for_cba": false}, {"provider_id": 20353577, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6751", "practiceaddress1": "514 E WINDHORST RD", "practiceaddress2": null, "practicecity": "BRANDON", "practicestate": "FL", "practicezip9code": 335102532, "telephonenumber": 8136572339, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.95976, "longitude": -82.27927, "is_contracted_for_cba": false}, {"provider_id": 20353583, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #01938", "practiceaddress1": "1208 ROYAL PALM BEACH BLVD", "practiceaddress2": null, "practicecity": "ROYAL PALM BEACH", "practicestate": "FL", "practicezip9code": 334111672, "telephonenumber": 5617989048, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.70759, "longitude": -80.22905, "is_contracted_for_cba": false}, {"provider_id": 20352335, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "4673 9TH ST N", "practiceaddress2": null, "practicecity": "NAPLES", "practicestate": "FL", "practicezip9code": 341033004, "telephonenumber": 2396496686, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 26.20385, "longitude": -81.80028, "is_contracted_for_cba": false}, {"provider_id": 20352353, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4734", "practiceaddress1": "719 S HIGHWAY 19", "practiceaddress2": null, "practicecity": "PALATKA", "practicestate": "FL", "practicezip9code": 321773946, "telephonenumber": 3863286787, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.64208, "longitude": -81.67577, "is_contracted_for_cba": false}, {"provider_id": 20308163, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LOUISIANA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #04752", "practiceaddress1": "1203 WESTBANK EXPY", "practiceaddress2": null, "practicecity": "WESTWEGO", "practicestate": "LA", "practicezip9code": 700944755, "telephonenumber": 5043711061, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.8991, "longitude": -90.13796, "is_contracted_for_cba": false}, {"provider_id": 20305469, "acceptsassignement": true, "participationbegindate": 1693094400000, "businessname": "EUCLID PHARMACY LLC", "practicename": "EUCLID PHARMACY LLC", "practiceaddress1": "206 N EUCLID AVE", "practiceaddress2": null, "practicecity": "BAY CITY", "practicestate": "MI", "practicezip9code": 487062942, "telephonenumber": 9897785001, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 43.60329, "longitude": -83.91499, "is_contracted_for_cba": false}, {"provider_id": 34356980, "acceptsassignement": true, "participationbegindate": 1692576000000, "businessname": "BELPRE HEALTHCARE LLC", "practicename": "BELPRE HEALTHCARE LLC", "practiceaddress1": "812 FARSON ST", "practiceaddress2": null, "practicecity": "BELPRE", "practicestate": "OH", "practicezip9code": 457141010, "telephonenumber": 7407800204, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Orthoses: Off-The-Shelf|Nebulizer Equipment and/or Supplies", "latitude": 39.2832439948, "longitude": -81.6103229865, "is_contracted_for_cba": false}, {"provider_id": 34357010, "acceptsassignement": false, "participationbegindate": 1692144000000, "businessname": "ROOTS PHARMACY INC", "practicename": "ROOTS PHARMACY INC", "practiceaddress1": "5 NEW HYDE PARK RD", "practiceaddress2": null, "practicecity": "FRANKLIN SQUARE", "practicestate": "NY", "practicezip9code": 110103609, "telephonenumber": 5163028430, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7077669216, "longitude": -73.6760256783, "is_contracted_for_cba": false}, {"provider_id": 34357040, "acceptsassignement": true, "participationbegindate": 1691452800000, "businessname": "PERSONALRX NYC LLC", "practicename": "PERSONALRX NYC LLC", "practiceaddress1": "5369 KINGS HWY", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112036704, "telephonenumber": 8002036282, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.6397686064, "longitude": -73.9255322208, "is_contracted_for_cba": false}, {"provider_id": 34357052, "acceptsassignement": true, "participationbegindate": 1691366400000, "businessname": "MEDS AND BEYOND INC.", "practicename": "MEDS AND BEYOND INC.", "practiceaddress1": "8430 164TH ST", "practiceaddress2": null, "practicecity": "JAMAICA", "practicestate": "NY", "practicezip9code": 114321734, "telephonenumber": 7183743043, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7144298222, "longitude": -73.8026053243, "is_contracted_for_cba": false}, {"provider_id": 20351201, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02644", "practiceaddress1": "2010 ALAMO DR", "practiceaddress2": null, "practicecity": "VACAVILLE", "practicestate": "CA", "practicezip9code": 956876289, "telephonenumber": 7074518304, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.33526, "longitude": -121.9691, "is_contracted_for_cba": false}, {"provider_id": 20315867, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05858", "practiceaddress1": "15038 NACOGDOCHES RD", "practiceaddress2": null, "practicecity": "SAN ANTONIO", "practicestate": "TX", "practicezip9code": 782471210, "telephonenumber": 2106467045, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.5777, "longitude": -98.37302, "is_contracted_for_cba": false}, {"provider_id": 20316923, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07430", "practiceaddress1": "8555 FERGUSON RD", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752285343, "telephonenumber": 2143200892, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.81155, "longitude": -96.70218, "is_contracted_for_cba": false}, {"provider_id": 20316035, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00023", "practiceaddress1": "211 LINCOLN AVENUE", "practiceaddress2": null, "practicecity": "HAVERHILL", "practicestate": "MA", "practicezip9code": 18306738, "telephonenumber": 9783720291, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.76404, "longitude": -71.03863, "is_contracted_for_cba": false}, {"provider_id": 20315645, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00657", "practiceaddress1": "400 PARK AVE", "practiceaddress2": null, "practicecity": "WORCESTER", "practicestate": "MA", "practicezip9code": 16101025, "telephonenumber": 5087923866, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.25711, "longitude": -71.82318, "is_contracted_for_cba": false}, {"provider_id": 20311745, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARKANSAS CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10019", "practiceaddress1": "3908 N STATE LINE AVE", "practiceaddress2": null, "practicecity": "TEXARKANA", "practicestate": "AR", "practicezip9code": 718541935, "telephonenumber": 8707720236, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.46129, "longitude": -94.04301, "is_contracted_for_cba": false}, {"provider_id": 20305655, "acceptsassignement": false, "participationbegindate": 1690329600000, "businessname": "PW PLAZA RX INC", "practicename": "PARK WEST PLAZA PHARMACY", "practiceaddress1": "7230 MEDICAL CENTER DR", "practiceaddress2": "STE 106", "practicecity": "WEST HILLS", "practicestate": "CA", "practicezip9code": 913074003, "telephonenumber": 8183466550, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34.2038, "longitude": -118.62973, "is_contracted_for_cba": false}, {"provider_id": 20667143, "acceptsassignement": true, "participationbegindate": 1689897600000, "businessname": "PREMIER ORTHOPAEDIC AND SPORTS MEDICINE ASSOCIATES, LTD", "practicename": "PREMIER ORTHOPAEDIC AND SPORTS MEDI", "practiceaddress1": "300 SPRING HOUSE DRIVE", "practiceaddress2": "SUITE 200", "practicecity": "COLLEGEVILLE", "practicestate": "PA", "practicezip9code": 194264021, "telephonenumber": 6106446900, "specialitieslist": "Orthotic Personnel", "providertypelist": "PHYSICIAN \u2013 ORTHOPEDIC/ORTHOPEDIC SURGERY", "supplieslist": "(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.16374, "longitude": -75.47547, "is_contracted_for_cba": false}, {"provider_id": 34357166, "acceptsassignement": true, "participationbegindate": 1689811200000, "businessname": "LIRX PHARMACY INC", "practicename": "LIRX PHARMACY INC", "practiceaddress1": "930 WHEELER RD", "practiceaddress2": null, "practicecity": "HAUPPAUGE", "practicestate": "NY", "practicezip9code": 117882900, "telephonenumber": 6317247096, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.8247813861, "longitude": -73.2044287933, "is_contracted_for_cba": false}, {"provider_id": 20305721, "acceptsassignement": true, "participationbegindate": 1689724800000, "businessname": "BROOKLYN MEDICAL EQUIPMENT INC", "practicename": "BROOKLYN MEDICAL EQUIPMENT INC", "practiceaddress1": "6415 LAKE WORTH RD", "practiceaddress2": "STE 211", "practicecity": "GREENACRES", "practicestate": "FL", "practicezip9code": 334632905, "telephonenumber": 5615324200, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 26.61927, "longitude": -80.1455, "is_contracted_for_cba": false}, {"provider_id": 20379557, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #17222", "practiceaddress1": "730 S LEWIS ST", "practiceaddress2": null, "practicecity": "METTER", "practicestate": "GA", "practicezip9code": 304395127, "telephonenumber": 9126855170, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.38419, "longitude": -82.06156, "is_contracted_for_cba": false}, {"provider_id": 20305811, "acceptsassignement": true, "participationbegindate": 1689292800000, "businessname": "HANSRA OPTOMETRIC CORPORATION", "practicename": "VISIONWORKS DOCTORS OF OPTOMETRY", "practiceaddress1": "825 E BIDWELL ST", "practiceaddress2": "STE 100", "practicecity": "FOLSOM", "practicestate": "CA", "practicezip9code": 956304207, "telephonenumber": 2792021205, "specialitieslist": "Optician", "providertypelist": null, "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses|Prosthetic Lenses: Prosthetics Cataract Lenses", "latitude": 38.6698, "longitude": -121.15556, "is_contracted_for_cba": false}, {"provider_id": 20316935, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 01273", "practiceaddress1": "50 SW CUTOFF", "practiceaddress2": null, "practicecity": "WORCESTER", "practicestate": "MA", "practicezip9code": 16041534, "telephonenumber": 5087931903, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.23913, "longitude": -71.7457, "is_contracted_for_cba": false}, {"provider_id": 20317379, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #01221", "practiceaddress1": "50 MEDWAY RD", "practiceaddress2": null, "practicecity": "MILFORD", "practicestate": "MA", "practicezip9code": 17572918, "telephonenumber": 5086343090, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.15032, "longitude": -71.50241, "is_contracted_for_cba": false}, {"provider_id": 20316953, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07140", "practiceaddress1": "599 STATE RD", "practiceaddress2": null, "practicecity": "WESTPORT", "practicestate": "MA", "practicezip9code": 27902819, "telephonenumber": 5086733072, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.66006, "longitude": -71.08392, "is_contracted_for_cba": false}, {"provider_id": 20317403, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00159", "practiceaddress1": "516-522 MAIN STREET", "practiceaddress2": null, "practicecity": "MELROSE", "practicestate": "MA", "practicezip9code": 21763880, "telephonenumber": 7816657107, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.4553, "longitude": -71.06531, "is_contracted_for_cba": false}, {"provider_id": 20317385, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00382", "practiceaddress1": "1504 MAIN ST", "practiceaddress2": null, "practicecity": "SOUTH WEYMOUTH", "practicestate": "MA", "practicezip9code": 21901363, "telephonenumber": 7813312580, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.15312, "longitude": -70.95498, "is_contracted_for_cba": false}, {"provider_id": 20366429, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "4051 DOUGLAS BLVD", "practiceaddress2": null, "practicecity": "GRANITE BAY", "practicestate": "CA", "practicezip9code": 957465901, "telephonenumber": 9167917576, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.74387, "longitude": -121.22509, "is_contracted_for_cba": false}, {"provider_id": 20366423, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6289", "practiceaddress1": "5900 CALLE REAL", "practiceaddress2": null, "practicecity": "GOLETA", "practicestate": "CA", "practicezip9code": 931172312, "telephonenumber": 8059673798, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.44162, "longitude": -119.82868, "is_contracted_for_cba": false}, {"provider_id": 20380241, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #17863", "practiceaddress1": "601 E KING ST", "practiceaddress2": null, "practicecity": "KINGS MOUNTAIN", "practicestate": "NC", "practicezip9code": 280863113, "telephonenumber": 7047399771, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.24095, "longitude": -81.33285, "is_contracted_for_cba": false}, {"provider_id": 20683607, "acceptsassignement": true, "participationbegindate": 1729555200000, "businessname": "GREAT HELP MEDICAL SUPPLY LLC", "practicename": "GREAT HELP MEDICAL SUPPLY LLC", "practiceaddress1": "6490 LANDOVER RD", "practiceaddress2": "STE B ROOMS #5&6", "practicecity": "CHEVERLY", "practicestate": "MD", "practicezip9code": 207851443, "telephonenumber": 2408285162, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 38.9330756147, "longitude": -76.9038834315, "is_contracted_for_cba": false}, {"provider_id": 20317373, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05952", "practiceaddress1": "2313 W UNIVERSITY AVE", "practiceaddress2": null, "practicecity": "MCKINNEY", "practicestate": "TX", "practicezip9code": 750713318, "telephonenumber": 9725482856, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.21675, "longitude": -96.64507, "is_contracted_for_cba": false}, {"provider_id": 20317049, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #00610", "practiceaddress1": "10 SARAHS WAY", "practiceaddress2": null, "practicecity": "FAIRHAVEN", "practicestate": "MA", "practicezip9code": 27193161, "telephonenumber": 5089990790, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.64517, "longitude": -70.89712, "is_contracted_for_cba": false}, {"provider_id": 20317139, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00153", "practiceaddress1": "481 LINCOLN STREET", "practiceaddress2": null, "practicecity": "WORCESTER", "practicestate": "MA", "practicezip9code": 16051915, "telephonenumber": 5088523578, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.29315, "longitude": -71.77768, "is_contracted_for_cba": false}, {"provider_id": 20316269, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #08445", "practiceaddress1": "6220 SIENNA PKWY", "practiceaddress2": null, "practicecity": "MISSOURI CITY", "practicestate": "TX", "practicezip9code": 774596048, "telephonenumber": 2817789980, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.53936, "longitude": -95.54155, "is_contracted_for_cba": false}, {"provider_id": 20316263, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #09263", "practiceaddress1": "511 W CORDOVA RD", "practiceaddress2": null, "practicecity": "SANTA FE", "practicestate": "NM", "practicezip9code": 875051843, "telephonenumber": 5059835546, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.67256, "longitude": -105.94982, "is_contracted_for_cba": false}, {"provider_id": 20305823, "acceptsassignement": true, "participationbegindate": 1689120000000, "businessname": "QUALITYCARE DIABETIC SUPPLIES LLC", "practicename": "QUALITYCARE DIABETIC SUPPLIES", "practiceaddress1": "4001 WESTFAX DR", "practiceaddress2": "STE A", "practicecity": "CHANTILLY", "practicestate": "VA", "practicezip9code": 201511515, "telephonenumber": 7038631963, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf", "latitude": 38.90181, "longitude": -77.45567, "is_contracted_for_cba": false}, {"provider_id": 20366531, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5951", "practiceaddress1": "11509 CANYON RD E", "practiceaddress2": null, "practicecity": "PUYALLUP", "practicestate": "WA", "practicezip9code": 983734359, "telephonenumber": 2535394165, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 47.15114, "longitude": -122.35707, "is_contracted_for_cba": false}, {"provider_id": 20366363, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6017", "practiceaddress1": "2840 W AVENUE L", "practiceaddress2": null, "practicecity": "LANCASTER", "practicestate": "CA", "practicezip9code": 935364006, "telephonenumber": 6619438683, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.66013, "longitude": -118.18355, "is_contracted_for_cba": false}, {"provider_id": 20683619, "acceptsassignement": false, "participationbegindate": 1729036800000, "businessname": "DANIA HEALTH INC", "practicename": "DANIA HEALTH INC", "practiceaddress1": "750 E SAMPLE RD", "practiceaddress2": "STE 2-205", "practicecity": "POMPANO BEACH", "practicestate": "FL", "practicezip9code": 330645136, "telephonenumber": 9545321584, "specialitieslist": "MSC With Orthotic Personnel", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 26.2743080204, "longitude": -80.1114810352, "is_contracted_for_cba": false}, {"provider_id": 26717242, "acceptsassignement": true, "participationbegindate": 1728345600000, "businessname": "PLATINUM MED SUPPLIES LLC", "practicename": "PLATINUM MED SUPPLIES LLC", "practiceaddress1": "620 HILLCREST RD", "practiceaddress2": "STE 100", "practicecity": "LILBURN", "practicestate": "GA", "practicezip9code": 300476892, "telephonenumber": 8002767440, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 33.8983340114, "longitude": -84.147920033, "is_contracted_for_cba": false}, {"provider_id": 20683919, "acceptsassignement": true, "participationbegindate": 1728345600000, "businessname": "PIXI, LLC", "practicename": "PIXI LLC", "practiceaddress1": "1905 CENTRAL DR", "practiceaddress2": "STE 101", "practicecity": "BEDFORD", "practicestate": "TX", "practicezip9code": 760215840, "telephonenumber": 6825034201, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Orthoses: Off-The-Shelf|Surgical Dressings", "latitude": 32.8398737325, "longitude": -97.1339621382, "is_contracted_for_cba": false}, {"provider_id": 26717248, "acceptsassignement": false, "participationbegindate": 1728259200000, "businessname": "SLEEPHAPP INC", "practicename": "SLEEPHAPP INC", "practiceaddress1": "100 LAWRENCE ST", "practiceaddress2": "STE 107", "practicecity": "NANUET", "practicestate": "NY", "practicezip9code": 109545033, "telephonenumber": 84561786001, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Continuous Positive Airway Pressure (CPAP) Devices|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps", "latitude": 41.1076609842, "longitude": -74.0347366845, "is_contracted_for_cba": false}, {"provider_id": 20413187, "acceptsassignement": true, "participationbegindate": 1719100800000, "businessname": "DELMA INC", "practicename": "DELMA RX", "practiceaddress1": "6850 VAN NUYS BLVD", "practiceaddress2": "STE 115", "practicecity": "VAN NUYS", "practicestate": "CA", "practicezip9code": 914054629, "telephonenumber": 8186873999, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 34.19525, "longitude": -118.44861, "is_contracted_for_cba": false}, {"provider_id": 23279527, "acceptsassignement": false, "participationbegindate": 1718841600000, "businessname": "OMNIS MEDICAL SERVICES LLC", "practicename": "OMNIS MEDICAL SERVICES LLC", "practiceaddress1": "66 YORK ST", "practiceaddress2": "# 100", "practicecity": "JERSEY CITY", "practicestate": "NJ", "practicezip9code": 73023838, "telephonenumber": 7732428501, "specialitieslist": "MSC With Orthotic-Prosthetic", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Insulin Infusion Pumps and/or Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Ostomy Supplies|Urological Supplies|Voice Prosthetics|Limb Prostheses|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.7161030177, "longitude": -74.036213995, "is_contracted_for_cba": false}, {"provider_id": 20304209, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #533", "practiceaddress1": "9484 ELLERBE RD", "practiceaddress2": "STE 100", "practicecity": "SHREVEPORT", "practicestate": "LA", "practicezip9code": 711067404, "telephonenumber": 3185176973, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.3973, "longitude": -93.73012, "is_contracted_for_cba": false}, {"provider_id": 20303735, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY", "practiceaddress1": "6652 YOUREE DR", "practiceaddress2": null, "practicecity": "SHREVEPORT", "practicestate": "LA", "practicezip9code": 711054630, "telephonenumber": 3187959966, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.4445, "longitude": -93.71945, "is_contracted_for_cba": false}, {"provider_id": 20315381, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #03431", "practiceaddress1": "1300 N HOBART ST", "practiceaddress2": null, "practicecity": "PAMPA", "practicestate": "TX", "practicezip9code": 790654122, "telephonenumber": 8066652705, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.54871, "longitude": -100.9718, "is_contracted_for_cba": false}, {"provider_id": 34359290, "acceptsassignement": true, "participationbegindate": 1718064000000, "businessname": "PNW PHARMACY LLC", "practicename": "PNW RX", "practiceaddress1": "400 NE 7TH ST", "practiceaddress2": null, "practicecity": "GRESHAM", "practicestate": "OR", "practicezip9code": 970305604, "telephonenumber": 5035733278, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 45.5020549826, "longitude": -122.426870038, "is_contracted_for_cba": false}, {"provider_id": 20317367, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #05962", "practiceaddress1": "3200 TEASLEY LN", "practiceaddress2": null, "practicecity": "DENTON", "practicestate": "TX", "practicezip9code": 762108322, "telephonenumber": 9403821810, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.17352, "longitude": -97.11402, "is_contracted_for_cba": false}, {"provider_id": 23279623, "acceptsassignement": true, "participationbegindate": 1717459200000, "businessname": "CHEROKEE DME INC", "practicename": "CHEROKEE DME INC", "practiceaddress1": "2959 CHEROKEE ST NW", "practiceaddress2": "STE 103E", "practicecity": "KENNESAW", "practicestate": "GA", "practicezip9code": 301446522, "telephonenumber": 4043693020, "specialitieslist": null, "providertypelist": "CERTIFIED ORTH/PROS/PEDORTHIST", "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Canes and/or Crutches|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Diabetic Shoes and Inserts", "latitude": 34.0260100104, "longitude": -84.6113060064, "is_contracted_for_cba": false}, {"provider_id": 20311931, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARKANSAS CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10432", "practiceaddress1": "3220 N REYNOLDS RD", "practiceaddress2": null, "practicecity": "BRYANT", "practicestate": "AR", "practicezip9code": 720229039, "telephonenumber": 5018470803, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.62385, "longitude": -92.49904, "is_contracted_for_cba": false}, {"provider_id": 20311697, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "MEIJER GREAT LAKES LIMITED PARTNERSHIP", "practicename": "MEIJER PHARMACY #288", "practiceaddress1": "2951 HEARTLAND CROSSING BLVD", "practiceaddress2": null, "practicecity": "OWENSBORO", "practicestate": "KY", "practicezip9code": 423037669, "telephonenumber": 2703597510, "specialitieslist": "Pharmacy|Department Store|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers", "latitude": 37.73675, "longitude": -87.09052, "is_contracted_for_cba": false}, {"provider_id": 20310473, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "WASHINGTON CVS PHARMACY LLC", "practiceaddress1": "17700 NE 76TH ST", "practiceaddress2": null, "practicecity": "REDMOND", "practicestate": "WA", "practicezip9code": 980523300, "telephonenumber": 4252021000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.67179, "longitude": -122.10329, "is_contracted_for_cba": false}, {"provider_id": 20310983, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "UTAH CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 10423", "practiceaddress1": "1269 E 2100 S", "practiceaddress2": null, "practicecity": "SALT LAKE CITY", "practicestate": "UT", "practicezip9code": 841062824, "telephonenumber": 8014860695, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.72551, "longitude": -111.85532, "is_contracted_for_cba": false}, {"provider_id": 20310815, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WASHINGTON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10747", "practiceaddress1": "11918 AIRPORT RD", "practiceaddress2": null, "practicecity": "EVERETT", "practicestate": "WA", "practicezip9code": 982045509, "telephonenumber": 4253537687, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.88983, "longitude": -122.25946, "is_contracted_for_cba": false}, {"provider_id": 20311847, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARKANSAS CVS PHARMACY LLC", "practicename": "CVS PHARMACY #10975", "practiceaddress1": "2501 MCCAIN BLVD", "practiceaddress2": null, "practicecity": "NORTH LITTLE ROCK", "practicestate": "AR", "practicezip9code": 721167606, "telephonenumber": 5014046059, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.79697, "longitude": -92.23672, "is_contracted_for_cba": false}, {"provider_id": 20303675, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #494", "practiceaddress1": "3300 HAMILTON MILL RD", "practiceaddress2": null, "practicecity": "BUFORD", "practicestate": "GA", "practicezip9code": 305194080, "telephonenumber": 7706141086, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.09425, "longitude": -83.9354, "is_contracted_for_cba": false}, {"provider_id": 20303507, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-529", "practiceaddress1": "965 POPLAR ST", "practiceaddress2": null, "practicecity": "NELSONVILLE", "practicestate": "OH", "practicezip9code": 457641442, "telephonenumber": 7407531984, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.45193, "longitude": -82.22073, "is_contracted_for_cba": false}, {"provider_id": 20311661, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "UTAH CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16936", "practiceaddress1": "608 W MAIN ST", "practiceaddress2": null, "practicecity": "AMERICAN FORK", "practicestate": "UT", "practicezip9code": 840039762, "telephonenumber": 8017565997, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.37565, "longitude": -111.82124, "is_contracted_for_cba": false}, {"provider_id": 20312705, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "MEIJER GREAT LAKES LIMITED PARTNERSHIP", "practicename": "MEIJER PHARMACY #207", "practiceaddress1": "1900 E COLLEGE AVE", "practiceaddress2": null, "practicecity": "NORMAL", "practicestate": "IL", "practicezip9code": 617614577, "telephonenumber": 3098880810, "specialitieslist": "Pharmacy|Department Store|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers", "latitude": 40.51048, "longitude": -88.9438, "is_contracted_for_cba": false}, {"provider_id": 20304047, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #957", "practiceaddress1": "4533 MONROE ST", "practiceaddress2": null, "practicecity": "TOLEDO", "practicestate": "OH", "practicezip9code": 43613, "telephonenumber": 4194719240, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.6886, "longitude": -83.62103, "is_contracted_for_cba": false}, {"provider_id": 20303807, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-966", "practiceaddress1": "4656 CEMETERY RD", "practiceaddress2": null, "practicecity": "HILLIARD", "practicestate": "OH", "practicezip9code": 430261124, "telephonenumber": 6148761248, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.03181, "longitude": -83.14022, "is_contracted_for_cba": false}, {"provider_id": 21611685, "acceptsassignement": true, "participationbegindate": 1727308800000, "businessname": "CROSSROADS PROSTHETICS AND ORTHOTICS", "practicename": "CROSSROADS PROSTHETICS AND ORTHOTIC", "practiceaddress1": "3900 BRISTOL HWY", "practiceaddress2": "STE 8", "practicecity": "JOHNSON CITY", "practicestate": "TN", "practicezip9code": 376011391, "telephonenumber": 4239002425, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses", "latitude": 36.3810455596, "longitude": -82.3665095411, "is_contracted_for_cba": false}, {"provider_id": 20380067, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #18289", "practiceaddress1": "400 PUBLIC RD", "practiceaddress2": null, "practicecity": "YORKVILLE", "practicestate": "OH", "practicezip9code": 439711248, "telephonenumber": 7408592449, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.15926, "longitude": -80.70608, "is_contracted_for_cba": false}, {"provider_id": 20380055, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "109 S VAN BUREN RD", "practiceaddress2": null, "practicecity": "EDEN", "practicestate": "NC", "practicezip9code": 272885026, "telephonenumber": 3366239026, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.50046, "longitude": -79.74291, "is_contracted_for_cba": false}, {"provider_id": 20379701, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #18372", "practiceaddress1": "5706 BERGENLINE AVE", "practiceaddress2": null, "practicecity": "WEST NEW YORK", "practicestate": "NJ", "practicezip9code": 70931230, "telephonenumber": 2018698054, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.78726, "longitude": -74.01739, "is_contracted_for_cba": false}, {"provider_id": 20335709, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11024", "practiceaddress1": "7353 RANGEWOOD DR", "practiceaddress2": null, "practicecity": "COLORADO SPRINGS", "practicestate": "CO", "practicezip9code": 809187702, "telephonenumber": 7195982751, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.93763, "longitude": -104.75487, "is_contracted_for_cba": false}, {"provider_id": 21611691, "acceptsassignement": true, "participationbegindate": 1727222400000, "businessname": "YUBA CITY PHARMACY INC", "practicename": "YUBA CITY PHARMACY", "practiceaddress1": "1000 LINCOLN RD", "practiceaddress2": "STE A", "practicecity": "YUBA CITY", "practicestate": "CA", "practicezip9code": 959916598, "telephonenumber": 5304347494, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.1121540121, "longitude": -121.6266560283, "is_contracted_for_cba": false}, {"provider_id": 21611223, "acceptsassignement": true, "participationbegindate": 1727222400000, "businessname": "HANNA FIRST CARE INC", "practicename": "HANNA FIRST CARE INC", "practiceaddress1": "600 MIDLAND AVE", "practiceaddress2": null, "practicecity": "GARFIELD", "practicestate": "NJ", "practicezip9code": 70261665, "telephonenumber": 9737727966, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.8842799956, "longitude": -74.1002610391, "is_contracted_for_cba": false}, {"provider_id": 20521613, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #114", "practiceaddress1": "1257 GEORGIA RD", "practiceaddress2": null, "practicecity": "FRANKLIN", "practicestate": "NC", "practicezip9code": 287349275, "telephonenumber": 8283491542, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.15737, "longitude": -83.39275, "is_contracted_for_cba": false}, {"provider_id": 20378273, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12437", "practiceaddress1": "1250 FAIRVIEW DR", "practiceaddress2": null, "practicecity": "LEXINGTON", "practicestate": "NC", "practicezip9code": 272925332, "telephonenumber": 3362240424, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.78675, "longitude": -80.26027, "is_contracted_for_cba": false}, {"provider_id": 20378309, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS", "practiceaddress1": "320 W SUMMIT AVE", "practiceaddress2": null, "practicecity": "WALES", "practicestate": "WI", "practicezip9code": 531839436, "telephonenumber": 2629686900, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.00575, "longitude": -88.3793, "is_contracted_for_cba": false}, {"provider_id": 20521325, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS INC", "practiceaddress1": "180 SCENIC PLAZA DR", "practiceaddress2": null, "practicecity": "WEST UNION", "practicestate": "SC", "practicezip9code": 296962536, "telephonenumber": 8646383976, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.75744, "longitude": -83.04918, "is_contracted_for_cba": false}, {"provider_id": 20521367, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #436", "practiceaddress1": "1197 BIG A RD", "practiceaddress2": null, "practicecity": "TOCCOA", "practicestate": "GA", "practicezip9code": 305776028, "telephonenumber": 7068868711, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.57052, "longitude": -83.30675, "is_contracted_for_cba": false}, {"provider_id": 20521289, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS INC", "practiceaddress1": "2455 SALEM RD SE", "practiceaddress2": null, "practicecity": "CONYERS", "practicestate": "GA", "practicezip9code": 300136743, "telephonenumber": 7709223507, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.6233, "longitude": -83.97647, "is_contracted_for_cba": false}, {"provider_id": 20378051, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9297", "practiceaddress1": "10427 BIG BEND RD", "practiceaddress2": null, "practicecity": "RIVERVIEW", "practicestate": "FL", "practicezip9code": 335787415, "telephonenumber": 8133475023, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.79182, "longitude": -82.33585, "is_contracted_for_cba": false}, {"provider_id": 20303957, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "3959 LAVISTA RD", "practiceaddress2": "STE A", "practicecity": "TUCKER", "practicestate": "GA", "practicezip9code": 300845152, "telephonenumber": 7709346442, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.84507, "longitude": -84.25588, "is_contracted_for_cba": false}, {"provider_id": 20303753, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-512", "practiceaddress1": "264 S HOLLYWOOD BLVD", "practiceaddress2": null, "practicecity": "STEUBENVILLE", "practicestate": "OH", "practicezip9code": 439522422, "telephonenumber": 7402662893, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.36843, "longitude": -80.64005, "is_contracted_for_cba": false}, {"provider_id": 20328593, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16966", "practiceaddress1": "3400 WILKES BARRE TOWNSHIP CMNS", "practiceaddress2": null, "practicecity": "WILKES BARRE TOWNSHI", "practicestate": "PA", "practicezip9code": 187026846, "telephonenumber": 5708294983, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.24155, "longitude": -75.84332, "is_contracted_for_cba": false}, {"provider_id": 20304917, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16804", "practiceaddress1": "801 N HOUK RD", "practiceaddress2": null, "practicecity": "DELAWARE", "practicestate": "OH", "practicezip9code": 430154418, "telephonenumber": 7403628426, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.31253, "longitude": -83.10933, "is_contracted_for_cba": false}, {"provider_id": 20303609, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #456", "practiceaddress1": "4400 BROWNSVILLE RD", "practiceaddress2": null, "practicecity": "POWDER SPRINGS", "practicestate": "GA", "practicezip9code": 301273143, "telephonenumber": 7702224205, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.8466, "longitude": -84.69692, "is_contracted_for_cba": false}, {"provider_id": 20303651, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16514", "practiceaddress1": "3588 GENDER RD", "practiceaddress2": null, "practicecity": "CANAL WINCHESTER", "practicestate": "OH", "practicezip9code": 431108679, "telephonenumber": 6149207404, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.90942, "longitude": -82.82423, "is_contracted_for_cba": false}, {"provider_id": 20335031, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 10831", "practiceaddress1": "7950 E HAMPDEN AVE", "practiceaddress2": null, "practicecity": "DENVER", "practicestate": "CO", "practicezip9code": 80231, "telephonenumber": 3036001468, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.65303, "longitude": -104.89668, "is_contracted_for_cba": false}, {"provider_id": 20521385, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS INC", "practiceaddress1": "684 N BROAD ST", "practiceaddress2": null, "practicecity": "BREVARD", "practicestate": "NC", "practicezip9code": 287123102, "telephonenumber": 8288832358, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.23954, "longitude": -82.72995, "is_contracted_for_cba": false}, {"provider_id": 20521745, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES PHARMACY #403", "practiceaddress1": "260 TIFT COLLEGE DR", "practiceaddress2": null, "practicecity": "FORSYTH", "practicestate": "GA", "practicezip9code": 310292318, "telephonenumber": 8286692941, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.03479, "longitude": -83.93051, "is_contracted_for_cba": false}, {"provider_id": 20521397, "acceptsassignement": true, "participationbegindate": 1727136000000, "businessname": "INGLES MARKETS INC", "practicename": "INGLES MARKETS PHARMACY #55", "practiceaddress1": "630 CHAMPION DR", "practiceaddress2": null, "practicecity": "CANTON", "practicestate": "NC", "practicezip9code": 287163032, "telephonenumber": 8282352795, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.45148, "longitude": -82.88058, "is_contracted_for_cba": false}, {"provider_id": 20313539, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 06856", "practiceaddress1": "116 W UNIVERSITY DR", "practiceaddress2": null, "practicecity": "DENTON", "practicestate": "TX", "practicezip9code": 762011851, "telephonenumber": 9403879549, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.23066, "longitude": -97.1328, "is_contracted_for_cba": false}, {"provider_id": 20313545, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06854", "practiceaddress1": "601 W 7TH AVE", "practiceaddress2": null, "practicecity": "CORSICANA", "practicestate": "TX", "practicezip9code": 751106360, "telephonenumber": 9038746597, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.089, "longitude": -96.46848, "is_contracted_for_cba": false}, {"provider_id": 20313551, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06851", "practiceaddress1": "119 W MARSHALL AVE", "practiceaddress2": null, "practicecity": "LONGVIEW", "practicestate": "TX", "practicezip9code": 756015340, "telephonenumber": 9037532686, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.50072, "longitude": -94.73959, "is_contracted_for_cba": false}, {"provider_id": 20377973, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "6390 BOULDER HWY", "practiceaddress2": null, "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891227439, "telephonenumber": 7024356263, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.08634, "longitude": -115.03571, "is_contracted_for_cba": false}, {"provider_id": 20377967, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12419", "practiceaddress1": "11795 W OLYMPIC BLVD", "practiceaddress2": null, "practicecity": "LOS ANGELES", "practicestate": "CA", "practicezip9code": 900641211, "telephonenumber": 3103126506, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.03345, "longitude": -118.44945, "is_contracted_for_cba": false}, {"provider_id": 20335955, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY INC", "practiceaddress1": "793 IYANNOUGH RD", "practiceaddress2": null, "practicecity": "HYANNIS", "practicestate": "MA", "practicezip9code": 26015027, "telephonenumber": 5088273147, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.66953, "longitude": -70.29758, "is_contracted_for_cba": false}, {"provider_id": 20334857, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 10879", "practiceaddress1": "1933 HERITAGE TRACE PKWY", "practiceaddress2": null, "practicecity": "FORT WORTH", "practicestate": "TX", "practicezip9code": 761772512, "telephonenumber": 8178409060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.90439, "longitude": -97.35405, "is_contracted_for_cba": false}, {"provider_id": 20334863, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 10946", "practiceaddress1": "4333 W JEFFERSON BLVD", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752114622, "telephonenumber": 9729367997, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.73773, "longitude": -96.89074, "is_contracted_for_cba": false}, {"provider_id": 20344775, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09866", "practiceaddress1": "1190 N MAIN ST", "practiceaddress2": null, "practicecity": "MANTECA", "practicestate": "CA", "practicezip9code": 953363208, "telephonenumber": 2092392018, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.81299, "longitude": -121.21702, "is_contracted_for_cba": false}, {"provider_id": 20345483, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09233", "practiceaddress1": "515 S STATE HIGHWAY 49", "practiceaddress2": null, "practicecity": "JACKSON", "practicestate": "CA", "practicezip9code": 95642, "telephonenumber": 2092232471, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.3437, "longitude": -120.76869, "is_contracted_for_cba": false}, {"provider_id": 20338223, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #03897", "practiceaddress1": "10 YOUNG ST", "practiceaddress2": null, "practicecity": "TONAWANDA", "practicestate": "NY", "practicezip9code": 141502208, "telephonenumber": 7166921894, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.02035, "longitude": -78.87651, "is_contracted_for_cba": false}, {"provider_id": 20378327, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11771", "practiceaddress1": "42820 CREEK VIEW PLZ", "practiceaddress2": null, "practicecity": "ASHBURN", "practicestate": "VA", "practicezip9code": 201474036, "telephonenumber": 7032596683, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.04245, "longitude": -77.52112, "is_contracted_for_cba": false}, {"provider_id": 20386343, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12563", "practiceaddress1": "176 COLUMBIA TPKE", "practiceaddress2": null, "practicecity": "FLORHAM PARK", "practicestate": "NJ", "practicezip9code": 79321366, "telephonenumber": 9738057420, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.78812, "longitude": -74.3893, "is_contracted_for_cba": false}, {"provider_id": 20335469, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #01773", "practiceaddress1": "9551 W 171ST ST", "practiceaddress2": null, "practicecity": "TINLEY PARK", "practicestate": "IL", "practicezip9code": 60487, "telephonenumber": 7088730062, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.57981, "longitude": -87.82791, "is_contracted_for_cba": false}, {"provider_id": 20330819, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 10896", "practiceaddress1": "629 W LANCASTER AVE", "practiceaddress2": null, "practicecity": "WAYNE", "practicestate": "PA", "practicezip9code": 190872527, "telephonenumber": 6107068872, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.03803, "longitude": -75.36165, "is_contracted_for_cba": false}, {"provider_id": 20338217, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #3758", "practiceaddress1": "610 PLEASANT ST", "practiceaddress2": null, "practicecity": "BROCKTON", "practicestate": "MA", "practicezip9code": 23012513, "telephonenumber": 5084276223, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.08915, "longitude": -71.0446, "is_contracted_for_cba": false}, {"provider_id": 20336681, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY # 06485", "practiceaddress1": "300 LIBERTY ST", "practiceaddress2": null, "practicecity": "WALKERTON", "practicestate": "IN", "practicezip9code": 465741246, "telephonenumber": 5745867154, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.47195, "longitude": -86.48145, "is_contracted_for_cba": false}, {"provider_id": 20336663, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06515", "practiceaddress1": "1203 S MAIN ST", "practiceaddress2": null, "practicecity": "BLUFFTON", "practicestate": "IN", "practicezip9code": 467143904, "telephonenumber": 2608241646, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.72559, "longitude": -85.16982, "is_contracted_for_cba": false}, {"provider_id": 34358756, "acceptsassignement": true, "participationbegindate": 1725926400000, "businessname": "FIRST CALL MED SUPPLIES LLC", "practicename": "FIRST CALL MED SUPPLIES LLC", "practiceaddress1": "1210 E MAIN ST", "practiceaddress2": "UNIT B", "practicecity": "LINCOLNTON", "practicestate": "NC", "practicezip9code": 280923840, "telephonenumber": 7042125558, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies", "latitude": 35.475710917, "longitude": -81.2411779357, "is_contracted_for_cba": false}, {"provider_id": 20338091, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #7490", "practiceaddress1": "833 ROOSEVELT AVE", "practiceaddress2": null, "practicecity": "CARTERET", "practicestate": "NJ", "practicezip9code": 70081880, "telephonenumber": 7329691441, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.59075, "longitude": -74.22876, "is_contracted_for_cba": false}, {"provider_id": 20338097, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #7628", "practiceaddress1": "10 W MAIN ST", "practiceaddress2": null, "practicecity": "SMITHTOWN", "practicestate": "NY", "practicezip9code": 117872615, "telephonenumber": 6317240381, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.85496, "longitude": -73.19456, "is_contracted_for_cba": false}, {"provider_id": 20303981, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #344", "practiceaddress1": "3000 OLD ALABAMA RD", "practiceaddress2": null, "practicecity": "ALPHARETTA", "practicestate": "GA", "practicezip9code": 300225860, "telephonenumber": 7707517388, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.02168, "longitude": -84.27166, "is_contracted_for_cba": false}, {"provider_id": 20337701, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "TETER ORTHOTICS & PROSTHETICS, INC", "practicename": "TETER ORTHOTICS AND PROSTHETICS INC", "practiceaddress1": "1415 KILBORN DR", "practiceaddress2": null, "practicecity": "PETOSKEY", "practicestate": "MI", "practicezip9code": 497709258, "telephonenumber": 2313475510, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Neuromuscular Elect Stimulators (NMES)/Supplies|Canes and/or Crutches|Walkers|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 45.35659, "longitude": -84.96749, "is_contracted_for_cba": false}, {"provider_id": 20387195, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #11828", "practiceaddress1": "909 S MAIN ST", "practiceaddress2": null, "practicecity": "BLOOMINGTON", "practicestate": "IL", "practicezip9code": 617016720, "telephonenumber": 3098291540, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.47138, "longitude": -88.99338, "is_contracted_for_cba": false}, {"provider_id": 20335217, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #02663", "practiceaddress1": "225 W COURT ST", "practiceaddress2": null, "practicecity": "KANKAKEE", "practicestate": "IL", "practicezip9code": 609013710, "telephonenumber": 8159293451, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.12088, "longitude": -87.86822, "is_contracted_for_cba": false}, {"provider_id": 20336771, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #2513", "practiceaddress1": "421 RYDERS LN", "practiceaddress2": null, "practicecity": "EAST BRUNSWICK", "practicestate": "NJ", "practicezip9code": 88162700, "telephonenumber": 7322546609, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.43538, "longitude": -74.42257, "is_contracted_for_cba": false}, {"provider_id": 20344577, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09823", "practiceaddress1": "1350 FLORIN RD", "practiceaddress2": null, "practicecity": "SACRAMENTO", "practicestate": "CA", "practicezip9code": 958224202, "telephonenumber": 9163925184, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.49557, "longitude": -121.50466, "is_contracted_for_cba": false}, {"provider_id": 20336735, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #3900", "practiceaddress1": "227 S MAIN ST", "practiceaddress2": null, "practicecity": "MANCHESTER", "practicestate": "NH", "practicezip9code": 31024838, "telephonenumber": 6036668521, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.97973, "longitude": -71.47692, "is_contracted_for_cba": false}, {"provider_id": 20313077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06727", "practiceaddress1": "1600 S BYPASS 35", "practiceaddress2": null, "practicecity": "ALVIN", "practicestate": "TX", "practicezip9code": 775114602, "telephonenumber": 2813311536, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.40902, "longitude": -95.23332, "is_contracted_for_cba": false}, {"provider_id": 34358486, "acceptsassignement": false, "participationbegindate": 1717027200000, "businessname": "ORIFICE HEALTH SERVICES LLC", "practicename": "ORIFICE HEALTH SERVICES, LLC", "practiceaddress1": "3213 INTERSTATE 30", "practiceaddress2": "STE 202", "practicecity": "MESQUITE", "practicestate": "TX", "practicezip9code": 751502603, "telephonenumber": 4694356924, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Walkers|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 32.8148190085, "longitude": -96.6481300148, "is_contracted_for_cba": false}, {"provider_id": 23282497, "acceptsassignement": true, "participationbegindate": 1716940800000, "businessname": "FRIENDS MEDICAL SUPPLY LLC", "practicename": "FRIENDS MEDICAL SUPPLY LLC", "practiceaddress1": "302 W 3RD ST", "practiceaddress2": "STE C", "practicecity": "MERCEDES", "practicestate": "TX", "practicezip9code": 785703106, "telephonenumber": 9562744070, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Insulin Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 26.1487459793, "longitude": -97.9123889831, "is_contracted_for_cba": false}, {"provider_id": 23279665, "acceptsassignement": false, "participationbegindate": 1716854400000, "businessname": "IMPACT MEDICAL SUPPLIES LLC", "practicename": "IMPACT MEDICAL SUPPLIES LLC", "practiceaddress1": "2470 WINDY HILL RD SE", "practiceaddress2": "STE 361", "practicecity": "MARIETTA", "practicestate": "GA", "practicezip9code": 300678613, "telephonenumber": 4049988374, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Orthoses: Off-The-Shelf|Penile Pumps|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.9019819833, "longitude": -84.4825080058, "is_contracted_for_cba": false}, {"provider_id": 23279671, "acceptsassignement": true, "participationbegindate": 1716422400000, "businessname": "HIGHTECH MEDICAL SUPPLY LLC", "practicename": "HIGHTECH MEDICAL SUPPLY LLC", "practiceaddress1": "2647 CONEY ISLAND AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112235502, "telephonenumber": 7185785787, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.5922019764, "longitude": -73.9605254093, "is_contracted_for_cba": false}, {"provider_id": 20335991, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #06830", "practiceaddress1": "4609 W MAIN ST", "practiceaddress2": null, "practicecity": "BELLEVILLE", "practicestate": "IL", "practicezip9code": 622265208, "telephonenumber": 6183554851, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.54182, "longitude": -90.02519, "is_contracted_for_cba": false}, {"provider_id": 20335211, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #03901", "practiceaddress1": "1711 SHERMAN AVE", "practiceaddress2": null, "practicecity": "EVANSTON", "practicestate": "IL", "practicezip9code": 602013712, "telephonenumber": 8473283105, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.0496, "longitude": -87.68169, "is_contracted_for_cba": false}, {"provider_id": 20336657, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06572", "practiceaddress1": "1375 W 86TH ST", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462602101, "telephonenumber": 3172536427, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.91214, "longitude": -86.1836, "is_contracted_for_cba": false}, {"provider_id": 20313665, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06835", "practiceaddress1": "2674 S 31ST ST", "practiceaddress2": null, "practicecity": "TEMPLE", "practicestate": "TX", "practicezip9code": 765047104, "telephonenumber": 2547739953, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.07518, "longitude": -97.36743, "is_contracted_for_cba": false}, {"provider_id": 20313899, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #08330", "practiceaddress1": "6320 RUFE SNOW DR", "practiceaddress2": null, "practicecity": "NORTH RICHLAND HILLS", "practicestate": "TX", "practicezip9code": 761483317, "telephonenumber": 8176569861, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.86139, "longitude": -97.23789, "is_contracted_for_cba": false}, {"provider_id": 20313887, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 06903", "practiceaddress1": "3350 FOREST HILL CIR", "practiceaddress2": null, "practicecity": "FOREST HILL", "practicestate": "TX", "practicezip9code": 761401105, "telephonenumber": 8178689566, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.66001, "longitude": -97.27268, "is_contracted_for_cba": false}, {"provider_id": 20312825, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY 07092", "practiceaddress1": "110 W 20TH ST", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770082510, "telephonenumber": 8326737131, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.80388, "longitude": -95.39859, "is_contracted_for_cba": false}, {"provider_id": 20337935, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06881", "practiceaddress1": "610 N MAIN ST", "practiceaddress2": null, "practicecity": "HUNTINGBURG", "practicestate": "IN", "practicezip9code": 475421044, "telephonenumber": 8126833309, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.29994, "longitude": -86.95555, "is_contracted_for_cba": false}, {"provider_id": 20337911, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY # 6618", "practiceaddress1": "105 N PARK AVE", "practiceaddress2": null, "practicecity": "ALEXANDRIA", "practicestate": "IN", "practicezip9code": 460012055, "telephonenumber": 7657242210, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.26385, "longitude": -85.66728, "is_contracted_for_cba": false}, {"provider_id": 20337953, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY 6599", "practiceaddress1": "715 E BROADWAY ST", "practiceaddress2": null, "practicecity": "FORTVILLE", "practicestate": "IN", "practicezip9code": 460401551, "telephonenumber": 3174857111, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.93609, "longitude": -85.84047, "is_contracted_for_cba": false}, {"provider_id": 20336687, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #6559", "practiceaddress1": "7990 E US HIGHWAY 36", "practiceaddress2": null, "practicecity": "AVON", "practicestate": "IN", "practicezip9code": 461237790, "telephonenumber": 3172720242, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.76339, "longitude": -86.38178, "is_contracted_for_cba": false}, {"provider_id": 20313533, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #04706", "practiceaddress1": "12601 TOMBALL PKWY", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770863326, "telephonenumber": 2812727190, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.91192, "longitude": -95.48115, "is_contracted_for_cba": false}, {"provider_id": 20313509, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07269", "practiceaddress1": "1319 AUSTIN AVE", "practiceaddress2": null, "practicecity": "BROWNWOOD", "practicestate": "TX", "practicezip9code": 768013312, "telephonenumber": 3256431516, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.71047, "longitude": -98.97789, "is_contracted_for_cba": false}, {"provider_id": 20304437, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #16-531", "practiceaddress1": "8730 WATERVILLE SWANTON RD", "practiceaddress2": null, "practicecity": "WATERVILLE", "practicestate": "OH", "practicezip9code": 435669726, "telephonenumber": 4198781040, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.50975, "longitude": -83.75859, "is_contracted_for_cba": false}, {"provider_id": 20336615, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06481", "practiceaddress1": "901 N KARWICK RD", "practiceaddress2": null, "practicecity": "MICHIGAN CITY", "practicestate": "IN", "practicezip9code": 463602191, "telephonenumber": 2198726811, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.73337, "longitude": -86.85549, "is_contracted_for_cba": false}, {"provider_id": 23279737, "acceptsassignement": true, "participationbegindate": 1715904000000, "businessname": "EXCELLENT MEDICAL SUPPLIES INC.", "practicename": "EXCELLENT MEDICAL SUPPLIES INC", "practiceaddress1": "4503 16TH AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112041102, "telephonenumber": 7182478531, "specialitieslist": "Medical Supply Company Other", "providertypelist": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Heat & Cold Applications|Hospital Beds (Manual)|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual Related Accessories)|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Limb Prostheses|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.6330852539, "longitude": -73.9831854654, "is_contracted_for_cba": false}, {"provider_id": 20313497, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #03707", "practiceaddress1": "6151 MATLOCK RD", "practiceaddress2": null, "practicecity": "ARLINGTON", "practicestate": "TX", "practicezip9code": 760182206, "telephonenumber": 8174656537, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.64551, "longitude": -97.11492, "is_contracted_for_cba": false}, {"provider_id": 20305007, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER SAV-ON PHARMACY #878", "practiceaddress1": "1094 N MAIN ST", "practiceaddress2": null, "practicecity": "BOWLING GREEN", "practicestate": "OH", "practicezip9code": 434021346, "telephonenumber": 4193535116, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.39118, "longitude": -83.65044, "is_contracted_for_cba": false}, {"provider_id": 20555519, "acceptsassignement": true, "participationbegindate": 1715817600000, "businessname": "CENTER FOR ORTHOTIC & PROSTHETIC EXCELLENCE, LLC", "practicename": "CENTER FOR ORTHOTIC & PROSTHETIC EX", "practiceaddress1": "9615 KEILMAN ST", "practiceaddress2": "STE 200", "practicecity": "ST JOHN", "practicestate": "IN", "practicezip9code": 463739406, "telephonenumber": 2193650248, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 41.44367, "longitude": -87.47256, "is_contracted_for_cba": false}, {"provider_id": 20683745, "acceptsassignement": false, "participationbegindate": 1724889600000, "businessname": "DE LA SHEY LINGERIE, LLC", "practicename": "DE LA SHEY LINGERIE, LLP", "practiceaddress1": "14099 E EXPOSITION AVE", "practiceaddress2": null, "practicecity": "AURORA", "practicestate": "CO", "practicezip9code": 800122522, "telephonenumber": 3039938725, "specialitieslist": "Medical Supply Company Other", "providertypelist": "ALL OTHER SUPPLIES (IE, DRUG STORES, ETC.)", "supplieslist": "Heat & Cold Applications|Pneumatic Compression Devices and/or Supplies|Breast Prostheses and/or Accessories|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 39.7045551193, "longitude": -104.8246978525, "is_contracted_for_cba": false}, {"provider_id": 20336591, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06612", "practiceaddress1": "5110 E 38TH ST", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462181717, "telephonenumber": 3175491891, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.82541, "longitude": -86.0828, "is_contracted_for_cba": false}, {"provider_id": 20338349, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06735", "practiceaddress1": "668 S US HIGHWAY 231", "practiceaddress2": null, "practicecity": "BLOOMFIELD", "practicestate": "IN", "practicezip9code": 474247114, "telephonenumber": 8123844820, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.97997, "longitude": -86.92409, "is_contracted_for_cba": false}, {"provider_id": 20336609, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06556", "practiceaddress1": "651 E MAIN ST", "practiceaddress2": null, "practicecity": "DANVILLE", "practicestate": "IN", "practicezip9code": 461221939, "telephonenumber": 3177455828, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.7599, "longitude": -86.51452, "is_contracted_for_cba": false}, {"provider_id": 20313599, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06374", "practiceaddress1": "290 STRICKLAND DR", "practiceaddress2": null, "practicecity": "ORANGE", "practicestate": "TX", "practicezip9code": 776304750, "telephonenumber": 4098863534, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 30.10059, "longitude": -93.76866, "is_contracted_for_cba": false}, {"provider_id": 20315147, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #07151", "practiceaddress1": "8000 N SAM HOUSTON PKWY E", "practiceaddress2": null, "practicecity": "HUMBLE", "practicestate": "TX", "practicezip9code": 773962900, "telephonenumber": 2814540101, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.93883, "longitude": -95.26645, "is_contracted_for_cba": false}, {"provider_id": 20343779, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #04983", "practiceaddress1": "11600 FM 1960 RD W", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770653516, "telephonenumber": 2815177258, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.92734, "longitude": -95.59535, "is_contracted_for_cba": false}, {"provider_id": 23279851, "acceptsassignement": true, "participationbegindate": 1714953600000, "businessname": "B&R HEALTHCARE TULSA, LLC", "practicename": "VITAL CARE OF TULSA", "practiceaddress1": "7153 S YALE AVE", "practiceaddress2": null, "practicecity": "TULSA", "practicestate": "OK", "practicezip9code": 741366308, "telephonenumber": 5392712160, "specialitieslist": "Certified Other|Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 36.0600710777, "longitude": -95.9219520872, "is_contracted_for_cba": false}, {"provider_id": 20683349, "acceptsassignement": true, "participationbegindate": 1724371200000, "businessname": "MAXIMUM A SUPPLIES INC", "practicename": "MAXIMUM A SUPPLIES INC", "practiceaddress1": "18425 NW 2ND AVE", "practiceaddress2": "STE 404C", "practicecity": "MIAMI GARDENS", "practicestate": "FL", "practicezip9code": 331694500, "telephonenumber": 3058166879, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 25.9438029984, "longitude": -80.2045550291, "is_contracted_for_cba": false}, {"provider_id": 24548544, "acceptsassignement": false, "participationbegindate": 1724371200000, "businessname": "METTO LAND LLC", "practicename": "CPAP LV", "practiceaddress1": "5600 SPRING MOUNTAIN RD", "practiceaddress2": "STE 205", "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891468823, "telephonenumber": 7025306170, "specialitieslist": "Medical Supply Company Other|MSC With Respiratory Therapist", "providertypelist": null, "supplieslist": "Continuous Positive Airway Pressure (CPAP) Devices|Respiratory Assist Devices", "latitude": 36.1264849809, "longitude": -115.2181479871, "is_contracted_for_cba": false}, {"provider_id": 24547998, "acceptsassignement": true, "participationbegindate": 1723680000000, "businessname": "CONTOUR SERVICES INC", "practicename": "CONTOUR SERVICES INC", "practiceaddress1": "815 NW 57TH AVE", "practiceaddress2": "STE 200-12", "practicecity": "MIAMI", "practicestate": "FL", "practicezip9code": 331262018, "telephonenumber": 7869637012, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Surgical Dressings", "latitude": 25.7798129906, "longitude": -80.2876439971, "is_contracted_for_cba": false}, {"provider_id": 20338583, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WALGREEN EASTERN CO INC", "practicename": "WALGREENS #2517", "practiceaddress1": "201 MAIN ST", "practiceaddress2": null, "practicecity": "GLOUCESTER", "practicestate": "MA", "practicezip9code": 19306010, "telephonenumber": 9782837361, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.61293, "longitude": -70.6611, "is_contracted_for_cba": false}, {"provider_id": 20307383, "acceptsassignement": true, "participationbegindate": 1675296000000, "businessname": "JRA HEALTH, LLC", "practicename": "JRA HEALTH", "practiceaddress1": "6925 SE US HIGHWAY 301", "practiceaddress2": null, "practicecity": "HAWTHORNE", "practicestate": "FL", "practicezip9code": 326403966, "telephonenumber": 3524431684, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 29.58959, "longitude": -82.0873, "is_contracted_for_cba": false}, {"provider_id": 20307413, "acceptsassignement": true, "participationbegindate": 1675209600000, "businessname": "FINEST MEDICAL SUPPLY CORP", "practicename": "FINEST MEDICAL SUPPLY CORP", "practiceaddress1": "2319 VOORHIES AVE", "practiceaddress2": null, "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112352830, "telephonenumber": 3479662206, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|External Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Limb Prostheses|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.5867, "longitude": -73.94579, "is_contracted_for_cba": false}, {"provider_id": 24548556, "acceptsassignement": false, "participationbegindate": 1722816000000, "businessname": "FUSION RX LLC", "practicename": "BOIES MEDICAL CENTER PHARMACY", "practiceaddress1": "828 DELBON AVE", "practiceaddress2": null, "practicecity": "TURLOCK", "practicestate": "CA", "practicezip9code": 953822005, "telephonenumber": 2096348511, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 37.5102490175, "longitude": -120.8389029749, "is_contracted_for_cba": false}, {"provider_id": 20569697, "acceptsassignement": true, "participationbegindate": 1722556800000, "businessname": "ATHENS EYE CARE LLC", "practicename": "VISION SOURCE", "practiceaddress1": "416 W UNION ST", "practiceaddress2": null, "practicecity": "ATHENS", "practicestate": "OH", "practicezip9code": 457012328, "telephonenumber": 7405942271, "specialitieslist": "Optometrist", "providertypelist": null, "supplieslist": "Prosthetic Lenses: Conventional Eyeglasses|Prosthetic Lenses: Conventional Contact Lenses", "latitude": 39.33103, "longitude": -82.12075, "is_contracted_for_cba": false}, {"provider_id": 20319923, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17130", "practiceaddress1": "1475 UNIVERSITY DR", "practiceaddress2": null, "practicecity": "BURLINGTON", "practicestate": "NC", "practicezip9code": 272158768, "telephonenumber": 3365851476, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.06736, "longitude": -79.51865, "is_contracted_for_cba": false}, {"provider_id": 20333429, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #08293", "practiceaddress1": "1550 LAKE DR SE", "practiceaddress2": null, "practicecity": "GRAND RAPIDS", "practicestate": "MI", "practicezip9code": 495062704, "telephonenumber": 6162350747, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.95461, "longitude": -85.63038, "is_contracted_for_cba": false}, {"provider_id": 20319917, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17635", "practiceaddress1": "7129 OKELLY CHAPEL RD", "practiceaddress2": null, "practicecity": "CARY", "practicestate": "NC", "practicezip9code": 275196849, "telephonenumber": 9196742215, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.82426, "longitude": -78.87032, "is_contracted_for_cba": false}, {"provider_id": 20307437, "acceptsassignement": true, "participationbegindate": 1675209600000, "businessname": "SHOP RX PHARMACY INC", "practicename": "SHOP RX PHARMACY INC", "practiceaddress1": "8917 JAMAICA AVE", "practiceaddress2": null, "practicecity": "JAMAICA", "practicestate": "NY", "practicezip9code": 114212041, "telephonenumber": 7184806479, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Infrared Heating Pads Systems and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 40.69274, "longitude": -73.85687, "is_contracted_for_cba": false}, {"provider_id": 20307491, "acceptsassignement": true, "participationbegindate": 1675123200000, "businessname": "MOSHOLU PHARMACY INC", "practicename": "MOSHOLU PHARMACY INC.", "practiceaddress1": "3529 JEROME AVE", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104671050, "telephonenumber": 7187490270, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.88195, "longitude": -73.88228, "is_contracted_for_cba": false}, {"provider_id": 20330051, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 00740", "practiceaddress1": "10901C BUSTLETON AVE", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191163305, "telephonenumber": 2156772122, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.11207, "longitude": -75.02356, "is_contracted_for_cba": false}, {"provider_id": 20342555, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01599", "practiceaddress1": "700 W FRONT ST", "practiceaddress2": null, "practicecity": "BERWICK", "practicestate": "PA", "practicezip9code": 186033718, "telephonenumber": 5707527462, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.05049, "longitude": -76.24437, "is_contracted_for_cba": false}, {"provider_id": 20342669, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01615", "practiceaddress1": "1600 MAIN ST", "practiceaddress2": null, "practicecity": "DICKSON CITY", "practicestate": "PA", "practicezip9code": 184471334, "telephonenumber": 5703833211, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.47057, "longitude": -75.6083, "is_contracted_for_cba": false}, {"provider_id": 20304557, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "1475 BUFORD DR", "practiceaddress2": null, "practicecity": "LAWRENCEVILLE", "practicestate": "GA", "practicezip9code": 300433798, "telephonenumber": 7708226959, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.0052, "longitude": -83.9879, "is_contracted_for_cba": false}, {"provider_id": 20305157, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "134 BANKS CROSSING", "practiceaddress2": null, "practicecity": "FAYETTEVILLE", "practicestate": "GA", "practicezip9code": 302147308, "telephonenumber": 7704617632, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.47156, "longitude": -84.44865, "is_contracted_for_cba": false}, {"provider_id": 20331491, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #16290", "practiceaddress1": "1001 13TH ST S", "practiceaddress2": null, "practicecity": "VIRGINIA", "practicestate": "MN", "practicezip9code": 557923254, "telephonenumber": 2187416603, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 47.51225, "longitude": -92.54823, "is_contracted_for_cba": false}, {"provider_id": 20307545, "acceptsassignement": false, "participationbegindate": 1674604800000, "businessname": "MEGA MEDICAL SUPPLY LLC", "practicename": "MEGA MEDICAL SUPPLY LLC", "practiceaddress1": "1450 S HAVANA ST", "practiceaddress2": "STE 600", "practicecity": "AURORA", "practicestate": "CO", "practicezip9code": 800124032, "telephonenumber": 7204008979, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.69019, "longitude": -104.86585, "is_contracted_for_cba": false}, {"provider_id": 20307599, "acceptsassignement": true, "participationbegindate": 1674345600000, "businessname": "VAP PROFESSIONALS LLC", "practicename": "VAP PROFESSIONALS LLC", "practiceaddress1": "21701 W 11 MILE RD", "practiceaddress2": "STE 2", "practicecity": "SOUTHFIELD", "practicestate": "MI", "practicezip9code": 480763713, "telephonenumber": 2483520000, "specialitieslist": "MSC With Orthotic Personnel|Orthotic Personnel", "providertypelist": "PEDORTHIC PERSONNEL|MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 42.48697, "longitude": -83.25827, "is_contracted_for_cba": false}, {"provider_id": 20341361, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #05991", "practiceaddress1": "6706 CARLISLE PIKE", "practiceaddress2": null, "practicecity": "MECHANICSBURG", "practicestate": "PA", "practicezip9code": 170501711, "telephonenumber": 7176971645, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.23771, "longitude": -77.06174, "is_contracted_for_cba": false}, {"provider_id": 20342867, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02002", "practiceaddress1": "239 FOX RUN LN", "practiceaddress2": null, "practicecity": "EAST STROUDSBURG", "practicestate": "PA", "practicezip9code": 183029116, "telephonenumber": 5702236892, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.13858, "longitude": -75.13254, "is_contracted_for_cba": false}, {"provider_id": 34358798, "acceptsassignement": true, "participationbegindate": 1720656000000, "businessname": "MINNEHAHA MEDICAL LLC", "practicename": "MINNEHAHA MEDICAL LLC", "practiceaddress1": "962 UNIVERSITY AVE W", "practiceaddress2": "STE 3", "practicecity": "SAINT PAUL", "practicestate": "MN", "practicezip9code": 55104, "telephonenumber": 6516663972, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "latitude": 44.9555331445, "longitude": -93.1407870041, "is_contracted_for_cba": false}, {"provider_id": 20335001, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04916", "practiceaddress1": "108 PARK RD", "practiceaddress2": null, "practicecity": "PLEASANT GROVE", "practicestate": "AL", "practicezip9code": 351271805, "telephonenumber": 2057441021, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.49203, "longitude": -86.96047, "is_contracted_for_cba": false}, {"provider_id": 21608967, "acceptsassignement": false, "participationbegindate": 1673827200000, "businessname": "UOFL HEALTH-LOUISVILLE INC", "practicename": "UOFL HEALTH - AMBULATORY PHARMACY-M", "practiceaddress1": "1850 BLUEGRASS AVE", "practiceaddress2": null, "practicecity": "LOUISVILLE", "practicestate": "KY", "practicezip9code": 402151161, "telephonenumber": 5023616000, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 38.1780839843, "longitude": -85.7937990063, "is_contracted_for_cba": false}, {"provider_id": 20307683, "acceptsassignement": false, "participationbegindate": 1673827200000, "businessname": "SUNRISE SUNSET HEALTHCARE LLC", "practicename": "HOMECARE FOR THE 21ST CENTURY-REDDI", "practiceaddress1": "625 WALNUT ST", "practiceaddress2": null, "practicecity": "RED BLUFF", "practicestate": "CA", "practicezip9code": 960803325, "telephonenumber": 5307681401, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Automatic Ext Defibrillator (AEDS) and/or Supplies|Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Implanted Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Respiratory Assist Devices|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.17668, "longitude": -122.23885, "is_contracted_for_cba": false}, {"provider_id": 21611277, "acceptsassignement": true, "participationbegindate": 1720656000000, "businessname": "HEDOAP LLC", "practicename": "PRIORITY OXYGEN & MEDICAL SUPPLIES", "practiceaddress1": "3201 CLUB MANOR DR", "practiceaddress2": "STE D", "practicecity": "MAUMELLE", "practicestate": "AR", "practicezip9code": 721136082, "telephonenumber": 5017993495, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Gastric Suction Pumps|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps", "latitude": 34.8508697072, "longitude": -92.4078185728, "is_contracted_for_cba": false}, {"provider_id": 21611283, "acceptsassignement": false, "participationbegindate": 1720569600000, "businessname": "PROSTHETIC & ORTHOTIC GROUP BOULDER LLC", "practicename": "PROSTHETIC & ORTHOTIC GROUP BOULDER", "practiceaddress1": "2850 IRIS AVE", "practiceaddress2": "STE I4", "practicecity": "BOULDER", "practicestate": "CO", "practicezip9code": 803011493, "telephonenumber": 3033814500, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Neuromuscular Elect Stimulators (NMES)/Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.0352479797, "longitude": -105.2566490067, "is_contracted_for_cba": false}, {"provider_id": 23283013, "acceptsassignement": true, "participationbegindate": 1719964800000, "businessname": "ELITE RX INC", "practicename": "ELITE RX INC", "practiceaddress1": "19506 47TH AVE", "practiceaddress2": null, "practicecity": "FLUSHING", "practicestate": "NY", "practicezip9code": 113583910, "telephonenumber": 9172852177, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7524508055, "longitude": -73.7859229901, "is_contracted_for_cba": false}, {"provider_id": 20317637, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01419", "practiceaddress1": "3919 CENTREVILLE RD", "practiceaddress2": null, "practicecity": "CHANTILLY", "practicestate": "VA", "practicezip9code": 201513203, "telephonenumber": 7033782337, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.89542, "longitude": -77.43025, "is_contracted_for_cba": false}, {"provider_id": 20317631, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01417", "practiceaddress1": "13031 LEE JACKSON HWY", "practiceaddress2": null, "practicecity": "FAIRFAX", "practicestate": "VA", "practicezip9code": 220332050, "telephonenumber": 7033787550, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.88034, "longitude": -77.39625, "is_contracted_for_cba": false}, {"provider_id": 20307887, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "ARTIFICIAL LIMB SPECIALIST OTTOBOCK", "practiceaddress1": "7600 N 15TH ST", "practiceaddress2": "STE 105", "practicecity": "PHOENIX", "practicestate": "AZ", "practicezip9code": 850204330, "telephonenumber": 6027452080, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 33.54214, "longitude": -112.05042, "is_contracted_for_cba": false}, {"provider_id": 20307803, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "PETER HARSCH PROSTHETICS OTTOBOCK C", "practiceaddress1": "5995 MIRA MESA BLVD", "practiceaddress2": "STE A", "practicecity": "SAN DIEGO", "practicestate": "CA", "practicezip9code": 921214305, "telephonenumber": 8584040733, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Limb Prostheses|Lymphedema Compression Treatment Items", "latitude": 32.89792, "longitude": -117.19158, "is_contracted_for_cba": false}, {"provider_id": 20307917, "acceptsassignement": false, "participationbegindate": 1673568000000, "businessname": "OTTO BOCK PATIENT CARE LLC", "practicename": "OTTO BOCK PATIENT CARE LLC", "practiceaddress1": "73 THOMAS JOHNSON DR", "practiceaddress2": "STE B", "practicecity": "FREDERICK", "practicestate": "MD", "practicezip9code": 217024426, "telephonenumber": 3016984692, "specialitieslist": "MSC With Orthotic-Prosthetic|Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Neuromuscular Elect Stimulators (NMES)/Supplies|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 39.45471, "longitude": -77.40145, "is_contracted_for_cba": false}, {"provider_id": 20303453, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "6555 SUGARLOAF PKWY", "practiceaddress2": "STE 200", "practicecity": "DULUTH", "practicestate": "GA", "practicezip9code": 300974929, "telephonenumber": 7704182398, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.99644, "longitude": -84.09177, "is_contracted_for_cba": false}, {"provider_id": 20303375, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER DRUGSTORE # 471", "practiceaddress1": "6055 OLD NATIONAL HWY", "practiceaddress2": null, "practicecity": "ATLANTA", "practicestate": "GA", "practicezip9code": 303494325, "telephonenumber": 7709965488, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.58939, "longitude": -84.46897, "is_contracted_for_cba": false}, {"provider_id": 20303597, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY N-575", "practiceaddress1": "811 GAY ST", "practiceaddress2": null, "practicecity": "PORTSMOUTH", "practicestate": "OH", "practicezip9code": 456624118, "telephonenumber": 7403542262, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.73659, "longitude": -82.99452, "is_contracted_for_cba": false}, {"provider_id": 20303603, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #210", "practiceaddress1": "4498 CHAMBLEE DUNWOODY RD", "practiceaddress2": null, "practicecity": "DUNWOODY", "practicestate": "GA", "practicezip9code": 303386223, "telephonenumber": 7704517408, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.92217, "longitude": -84.31432, "is_contracted_for_cba": false}, {"provider_id": 20329577, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHARMACY # 04897", "practiceaddress1": "155 BIRMINGHAM RD", "practiceaddress2": "STE 114", "practicecity": "CENTREVILLE", "practicestate": "AL", "practicezip9code": 350422949, "telephonenumber": 2059264654, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.94787, "longitude": -87.15046, "is_contracted_for_cba": false}, {"provider_id": 20368871, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6228", "practiceaddress1": "2690 GOLF RD", "practiceaddress2": null, "practicecity": "GLENVIEW", "practicestate": "IL", "practicezip9code": 600254744, "telephonenumber": 8476579863, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.05501, "longitude": -87.82344, "is_contracted_for_cba": false}, {"provider_id": 20387525, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "TEAM CARE", "practiceaddress1": "5881 TURKEY LAKE RD", "practiceaddress2": "STE B2-02", "practicecity": "ORLANDO", "practicestate": "FL", "practicezip9code": 328197747, "telephonenumber": 4079031752, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.47966, "longitude": -81.47507, "is_contracted_for_cba": false}, {"provider_id": 20304953, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "THE KROGER CO", "practiceaddress1": "50789 VALLEY PLAZA DR", "practiceaddress2": null, "practicecity": "SAINT CLAIRSVILLE", "practicestate": "OH", "practicezip9code": 439501752, "telephonenumber": 7406957170, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.0694, "longitude": -80.86454, "is_contracted_for_cba": false}, {"provider_id": 20303765, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY 16-880", "practiceaddress1": "1608 MARION MOUNT GILEAD RD", "practiceaddress2": null, "practicecity": "MARION", "practicestate": "OH", "practicezip9code": 433025822, "telephonenumber": 7403892144, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.58125, "longitude": -83.08397, "is_contracted_for_cba": false}, {"provider_id": 20303459, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #016", "practiceaddress1": "9610 N KINGS HWY", "practiceaddress2": null, "practicecity": "MYRTLE BEACH", "practicestate": "SC", "practicezip9code": 295724006, "telephonenumber": 8434492158, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.77627, "longitude": -78.79225, "is_contracted_for_cba": false}, {"provider_id": 20304299, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #436", "practiceaddress1": "5341 HIGHWAY 20 S", "practiceaddress2": null, "practicecity": "COVINGTON", "practicestate": "GA", "practicezip9code": 300164409, "telephonenumber": 7707884008, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.54756, "longitude": -84.01691, "is_contracted_for_cba": false}, {"provider_id": 20320835, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "NORTH CAROLINA CVS PHARMACY LLC", "practiceaddress1": "4000 BATTLEGROUND AVE", "practiceaddress2": null, "practicecity": "GREENSBORO", "practicestate": "NC", "practicezip9code": 274109296, "telephonenumber": 3362827908, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.15702, "longitude": -79.87291, "is_contracted_for_cba": false}, {"provider_id": 20320829, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "NORTH CAROLINA CVS PHARMACY LLC", "practiceaddress1": "1106B MAIN STREET EXT", "practiceaddress2": null, "practicecity": "SWANSBORO", "practicestate": "NC", "practicezip9code": 285849114, "telephonenumber": 9107085008, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.69519, "longitude": -77.12582, "is_contracted_for_cba": false}, {"provider_id": 20320823, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 11348", "practiceaddress1": "129 NINE FOOT RD", "practiceaddress2": null, "practicecity": "NEWPORT", "practicestate": "NC", "practicezip9code": 285709251, "telephonenumber": 2527774279, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.78943, "longitude": -76.87802, "is_contracted_for_cba": false}, {"provider_id": 20320037, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 00947", "practiceaddress1": "28 ABBY RD", "practiceaddress2": null, "practicecity": "PALMYRA", "practicestate": "VA", "practicezip9code": 229632085, "telephonenumber": 4345892278, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.89942, "longitude": -78.31225, "is_contracted_for_cba": false}, {"provider_id": 20364359, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7832", "practiceaddress1": "3339 E ANAHEIM ST", "practiceaddress2": null, "practicecity": "LONG BEACH", "practicestate": "CA", "practicezip9code": 908044032, "telephonenumber": 5625975338, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.78268, "longitude": -118.15293, "is_contracted_for_cba": false}, {"provider_id": 20364347, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "INTER PR 3 & PR 5 KM 77", "practiceaddress2": "CENTRO COMERCIAL PLAZA MALL", "practicecity": "HUMACAO", "practicestate": "PR", "practicezip9code": 792, "telephonenumber": 7878521330, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 18.13802, "longitude": -65.78849, "is_contracted_for_cba": false}, {"provider_id": 34356902, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "INT PR1 PR34 AVE DEGETAU", "practiceaddress2": null, "practicecity": "CAGUAS", "practicestate": "PR", "practicezip9code": 725, "telephonenumber": 7877046500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 18.2251685999, "longitude": -66.0481872665, "is_contracted_for_cba": false}, {"provider_id": 20304719, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #463", "practiceaddress1": "2295 TOWNE LAKE PKWY", "practiceaddress2": null, "practicecity": "WOODSTOCK", "practicestate": "GA", "practicezip9code": 301895520, "telephonenumber": 7705172088, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.12845, "longitude": -84.56877, "is_contracted_for_cba": false}, {"provider_id": 20304635, "acceptsassignement": true, "participationbegindate": 1697587200000, "businessname": "THE KROGER CO", "practicename": "KROGER PHARMACY #418", "practiceaddress1": "311 EAST GWINNETT ST", "practiceaddress2": null, "practicecity": "SAVANNAH", "practicestate": "GA", "practicezip9code": 314015808, "telephonenumber": 9122312266, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.06614, "longitude": -81.09249, "is_contracted_for_cba": false}, {"provider_id": 20563583, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "MARIANO'S PHARMACY #8537", "practiceaddress1": "1300 S NAPER BLVD", "practiceaddress2": null, "practicecity": "NAPERVILLE", "practicestate": "IL", "practicezip9code": 605407354, "telephonenumber": 6306379921, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.75034, "longitude": -88.1149, "is_contracted_for_cba": false}, {"provider_id": 20563967, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "MARIANO'S PHARMACY #8534", "practiceaddress1": "1500N CLYBOURN AVE C-104", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606103030, "telephonenumber": 3124759691, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.90861, "longitude": -87.64649, "is_contracted_for_cba": false}, {"provider_id": 20563925, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "MARIANOS PHARMACY 38532", "practiceaddress1": "2323 CAPITAL DR", "practiceaddress2": null, "practicecity": "NORTHBROOK", "practicestate": "IL", "practicezip9code": 600626144, "telephonenumber": 8475130077, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.11298, "longitude": -87.87581, "is_contracted_for_cba": false}, {"provider_id": 20337035, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06078", "practiceaddress1": "175 W EADS PKWY", "practiceaddress2": null, "practicecity": "LAWRENCEBURG", "practicestate": "IN", "practicezip9code": 470251174, "telephonenumber": 8125375711, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.09665, "longitude": -84.85656, "is_contracted_for_cba": false}, {"provider_id": 20563193, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK 'N SAVE PHARMACY #8118", "practiceaddress1": "2400 W WISCONSIN AVE", "practiceaddress2": null, "practicecity": "GRAND CHUTE", "practicestate": "WI", "practicezip9code": 549143109, "telephonenumber": 9208310400, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.27335, "longitude": -88.44691, "is_contracted_for_cba": false}, {"provider_id": 20563637, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK'N SAVE PHARMACY #6867", "practiceaddress1": "9200N GREEN BAY RD", "practiceaddress2": null, "practicecity": "BROWN DEER", "practicestate": "WI", "practicezip9code": 532091104, "telephonenumber": 4143547213, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.18542, "longitude": -87.96387, "is_contracted_for_cba": false}, {"provider_id": 20340203, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY # 3280", "practiceaddress1": "255 OLD CAPITAL PLZ NW", "practiceaddress2": null, "practicecity": "CORYDON", "practicestate": "IN", "practicezip9code": 471122081, "telephonenumber": 8127387191, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.22682, "longitude": -86.13347, "is_contracted_for_cba": false}, {"provider_id": 20340197, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY # 7791", "practiceaddress1": "8330 CRAWFORDSVILLE RD", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462341714, "telephonenumber": 3172974900, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.81107, "longitude": -86.30897, "is_contracted_for_cba": false}, {"provider_id": 20364941, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2171", "practiceaddress1": "700 E DERENNE AVE", "practiceaddress2": null, "practicecity": "SAVANNAH", "practicestate": "GA", "practicezip9code": 314056716, "telephonenumber": 9123544853, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.02579, "longitude": -81.09717, "is_contracted_for_cba": false}, {"provider_id": 20396705, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #17043", "practiceaddress1": "1115 OLD TOWNE RD", "practiceaddress2": null, "practicecity": "CHARLESTON", "practicestate": "SC", "practicezip9code": 294076062, "telephonenumber": 8437665593, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.79847, "longitude": -79.9965, "is_contracted_for_cba": false}, {"provider_id": 20322041, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07048", "practiceaddress1": "7295 BEACH DRIVE", "practiceaddress2": null, "practicecity": "OCEAN ISLE BEACH", "practicestate": "NC", "practicezip9code": 284695515, "telephonenumber": 9105790970, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.89752, "longitude": -78.48454, "is_contracted_for_cba": false}, {"provider_id": 20329187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01624", "practiceaddress1": "5001 JONESTOWN RD", "practiceaddress2": null, "practicecity": "HARRISBURG", "practicestate": "PA", "practicezip9code": 171122922, "telephonenumber": 7175454229, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.30775, "longitude": -76.80431, "is_contracted_for_cba": false}, {"provider_id": 20331077, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALABAMA CVS PHARMACY, L.L.C.", "practicename": "CVS PHAMACY 01774", "practiceaddress1": "100 PROVIDENCE MAIN ST NW", "practiceaddress2": "STE G", "practicecity": "HUNTSVILLE", "practicestate": "AL", "practicezip9code": 358064827, "telephonenumber": 2568372057, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.74893, "longitude": -86.69338, "is_contracted_for_cba": false}, {"provider_id": 20331335, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #16027", "practiceaddress1": "13201 RIDGEDALE DR", "practiceaddress2": null, "practicecity": "MINNETONKA", "practicestate": "MN", "practicezip9code": 553051809, "telephonenumber": 9525428266, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 44.97048, "longitude": -93.4456, "is_contracted_for_cba": false}, {"provider_id": 20331305, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "GRAND ST PAUL CVS LLC", "practicename": "CVS PHARMACY #17269", "practiceaddress1": "8900 HWY 7", "practiceaddress2": null, "practicecity": "MINNEAPOLIS", "practicestate": "MN", "practicezip9code": 554263919, "telephonenumber": 9529358407, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 44.93514, "longitude": -93.3896, "is_contracted_for_cba": false}, {"provider_id": 20398667, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4865", "practiceaddress1": "515 CARLYLE AVE", "practiceaddress2": null, "practicecity": "BELLEVILLE", "practicestate": "IL", "practicezip9code": 622216223, "telephonenumber": 6182221827, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.51612, "longitude": -89.95818, "is_contracted_for_cba": false}, {"provider_id": 20395835, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5156", "practiceaddress1": "7800 N CORTARO RD", "practiceaddress2": null, "practicecity": "TUCSON", "practicestate": "AZ", "practicezip9code": 857438326, "telephonenumber": 5205728699, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.34907, "longitude": -111.0985, "is_contracted_for_cba": false}, {"provider_id": 20395823, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #12901", "practiceaddress1": "3411 BROADWAY AVE", "practiceaddress2": null, "practicecity": "NORTH BEND", "practicestate": "OR", "practicezip9code": 974591201, "telephonenumber": 5417560118, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.39092, "longitude": -124.23909, "is_contracted_for_cba": false}, {"provider_id": 20306249, "acceptsassignement": true, "participationbegindate": 1683676800000, "businessname": "5 STARS DME LLC", "practicename": "5 STARS DME LLC", "practiceaddress1": "501 MARINA", "practiceaddress2": "1A", "practicecity": "LAREDO", "practicestate": "TX", "practicezip9code": 780464065, "telephonenumber": 9567013509, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 27.4361, "longitude": -99.48043, "is_contracted_for_cba": false}, {"provider_id": 20395781, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS # 3132", "practiceaddress1": "2415 E UNION HILLS DR", "practiceaddress2": null, "practicecity": "PHOENIX", "practicestate": "AZ", "practicezip9code": 850503146, "telephonenumber": 6028670561, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.65496, "longitude": -112.02939, "is_contracted_for_cba": false}, {"provider_id": 20306309, "acceptsassignement": true, "participationbegindate": 1683504000000, "businessname": "SANFORD HEALTH OF NORTHERN MINNESOTA", "practicename": "SANFORD BEMIDJI INFUSION PHARMACY", "practiceaddress1": "1233 34TH ST NW", "practiceaddress2": "STE B", "practicecity": "BEMIDJI", "practicestate": "MN", "practicezip9code": 566015112, "telephonenumber": 2183334770, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies", "latitude": 47.5015, "longitude": -94.90041, "is_contracted_for_cba": false}, {"provider_id": 20306279, "acceptsassignement": false, "participationbegindate": 1683504000000, "businessname": "THE PINK TENT, LLC", "practicename": "THE PINK TENT", "practiceaddress1": "670 S FERGUSON AVE", "practiceaddress2": "STE 2A", "practicecity": "BOZEMAN", "practicestate": "MT", "practicezip9code": 597186493, "telephonenumber": 4065512178, "specialitieslist": "Prosthetic Personnel", "providertypelist": null, "supplieslist": "Breast Prostheses and/or Accessories|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 45.67234, "longitude": -111.09367, "is_contracted_for_cba": false}, {"provider_id": 20564057, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "PICK 'N SAVE PHARMACY #6368", "practiceaddress1": "17295 W CAPITOL DR", "practiceaddress2": null, "practicecity": "BROOKFIELD", "practicestate": "WI", "practicezip9code": 530452004, "telephonenumber": 2623731080, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.08989, "longitude": -88.12686, "is_contracted_for_cba": false}, {"provider_id": 20563151, "acceptsassignement": true, "participationbegindate": 1702857600000, "businessname": "ROUNDYS SUPERMARKETS INC", "practicename": "ROUNDYS SUPERMARKETS INC", "practiceaddress1": "1008 MILWAUKEE AVE", "practiceaddress2": null, "practicecity": "BURLINGTON", "practicestate": "WI", "practicezip9code": 531051362, "telephonenumber": 2627671446, "specialitieslist": "Pharmacy|Grocery Store", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.68866, "longitude": -88.26912, "is_contracted_for_cba": false}, {"provider_id": 20316611, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06969", "practiceaddress1": "3611 COLLEGE AVE", "practiceaddress2": null, "practicecity": "SNYDER", "practicestate": "TX", "practicezip9code": 795494636, "telephonenumber": 3255732673, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.70519, "longitude": -100.91922, "is_contracted_for_cba": false}, {"provider_id": 20316605, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06971", "practiceaddress1": "4210 COLLEGE HILLS BLVD", "practiceaddress2": null, "practicecity": "SAN ANGELO", "practicestate": "TX", "practicezip9code": 769046509, "telephonenumber": 9159428602, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.42117, "longitude": -100.48453, "is_contracted_for_cba": false}, {"provider_id": 20316587, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 07080", "practiceaddress1": "1000 N FIRST ST", "practiceaddress2": null, "practicecity": "ROBSTOWN", "practicestate": "TX", "practicezip9code": 78380, "telephonenumber": 3613877591, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 27.79909, "longitude": -97.66741, "is_contracted_for_cba": false}, {"provider_id": 20334707, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03999", "practiceaddress1": "401 CHESTNUT ST", "practiceaddress2": null, "practicecity": "CARNEGIE", "practicestate": "PA", "practicezip9code": 151062777, "telephonenumber": 4122795020, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.41011, "longitude": -80.08232, "is_contracted_for_cba": false}, {"provider_id": 20306405, "acceptsassignement": true, "participationbegindate": 1682812800000, "businessname": "PHARMCARE USA OF OHIO LLC", "practicename": "PHARMCARE USA OF BRUNSWICK", "practiceaddress1": "1130 INDUSTRIAL PKWY N", "practiceaddress2": "STE 1", "practicecity": "BRUNSWICK", "practicestate": "OH", "practicezip9code": 442125605, "telephonenumber": 8662193619, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|External Infusion Pumps and/or Supplies|Insulin Infusion Pumps and/or Supplies|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies", "latitude": 41.24571, "longitude": -81.79846, "is_contracted_for_cba": false}, {"provider_id": 20317523, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #06283", "practiceaddress1": "817 W MAIN ST", "practiceaddress2": null, "practicecity": "DANVILLE", "practicestate": "VA", "practicezip9code": 245414204, "telephonenumber": 4347930231, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 36.56997, "longitude": -79.42322, "is_contracted_for_cba": false}, {"provider_id": 20328791, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02867", "practiceaddress1": "1937 MACDADE BLVD", "practiceaddress2": null, "practicecity": "FOLSOM", "practicestate": "PA", "practicezip9code": 190331214, "telephonenumber": 6102371301, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.89743, "longitude": -75.3176, "is_contracted_for_cba": false}, {"provider_id": 20336267, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 00722", "practiceaddress1": "334 BALTIMORE PIKE", "practiceaddress2": null, "practicecity": "SPRINGFIELD", "practicestate": "PA", "practicezip9code": 190643631, "telephonenumber": 6105431765, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.92216, "longitude": -75.31934, "is_contracted_for_cba": false}, {"provider_id": 20328197, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "PENNSYLVANIA CVS PHARMACY LLC", "practiceaddress1": "8931 ROUTE 30", "practiceaddress2": null, "practicecity": "NORTH HUNTINGDON", "practicestate": "PA", "practicezip9code": 156422704, "telephonenumber": 7248635398, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.32033, "longitude": -79.69142, "is_contracted_for_cba": false}, {"provider_id": 20340293, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY 6565", "practiceaddress1": "1466 W OAK ST", "practiceaddress2": null, "practicecity": "ZIONSVILLE", "practicestate": "IN", "practicezip9code": 460771800, "telephonenumber": 3178736438, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.95015, "longitude": -86.27959, "is_contracted_for_cba": false}, {"provider_id": 20340287, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06597", "practiceaddress1": "10001 E. WASHINGTON STREET", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462292828, "telephonenumber": 3178976323, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.77486, "longitude": -85.98892, "is_contracted_for_cba": false}, {"provider_id": 20340281, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #06722", "practiceaddress1": "103 E HACKBERRY ST", "practiceaddress2": null, "practicecity": "SALEM", "practicestate": "IN", "practicezip9code": 471672001, "telephonenumber": 8128836929, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.60865, "longitude": -86.10015, "is_contracted_for_cba": false}, {"provider_id": 20332679, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #08152", "practiceaddress1": "22060 OUTER DR", "practiceaddress2": null, "practicecity": "DEARBORN", "practicestate": "MI", "practicezip9code": 481243932, "telephonenumber": 3132747651, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.28464, "longitude": -83.23265, "is_contracted_for_cba": false}, {"provider_id": 20399975, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4875", "practiceaddress1": "3033 S 14TH ST", "practiceaddress2": null, "practicecity": "ABILENE", "practicestate": "TX", "practicezip9code": 796055144, "telephonenumber": 3257951440, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.43212, "longitude": -99.7589, "is_contracted_for_cba": false}, {"provider_id": 20400287, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5165", "practiceaddress1": "204 HIGHWAY 80 E", "practiceaddress2": null, "practicecity": "CLINTON", "practicestate": "MS", "practicezip9code": 390564716, "telephonenumber": 6019261179, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 32.33589, "longitude": -90.32416, "is_contracted_for_cba": false}, {"provider_id": 23281057, "acceptsassignement": true, "participationbegindate": 1702339200000, "businessname": "PREMIER HOLDINGS MANAGEMENT INC", "practicename": "PREMIER HOLDINGS MANAGEMENT INC", "practiceaddress1": "146 HENDRICKSON AVE", "practiceaddress2": null, "practicecity": "LYNBROOK", "practicestate": "NY", "practicezip9code": 115631038, "telephonenumber": 5162181247, "specialitieslist": "Medical Supply Company Other|MSC With Orthotic Personnel", "providertypelist": "MEDICAL SUPPLY COMPANY WITH PEDORTHIC PERSONNEL", "supplieslist": "Commodes, Urinals, Bedpans|Contracture Treatment Devices: Dynamic Splint|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Walkers|Wheelchair Seating/Cushions|Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Penile Pumps|Breast Prostheses and/or Accessories|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 40.6654766578, "longitude": -73.6781636503, "is_contracted_for_cba": false}, {"provider_id": 23281075, "acceptsassignement": true, "participationbegindate": 1702080000000, "businessname": "JACKSON MEDICAL SERVICE SUPPLIES & EQUIPMENT", "practicename": "JACKSON MEDICAL SERVICE SUPPLIES &", "practiceaddress1": "2930 HILLTOP MALL RD", "practiceaddress2": "STE B", "practicecity": "RICHMOND", "practicestate": "CA", "practicezip9code": 948062197, "telephonenumber": 5102221075, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Neurostimulators and/or Supplies|Ostomy Supplies|Urological Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts", "latitude": 37.977872001, "longitude": -122.3312419943, "is_contracted_for_cba": false}, {"provider_id": 20317805, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01534", "practiceaddress1": "1301 EAST NINE MILE RD", "practiceaddress2": null, "practicecity": "HIGHLAND SPRINGS", "practicestate": "VA", "practicezip9code": 230752305, "telephonenumber": 8047376493, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.53604, "longitude": -77.31858, "is_contracted_for_cba": false}, {"provider_id": 20318051, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01539", "practiceaddress1": "10805 TIDEWATER TRL", "practiceaddress2": null, "practicecity": "FREDERICKSBURG", "practicestate": "VA", "practicezip9code": 224082048, "telephonenumber": 5403683390, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.25454, "longitude": -77.42763, "is_contracted_for_cba": false}, {"provider_id": 20318045, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 01542", "practiceaddress1": "629 COLONIAL HEIGHTS", "practiceaddress2": null, "practicecity": "COLONIAL HEIGHTS", "practicestate": "VA", "practicezip9code": 238343421, "telephonenumber": 8045263506, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.24687, "longitude": -77.40323, "is_contracted_for_cba": false}, {"provider_id": 20359475, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5639", "practiceaddress1": "320 S WATER ST", "practiceaddress2": null, "practicecity": "KENT", "practicestate": "OH", "practicezip9code": 442403528, "telephonenumber": 3306775650, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.1506, "longitude": -81.35898, "is_contracted_for_cba": false}, {"provider_id": 20399717, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #03564", "practiceaddress1": "99 HARVARD ST", "practiceaddress2": null, "practicecity": "BROOKLINE", "practicestate": "MA", "practicezip9code": 24466403, "telephonenumber": 6177314536, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.33619, "longitude": -71.12063, "is_contracted_for_cba": false}, {"provider_id": 20392517, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4926", "practiceaddress1": "7001 FRANKFORD AVE", "practiceaddress2": null, "practicecity": "PHILADELPHIA", "practicestate": "PA", "practicezip9code": 191351605, "telephonenumber": 2155430715, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.03448, "longitude": -75.04502, "is_contracted_for_cba": false}, {"provider_id": 20392439, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3136", "practiceaddress1": "1201 CAMP JACKSON RD", "practiceaddress2": null, "practicecity": "CAHOKIA", "practicestate": "IL", "practicezip9code": 622062231, "telephonenumber": 6183322904, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 38.56089, "longitude": -90.1741, "is_contracted_for_cba": false}, {"provider_id": 20399753, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4351", "practiceaddress1": "112 BROWNS WAY RD", "practiceaddress2": null, "practicecity": "MIDLOTHIAN", "practicestate": "VA", "practicezip9code": 231149507, "telephonenumber": 8048970977, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 37.49699, "longitude": -77.63827, "is_contracted_for_cba": false}, {"provider_id": 20400299, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04134", "practiceaddress1": "11724 RESEARCH BLVD", "practiceaddress2": null, "practicecity": "AUSTIN", "practicestate": "TX", "practicezip9code": 787592446, "telephonenumber": 5122502070, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.42069, "longitude": -97.74771, "is_contracted_for_cba": false}, {"provider_id": 20359463, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5413", "practiceaddress1": "600 COUNTY ROAD 10 NE", "practiceaddress2": null, "practicecity": "BLAINE", "practicestate": "MN", "practicezip9code": 554342329, "telephonenumber": 7637869081, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 45.12666, "longitude": -93.25519, "is_contracted_for_cba": false}, {"provider_id": 20306495, "acceptsassignement": false, "participationbegindate": 1681776000000, "businessname": "MOUNTAIN PEAK ASSOCIATES LLC", "practicename": "YOU CAN HOME MEDICAL", "practiceaddress1": "8086 W BOWLES AVE", "practiceaddress2": "UNIT G1", "practicecity": "LITTLETON", "practicestate": "CO", "practicezip9code": 801233085, "telephonenumber": 7207401836, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Lymphedema Compression Treatment Items", "latitude": 39.60964, "longitude": -105.0868, "is_contracted_for_cba": false}, {"provider_id": 20324309, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17553", "practiceaddress1": "1040 NE CORONADO DR", "practiceaddress2": null, "practicecity": "BLUE SPRINGS", "practicestate": "MO", "practicezip9code": 640142971, "telephonenumber": 8166223401, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.02625, "longitude": -94.24355, "is_contracted_for_cba": false}, {"provider_id": 20339879, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #04368", "practiceaddress1": "801 MAIN ST", "practiceaddress2": null, "practicecity": "MUNSTER", "practicestate": "IN", "practicezip9code": 463214066, "telephonenumber": 2199242491, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.52282, "longitude": -87.50661, "is_contracted_for_cba": false}, {"provider_id": 20359121, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5024", "practiceaddress1": "2415 SW 75TH ST", "practiceaddress2": null, "practicecity": "GAINESVILLE", "practicestate": "FL", "practicezip9code": 326088330, "telephonenumber": 3523339704, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.63137, "longitude": -82.42237, "is_contracted_for_cba": false}, {"provider_id": 20393789, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5291", "practiceaddress1": "13664 23 MILE RD", "practiceaddress2": null, "practicecity": "SHELBY TOWNSHIP", "practicestate": "MI", "practicezip9code": 483152952, "telephonenumber": 5862471199, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.67021, "longitude": -82.99405, "is_contracted_for_cba": false}, {"provider_id": 20322671, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #11312", "practiceaddress1": "1030 MAIN ST", "practiceaddress2": null, "practicecity": "LEXINGTON", "practicestate": "MO", "practicezip9code": 640671345, "telephonenumber": 6602592258, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.18561, "longitude": -93.88278, "is_contracted_for_cba": false}, {"provider_id": 20310893, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16988", "practiceaddress1": "21365 SW BALER WAY", "practiceaddress2": null, "practicecity": "SHERWOOD", "practicestate": "OR", "practicezip9code": 971408989, "telephonenumber": 5036106001, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.36348, "longitude": -122.84292, "is_contracted_for_cba": false}, {"provider_id": 20333825, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #00445", "practiceaddress1": "51000 ROMEO PLANK RD", "practiceaddress2": null, "practicecity": "MACOMB", "practicestate": "MI", "practicezip9code": 480424128, "telephonenumber": 5869928570, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.67236, "longitude": -82.94074, "is_contracted_for_cba": false}, {"provider_id": 20392391, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5028", "practiceaddress1": "3500 GALLATIN PIKE", "practiceaddress2": null, "practicecity": "NASHVILLE", "practicestate": "TN", "practicezip9code": 372162604, "telephonenumber": 6152282982, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.2122, "longitude": -86.73205, "is_contracted_for_cba": false}, {"provider_id": 20373719, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1321 OXFORD ST", "practiceaddress2": null, "practicecity": "WORTHINGTON", "practicestate": "MN", "practicezip9code": 561871761, "telephonenumber": 5073727496, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.63128, "longitude": -95.59494, "is_contracted_for_cba": false}, {"provider_id": 20320001, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY 16992", "practiceaddress1": "4037 DURHAM CHAPEL HILL BLVD", "practiceaddress2": null, "practicecity": "DURHAM", "practicestate": "NC", "practicezip9code": 277072516, "telephonenumber": 9197650009, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.96874, "longitude": -78.96001, "is_contracted_for_cba": false}, {"provider_id": 20320331, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17605", "practiceaddress1": "3001 MARKET CENTER DR", "practiceaddress2": null, "practicecity": "MORRISVILLE", "practicestate": "NC", "practicezip9code": 275607505, "telephonenumber": 9193792181, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.80722, "longitude": -78.81586, "is_contracted_for_cba": false}, {"provider_id": 20320151, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16930", "practiceaddress1": "115 RIVER HILLS RD", "practiceaddress2": null, "practicecity": "ASHEVILLE", "practicestate": "NC", "practicezip9code": 288052550, "telephonenumber": 8282984262, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.57365, "longitude": -82.52062, "is_contracted_for_cba": false}, {"provider_id": 20340125, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #04649", "practiceaddress1": "10580 E 96TH ST", "practiceaddress2": null, "practicecity": "FISHERS", "practicestate": "IN", "practicezip9code": 460379643, "telephonenumber": 3178496406, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.9272, "longitude": -85.98021, "is_contracted_for_cba": false}, {"provider_id": 20355437, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02598", "practiceaddress1": "7685 S RAINBOW BLVD", "practiceaddress2": null, "practicecity": "LAS VEGAS", "practicestate": "NV", "practicezip9code": 891395477, "telephonenumber": 7026143094, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.04959, "longitude": -115.2433, "is_contracted_for_cba": false}, {"provider_id": 20372303, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "1196 OLD COUNTRY RD", "practiceaddress2": null, "practicecity": "RIVERHEAD", "practicestate": "NY", "practicezip9code": 119012066, "telephonenumber": 6312080239, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.92991, "longitude": -72.68163, "is_contracted_for_cba": false}, {"provider_id": 20368835, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6181", "practiceaddress1": "5475 MURRELL RD", "practiceaddress2": null, "practicecity": "ROCKLEDGE", "practicestate": "FL", "practicezip9code": 329556665, "telephonenumber": 3216313732, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 28.26602, "longitude": -80.71743, "is_contracted_for_cba": false}, {"provider_id": 20306579, "acceptsassignement": true, "participationbegindate": 1681430400000, "businessname": "DEZZ INC", "practicename": "DEZZ INC", "practiceaddress1": "735 KINGSBAY RD", "practiceaddress2": null, "practicecity": "SAINT MARYS", "practicestate": "GA", "practicezip9code": 315583807, "telephonenumber": 9126737777, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Continuous Positive Airway Pressure (CPAP) Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Surgical Dressings", "latitude": 30.78146, "longitude": -81.59817, "is_contracted_for_cba": false}, {"provider_id": 20319371, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01980", "practiceaddress1": "7048 MECHANICSVILLE", "practiceaddress2": null, "practicecity": "MECHANICSVLLE", "practicestate": "VA", "practicezip9code": 231117101, "telephonenumber": 8047309498, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.61243, "longitude": -77.3378, "is_contracted_for_cba": false}, {"provider_id": 20322281, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16067", "practiceaddress1": "2400 BERNADETTE DR", "practiceaddress2": null, "practicecity": "COLUMBIA", "practicestate": "MO", "practicezip9code": 652034616, "telephonenumber": 5734459545, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.96615, "longitude": -92.3762, "is_contracted_for_cba": false}, {"provider_id": 20371685, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #1002", "practiceaddress1": "3255 VICKSBURG LN N", "practiceaddress2": null, "practicecity": "PLYMOUTH", "practicestate": "MN", "practicezip9code": 554471317, "telephonenumber": 7632538917, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 45.01729, "longitude": -93.48187, "is_contracted_for_cba": false}, {"provider_id": 20371673, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #02156", "practiceaddress1": "2551 W MAIN ST", "practiceaddress2": null, "practicecity": "ALHAMBRA", "practicestate": "CA", "practicezip9code": 918011652, "telephonenumber": 6262811637, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 34.09529, "longitude": -118.15168, "is_contracted_for_cba": false}, {"provider_id": 20371661, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #09762", "practiceaddress1": "2909 MURFREESBORO PIKE", "practiceaddress2": null, "practicecity": "ANTIOCH", "practicestate": "TN", "practicezip9code": 370132227, "telephonenumber": 6153664280, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.06401, "longitude": -86.62852, "is_contracted_for_cba": false}, {"provider_id": 20371655, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "420 S MAIN ST", "practiceaddress2": null, "practicecity": "SPRINGVILLE", "practicestate": "UT", "practicezip9code": 846632251, "telephonenumber": 8018531214, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.16039, "longitude": -111.61077, "is_contracted_for_cba": false}, {"provider_id": 20355329, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #1337", "practiceaddress1": "6421 MARKET AVE N", "practiceaddress2": null, "practicecity": "CANTON", "practicestate": "OH", "practicezip9code": 447212490, "telephonenumber": 3302441435, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.87589, "longitude": -81.36392, "is_contracted_for_cba": false}, {"provider_id": 20355407, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9609", "practiceaddress1": "5305 BUSINESS HIGHWAY 51 S", "practiceaddress2": null, "practicecity": "WESTON", "practicestate": "WI", "practicezip9code": 544761324, "telephonenumber": 7153559640, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.90873, "longitude": -89.60404, "is_contracted_for_cba": false}, {"provider_id": 20322251, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "MISSOURI CVS PHARMACY LLC", "practicename": "CVS PHARMACY #16623", "practiceaddress1": "3849 VOGEL RD", "practiceaddress2": null, "practicecity": "ARNOLD", "practicestate": "MO", "practicezip9code": 630103776, "telephonenumber": 6362871339, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.41567, "longitude": -90.39225, "is_contracted_for_cba": false}, {"provider_id": 20313299, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY INC", "practiceaddress1": "9670 PROMINENT PT", "practiceaddress2": null, "practicecity": "COLORADO SPRINGS", "practicestate": "CO", "practicezip9code": 809245000, "telephonenumber": 7193024267, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.97401, "longitude": -104.74554, "is_contracted_for_cba": false}, {"provider_id": 20313227, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10995", "practiceaddress1": "12051 TIERRA ESTE RD", "practiceaddress2": null, "practicecity": "EL PASO", "practicestate": "TX", "practicezip9code": 799384573, "telephonenumber": 9159216302, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.77448, "longitude": -106.25143, "is_contracted_for_cba": false}, {"provider_id": 20313281, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16711", "practiceaddress1": "1001 E 120TH AVE", "practiceaddress2": null, "practicecity": "THORNTON", "practicestate": "CO", "practicezip9code": 802335711, "telephonenumber": 3032806273, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.91416, "longitude": -104.97425, "is_contracted_for_cba": false}, {"provider_id": 20328323, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "PENNSYLVANIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #08495", "practiceaddress1": "2363 OREGON PIKE", "practiceaddress2": null, "practicecity": "LANCASTER", "practicestate": "PA", "practicezip9code": 176014608, "telephonenumber": 7175601499, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Infusion Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.08948, "longitude": -76.28178, "is_contracted_for_cba": false}, {"provider_id": 20363717, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7160", "practiceaddress1": "4445 IVANREST AVE SW", "practiceaddress2": null, "practicecity": "GRANDVILLE", "practicestate": "MI", "practicezip9code": 494183150, "telephonenumber": 6165321065, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.88392, "longitude": -85.74339, "is_contracted_for_cba": false}, {"provider_id": 20331767, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #03538", "practiceaddress1": "5756 CLARKSTON RD", "practiceaddress2": null, "practicecity": "INDEPENDENCE", "practicestate": "MI", "practicezip9code": 483484706, "telephonenumber": 2486202761, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.75187, "longitude": -83.38177, "is_contracted_for_cba": false}, {"provider_id": 20358611, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5076", "practiceaddress1": "6800 OGDEN AVE", "practiceaddress2": null, "practicecity": "BERWYN", "practicestate": "IL", "practicezip9code": 604023643, "telephonenumber": 7087499061, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.82685, "longitude": -87.79348, "is_contracted_for_cba": false}, {"provider_id": 20354825, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #9834", "practiceaddress1": "1098 N FRASER ST", "practiceaddress2": null, "practicecity": "GEORGETOWN", "practicestate": "SC", "practicezip9code": 294402849, "telephonenumber": 8435451732, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 33.38501, "longitude": -79.28785, "is_contracted_for_cba": false}, {"provider_id": 20355365, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10235", "practiceaddress1": "901 MAIN AVE", "practiceaddress2": null, "practicecity": "DE PERE", "practicestate": "WI", "practicezip9code": 541151305, "telephonenumber": 9209836153, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 44.45081, "longitude": -88.08472, "is_contracted_for_cba": false}, {"provider_id": 20326121, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ARIZONA CVS STORES LLC", "practicename": "CVS PHARMACY #09217", "practiceaddress1": "10720 W BELL RD", "practiceaddress2": null, "practicecity": "SUN CITY", "practicestate": "AZ", "practicezip9code": 853511073, "telephonenumber": 6239722124, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.6382, "longitude": -112.29042, "is_contracted_for_cba": false}, {"provider_id": 20364119, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #06334", "practiceaddress1": "703 NEWBRIDGE RD", "practiceaddress2": null, "practicecity": "NORTH BELLMORE", "practicestate": "NY", "practicezip9code": 117101613, "telephonenumber": 5164099442, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.70513, "longitude": -73.54447, "is_contracted_for_cba": false}, {"provider_id": 20363969, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6942", "practiceaddress1": "6010 N FIGARDEN DR", "practiceaddress2": null, "practicecity": "FRESNO", "practicestate": "CA", "practicezip9code": 937227922, "telephonenumber": 5592714926, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.82358, "longitude": -119.87036, "is_contracted_for_cba": false}, {"provider_id": 20358659, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2875", "practiceaddress1": "1982 EIGHT MILE RD", "practiceaddress2": null, "practicecity": "CINCINNATI", "practicestate": "OH", "practicezip9code": 452552609, "telephonenumber": 5134744723, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.08731, "longitude": -84.32196, "is_contracted_for_cba": false}, {"provider_id": 20317733, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02011", "practiceaddress1": "100 DUNLOP CIRCLE DR", "practiceaddress2": null, "practicecity": "COLONIAL HEIGHTS", "practicestate": "VA", "practicezip9code": 238341818, "telephonenumber": 8045268002, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.26617, "longitude": -77.40009, "is_contracted_for_cba": false}, {"provider_id": 20319299, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #01569", "practiceaddress1": "450 CHATHAM HEIGHTS RD", "practiceaddress2": null, "practicecity": "FREDERICKSBURG", "practicestate": "VA", "practicezip9code": 224052575, "telephonenumber": 5403733313, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.31517, "longitude": -77.45101, "is_contracted_for_cba": false}, {"provider_id": 20319527, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02343", "practiceaddress1": "5101 DUKE ST", "practiceaddress2": null, "practicecity": "ALEXANDRIA", "practicestate": "VA", "practicezip9code": 223042905, "telephonenumber": 7038237411, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.81221, "longitude": -77.11903, "is_contracted_for_cba": false}, {"provider_id": 20351357, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2697", "practiceaddress1": "9580 KENWOOD RD", "practiceaddress2": null, "practicecity": "BLUE ASH", "practicestate": "OH", "practicezip9code": 452426140, "telephonenumber": 5137914390, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.23161, "longitude": -84.37689, "is_contracted_for_cba": false}, {"provider_id": 20353103, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #6868", "practiceaddress1": "330 W STATE BLVD", "practiceaddress2": null, "practicecity": "FORT WAYNE", "practicestate": "IN", "practicezip9code": 468083135, "telephonenumber": 2604825428, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.0962, "longitude": -85.14582, "is_contracted_for_cba": false}, {"provider_id": 20340797, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "CVS PHARMACY #08680", "practiceaddress1": "2806 OLD US HIGHWAY 231 S", "practiceaddress2": null, "practicecity": "LAFAYETTE", "practicestate": "IN", "practicezip9code": 479092411, "telephonenumber": 7654776666, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.38915, "longitude": -86.90537, "is_contracted_for_cba": false}, {"provider_id": 20354861, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #10347", "practiceaddress1": "901 S BURR ST", "practiceaddress2": null, "practicecity": "MITCHELL", "practicestate": "SD", "practicezip9code": 573014731, "telephonenumber": 6059963179, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 43.70169, "longitude": -98.01865, "is_contracted_for_cba": false}, {"provider_id": 20355347, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "6435 ALIANTE PKWY", "practiceaddress2": null, "practicecity": "NORTH LAS VEGAS", "practicestate": "NV", "practicezip9code": 890843196, "telephonenumber": 7026576508, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 36.27785, "longitude": -115.18044, "is_contracted_for_cba": false}, {"provider_id": 20367191, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "9426 S 700 E", "practiceaddress2": null, "practicecity": "SANDY", "practicestate": "UT", "practicezip9code": 840703460, "telephonenumber": 8013070071, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.58045, "longitude": -111.87231, "is_contracted_for_cba": false}, {"provider_id": 23280331, "acceptsassignement": true, "participationbegindate": 1701993600000, "businessname": "MEGACARE PHARMACY INC", "practicename": "MEGACARE PHARMACY INC", "practiceaddress1": "315 E KINGSBRIDGE RD", "practiceaddress2": null, "practicecity": "BRONX", "practicestate": "NY", "practicezip9code": 104584443, "telephonenumber": 7186845088, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.862472882, "longitude": -73.8938826574, "is_contracted_for_cba": false}, {"provider_id": 20343563, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "LONGS DRUGS #03070", "practiceaddress1": "66-197 KAMEHAMEHA HWY", "practiceaddress2": "STE 1", "practicecity": "HALEIWA", "practicestate": "HI", "practicezip9code": 967121400, "telephonenumber": 8086379393, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 21.59778, "longitude": -158.10302, "is_contracted_for_cba": false}, {"provider_id": 20312477, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 11283", "practiceaddress1": "4025 MERCANTILE DR", "practiceaddress2": "STE 110", "practicecity": "LAKE OSWEGO", "practicestate": "OR", "practicezip9code": 970352518, "telephonenumber": 5033878167, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.4147, "longitude": -122.71723, "is_contracted_for_cba": false}, {"provider_id": 20312471, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "OREGON CVS PHARMACY LLC", "practicename": "CVS PHARMACY # 11392", "practiceaddress1": "1821 NE 33RD AVE", "practiceaddress2": null, "practicecity": "PORTLAND", "practicestate": "OR", "practicezip9code": 972125113, "telephonenumber": 5035356031, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 45.53612, "longitude": -122.63079, "is_contracted_for_cba": false}, {"provider_id": 20319407, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "VIRGINIA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #02169", "practiceaddress1": "10901 W BROAD ST", "practiceaddress2": null, "practicecity": "GLEN ALLEN", "practicestate": "VA", "practicezip9code": 230605935, "telephonenumber": 8049356916, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.64385, "longitude": -77.58521, "is_contracted_for_cba": false}, {"provider_id": 20307905, "acceptsassignement": true, "participationbegindate": 1673568000000, "businessname": "MAJOR PHARMACY CORP", "practicename": "MAJOR PHARMACY CORP.", "practiceaddress1": "7919 37TH AVE", "practiceaddress2": null, "practicecity": "JACKSON HEIGHTS", "practicestate": "NY", "practicezip9code": 113726747, "telephonenumber": 3473965413, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.7494, "longitude": -73.88852, "is_contracted_for_cba": false}, {"provider_id": 20364821, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #7071", "practiceaddress1": "13196 BELLAIRE BLVD", "practiceaddress2": null, "practicecity": "HOUSTON", "practicestate": "TX", "practicezip9code": 770725102, "telephonenumber": 2815304918, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 29.70358, "longitude": -95.61386, "is_contracted_for_cba": false}, {"provider_id": 20313239, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17580", "practiceaddress1": "605 BOSTON POST RD E", "practiceaddress2": null, "practicecity": "MARLBOROUGH", "practicestate": "MA", "practicezip9code": 17523702, "telephonenumber": 5082516958, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.34867, "longitude": -71.50685, "is_contracted_for_cba": false}, {"provider_id": 20314697, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17295", "practiceaddress1": "551 S HOVER ST", "practiceaddress2": null, "practicecity": "LONGMONT", "practicestate": "CO", "practicezip9code": 805017920, "telephonenumber": 7208644394, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.1541, "longitude": -105.13079, "is_contracted_for_cba": false}, {"provider_id": 20313365, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16960", "practiceaddress1": "367 RUSSELL ST", "practiceaddress2": null, "practicecity": "HADLEY", "practicestate": "MA", "practicezip9code": 10359456, "telephonenumber": 4135866681, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.3586, "longitude": -72.5489, "is_contracted_for_cba": false}, {"provider_id": 20359421, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5595", "practiceaddress1": "1617 10TH ST", "practiceaddress2": null, "practicecity": "PORT HURON", "practicestate": "MI", "practicezip9code": 480605844, "telephonenumber": 8109875083, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 42.96678, "longitude": -82.4326, "is_contracted_for_cba": false}, {"provider_id": 20307959, "acceptsassignement": true, "participationbegindate": 1673481600000, "businessname": "TARLANI CORP", "practicename": "TARLANI HEALTHCARE", "practiceaddress1": "2349 HONOLULU AVE", "practiceaddress2": null, "practicecity": "MONTROSE", "practicestate": "CA", "practicezip9code": 910202512, "telephonenumber": 9514655555, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Support Surfaces: Pressure Reducing Beds/Mats/Pads|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Surgical Dressings", "latitude": 34.20602, "longitude": -118.22928, "is_contracted_for_cba": false}, {"provider_id": 20321963, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07566", "practiceaddress1": "8765 HWY 52", "practiceaddress2": null, "practicecity": "ROCKWELL", "practicestate": "NC", "practicezip9code": 281388550, "telephonenumber": 7042792581, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.56193, "longitude": -80.41579, "is_contracted_for_cba": false}, {"provider_id": 20360675, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3423", "practiceaddress1": "1911 S FERRY ST", "practiceaddress2": null, "practicecity": "ANOKA", "practicestate": "MN", "practicezip9code": 553032143, "telephonenumber": 7635760388, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 45.19853, "longitude": -93.39317, "is_contracted_for_cba": false}, {"provider_id": 20400125, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #04823", "practiceaddress1": "901 E PALM VALLEY BLVD", "practiceaddress2": null, "practicecity": "ROUND ROCK", "practicestate": "TX", "practicezip9code": 786643209, "telephonenumber": 5122488742, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 30.51818, "longitude": -97.66982, "is_contracted_for_cba": false}, {"provider_id": 20393039, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5802", "practiceaddress1": "100 E MCGALLIARD RD", "practiceaddress2": null, "practicecity": "MUNCIE", "practicestate": "IN", "practicezip9code": 473031166, "telephonenumber": 7652886171, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 40.2191, "longitude": -85.38621, "is_contracted_for_cba": false}, {"provider_id": 20393033, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #5234", "practiceaddress1": "5435 S KEDZIE AVE", "practiceaddress2": null, "practicecity": "CHICAGO", "practicestate": "IL", "practicezip9code": 606322642, "telephonenumber": 7734367396, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.79397, "longitude": -87.70345, "is_contracted_for_cba": false}, {"provider_id": 20332943, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #18072", "practiceaddress1": "2239 E COOK ST", "practiceaddress2": "STE 101", "practicecity": "SPRINGFIELD", "practicestate": "IL", "practicezip9code": 627031944, "telephonenumber": 2177531956, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.79473, "longitude": -89.62267, "is_contracted_for_cba": false}, {"provider_id": 20407463, "acceptsassignement": false, "participationbegindate": 1613088000000, "businessname": "B7 HEALTH", "practicename": "B7 HEALTH", "practiceaddress1": "2675 E SLAUSON AVE", "practiceaddress2": "STE A", "practicecity": "HUNTINGTON PARK", "practicestate": "CA", "practicezip9code": 902552926, "telephonenumber": 3234877007, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 33.98931, "longitude": -118.22387, "is_contracted_for_cba": false}, {"provider_id": 20407493, "acceptsassignement": true, "participationbegindate": 1612915200000, "businessname": "FLORIDA HOSPITAL HOME INFUSION, LLP", "practicename": "FLORIDA HOSPITAL HOME INFUSION,LLP", "practiceaddress1": "11461 N US HIGHWAY 301", "practiceaddress2": "STE 105", "practicecity": "THONOTOSASSA", "practicestate": "FL", "practicezip9code": 335923541, "telephonenumber": 8134362900, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|External Infusion Pumps and/or Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies", "latitude": 28.0534, "longitude": -82.33203, "is_contracted_for_cba": false}, {"provider_id": 20344379, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO WHOLESALE CORPORATION", "practiceaddress1": "125 BEACON DR", "practiceaddress2": null, "practicecity": "HOLBROOK", "practicestate": "NY", "practicezip9code": 117414309, "telephonenumber": 6312448676, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.77182, "longitude": -73.05147, "is_contracted_for_cba": false}, {"provider_id": 20345183, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "PREFERRED ORTHOTIC AND PROSTHETIC SERVICES, INC", "practicename": "PREFERRED ORTHOTIC AND PROSTHETIC S", "practiceaddress1": "922 S 348TH ST", "practiceaddress2": null, "practicecity": "FEDERAL WAY", "practicestate": "WA", "practicezip9code": 980037021, "telephonenumber": 2539523887, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 47.28995, "longitude": -122.32204, "is_contracted_for_cba": false}, {"provider_id": 20312261, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALASKA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17404", "practiceaddress1": "1801 E PARKS HWY", "practiceaddress2": null, "practicecity": "WASILLA", "practicestate": "AK", "practicezip9code": 996547350, "telephonenumber": 9076317201, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 61.57576, "longitude": -149.40468, "is_contracted_for_cba": false}, {"provider_id": 20312249, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "ALASKA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #17436", "practiceaddress1": "150 W 100TH AVE", "practiceaddress2": null, "practicecity": "ANCHORAGE", "practicestate": "AK", "practicezip9code": 995152673, "telephonenumber": 9072677501, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 61.13037, "longitude": -149.88099, "is_contracted_for_cba": false}, {"provider_id": 20331743, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "WOODWARD DETROIT CVS LLC", "practicename": "CVS PHARMACY #08307", "practiceaddress1": "1037 WOODWARD AVE", "practiceaddress2": null, "practicecity": "DETROIT", "practicestate": "MI", "practicezip9code": 482261905, "telephonenumber": 3139631007, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.33227, "longitude": -83.04737, "is_contracted_for_cba": false}, {"provider_id": 20393897, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "340 W WASHINGTON ST", "practiceaddress2": null, "practicecity": "BRAINERD", "practicestate": "MN", "practicezip9code": 564012924, "telephonenumber": 2188250027, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 46.35811, "longitude": -94.21607, "is_contracted_for_cba": false}, {"provider_id": 20393795, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN CO", "practiceaddress1": "100 12TH AVE NE", "practiceaddress2": null, "practicecity": "NORMAN", "practicestate": "OK", "practicezip9code": 730715235, "telephonenumber": 4053292314, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.22218, "longitude": -97.42369, "is_contracted_for_cba": false}, {"provider_id": 20308097, "acceptsassignement": true, "participationbegindate": 1672876800000, "businessname": "S D AND B MEDICAL INC.", "practicename": "S D AND B MEDICAL INC.", "practiceaddress1": "780 LYNNHAVEN PKWY", "practiceaddress2": "STE 400", "practicecity": "VIRGINIA BEACH", "practicestate": "VA", "practicezip9code": 234527332, "telephonenumber": 7576157685, "specialitieslist": null, "providertypelist": "CERTIFIED ORTH/PROS/PEDORTHIST", "supplieslist": "Orthoses: Custom Fabricated", "latitude": 36.8154919226, "longitude": -76.0658837185, "is_contracted_for_cba": false}, {"provider_id": 20407571, "acceptsassignement": true, "participationbegindate": 1612396800000, "businessname": "R2 MEDICAL", "practicename": "R2 MEDICAL", "practiceaddress1": "2136 S RICHARDS ST", "practiceaddress2": null, "practicecity": "SALT LAKE CITY", "practicestate": "UT", "practicezip9code": 841152606, "telephonenumber": 8013088992, "specialitieslist": "Medical Supply Company Other", "providertypelist": null, "supplieslist": "Commodes, Urinals, Bedpans|Heat & Cold Applications|Pneumatic Compression Devices and/or Supplies|Canes and/or Crutches|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf", "latitude": 40.72461, "longitude": -111.89291, "is_contracted_for_cba": false}, {"provider_id": 20407589, "acceptsassignement": true, "participationbegindate": 1612310400000, "businessname": "MANNINGTON PHARMACY", "practicename": "MANNINGTON PHARMACY", "practiceaddress1": "720 E MAIN ST", "practiceaddress2": null, "practicecity": "MANNINGTON", "practicestate": "WV", "practicezip9code": 265821259, "telephonenumber": 3049863811, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Blood Glucose Monitors/Supplies (Non-Mail Order)|Nebulizer Equipment and/or Supplies", "latitude": 39.52532, "longitude": -80.33674, "is_contracted_for_cba": false}, {"provider_id": 20360663, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3363", "practiceaddress1": "1505 E 86TH ST", "practiceaddress2": null, "practicecity": "INDIANAPOLIS", "practicestate": "IN", "practicezip9code": 462402392, "telephonenumber": 3172549206, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.91243, "longitude": -86.13246, "is_contracted_for_cba": false}, {"provider_id": 20332805, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #16279", "practiceaddress1": "2621 W SCHAUMBURG RD", "practiceaddress2": null, "practicecity": "SCHAUMBURG", "practicestate": "IL", "practicezip9code": 601943894, "telephonenumber": 8477981238, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.02959, "longitude": -88.15395, "is_contracted_for_cba": false}, {"provider_id": 20333843, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY # 10607", "practiceaddress1": "106 WATTERS DR", "practiceaddress2": null, "practicecity": "DWIGHT", "practicestate": "IL", "practicezip9code": 604202200, "telephonenumber": 8155842140, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.09176, "longitude": -88.44276, "is_contracted_for_cba": false}, {"provider_id": 20318153, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "SHANDAR PHARMACY INC.", "practicename": "SHANDAR PHARMACY INC", "practiceaddress1": "3064 CONEY ISLAND AVE", "practiceaddress2": "# STORE4", "practicecity": "BROOKLYN", "practicestate": "NY", "practicezip9code": 112356475, "telephonenumber": 7186180540, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.58141, "longitude": -73.96002, "is_contracted_for_cba": false}, {"provider_id": 20313377, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17566", "practiceaddress1": "1021 S HIGHLINE PL", "practiceaddress2": null, "practicecity": "SIOUX FALLS", "practicestate": "SD", "practicezip9code": 571101000, "telephonenumber": 6053335601, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 43.53774, "longitude": -96.65469, "is_contracted_for_cba": false}, {"provider_id": 20313251, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17124", "practiceaddress1": "6100 PASEO DEL NORTE NE", "practiceaddress2": null, "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871131512, "telephonenumber": 5053460136, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.17431, "longitude": -106.57718, "is_contracted_for_cba": false}, {"provider_id": 20344205, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO PHARMACY #1025", "practiceaddress1": "245 STAFFORD PARK BLVD", "practiceaddress2": null, "practicecity": "STAFFORD TOWNSHIP", "practicestate": "NJ", "practicezip9code": 80502734, "telephonenumber": 6092422011, "specialitieslist": "Medical Supply Company Other|Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 39.71181, "longitude": -74.28327, "is_contracted_for_cba": false}, {"provider_id": 20312945, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17263", "practiceaddress1": "2171 PRAIRIE CENTER PKWY", "practiceaddress2": null, "practicecity": "BRIGHTON", "practicestate": "CO", "practicezip9code": 806017000, "telephonenumber": 3032199056, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.95418, "longitude": -104.77823, "is_contracted_for_cba": false}, {"provider_id": 20312819, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17116", "practiceaddress1": "10001 COMMONS ST", "practiceaddress2": null, "practicecity": "LONE TREE", "practicestate": "CO", "practicezip9code": 801245547, "telephonenumber": 3032091852, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.53801, "longitude": -104.87845, "is_contracted_for_cba": false}, {"provider_id": 20331833, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "EVERGREEN PROSTHETICS AND ORTHOTICS LLC", "practicename": "EVERGREEN PROSTHETICS & ORTHOTICS L", "practiceaddress1": "8614 E MILL PLAIN BLVD", "practiceaddress2": "STE 110", "practicecity": "VANCOUVER", "practicestate": "WA", "practicezip9code": 986642058, "telephonenumber": 3602132088, "specialitieslist": "Orthotic Personnel|Prosthetic Personnel", "providertypelist": null, "supplieslist": "Orthoses: Custom Fabricated|Orthoses: Prefabricated (Non-Custom Fabricated)|Orthoses: Off-The-Shelf|Breast Prostheses and/or Accessories|Limb Prostheses|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom|Lymphedema Compression Treatment Items", "latitude": 45.62326, "longitude": -122.58444, "is_contracted_for_cba": false}, {"provider_id": 20407709, "acceptsassignement": true, "participationbegindate": 1612137600000, "businessname": "ITALY FAMILY PHARMACY INC", "practicename": "ITALY FAMILY PHARMACY INC", "practiceaddress1": "102 E DANIELDALE ROAD", "practiceaddress2": "STE 100", "practicecity": "DUNCANVILLE", "practicestate": "TX", "practicezip9code": 75137, "telephonenumber": 4695132499, "specialitieslist": "Medical Supply Company Other|Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Insulin Infusion Pumps and/or Supplies|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Penile Pumps|Breast Prostheses and/or Accessories|Neurostimulators and/or Supplies|Ostomy Supplies|Tracheotomy Supplies|Urological Supplies|Voice Prosthetics|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 32.83725, "longitude": -96.94458, "is_contracted_for_cba": false}, {"provider_id": 20344451, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "COSTCO WHOLESALE CORPORATION", "practicename": "COSTCO WHOLESALE CORPORATION", "practiceaddress1": "1 INDUSTRIAL LN", "practiceaddress2": null, "practicecity": "NEW ROCHELLE", "practicestate": "NY", "practicezip9code": 108051203, "telephonenumber": 9146360291, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs", "latitude": 40.89717, "longitude": -73.79364, "is_contracted_for_cba": false}, {"provider_id": 20345237, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #06319", "practiceaddress1": "2902 PALMER HWY", "practiceaddress2": null, "practicecity": "TEXAS CITY", "practicestate": "TX", "practicezip9code": 775906815, "telephonenumber": 4099453426, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.39539, "longitude": -94.93809, "is_contracted_for_cba": false}, {"provider_id": 20333159, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #18009", "practiceaddress1": "5720 N BELT W", "practiceaddress2": null, "practicecity": "BELLEVILLE", "practicestate": "IL", "practicezip9code": 622264661, "telephonenumber": 6182358803, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.5416, "longitude": -90.03523, "is_contracted_for_cba": false}, {"provider_id": 20357975, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREEN #5149", "practiceaddress1": "1600 W ROOSEVELT RD", "practiceaddress2": null, "practicecity": "BROADVIEW", "practicestate": "IL", "practicezip9code": 601554024, "telephonenumber": 7083435323, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.86398, "longitude": -87.85243, "is_contracted_for_cba": false}, {"provider_id": 20334431, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10784", "practiceaddress1": "3770 SHERIDAN BLVD", "practiceaddress2": null, "practicecity": "DENVER", "practicestate": "CO", "practicezip9code": 802122052, "telephonenumber": 7208558477, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.76844, "longitude": -105.05312, "is_contracted_for_cba": false}, {"provider_id": 20314205, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16889", "practiceaddress1": "3201 PRESTON RD", "practiceaddress2": null, "practicecity": "FRISCO", "practicestate": "TX", "practicezip9code": 750349446, "telephonenumber": 9726686909, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.10435, "longitude": -96.80589, "is_contracted_for_cba": false}, {"provider_id": 20339339, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #02138", "practiceaddress1": "8 PILGRIM HILL RD", "practiceaddress2": null, "practicecity": "PLYMOUTH", "practicestate": "MA", "practicezip9code": 23606123, "telephonenumber": 5087471276, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.94855, "longitude": -70.6856, "is_contracted_for_cba": false}, {"provider_id": 20314187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 17452", "practiceaddress1": "6931 FM 1960 RD E", "practiceaddress2": null, "practicecity": "HUMBLE", "practicestate": "TX", "practicezip9code": 773462705, "telephonenumber": 2813182238, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.99885, "longitude": -95.17229, "is_contracted_for_cba": false}, {"provider_id": 20333135, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "750 S RANDALL RD", "practiceaddress2": null, "practicecity": "ALGONQUIN", "practicestate": "IL", "practicezip9code": 601025915, "telephonenumber": 8474585341, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.165, "longitude": -88.33552, "is_contracted_for_cba": false}, {"provider_id": 20318135, "acceptsassignement": false, "participationbegindate": 1672531200000, "businessname": "YELLOWSTONE PHARMACY OF FORSYTH LLC", "practicename": "YELLOWSTONE PHARMACY OF FORSYTH", "practiceaddress1": "1025 MAIN ST", "practiceaddress2": null, "practicecity": "FORSYTH", "practicestate": "MT", "practicezip9code": 593279039, "telephonenumber": 4063462134, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)|Diabetic Shoes and Inserts|Diabetic Shoes/Inserts - Custom", "latitude": 46.26634, "longitude": -106.67791, "is_contracted_for_cba": false}, {"provider_id": 20407841, "acceptsassignement": false, "participationbegindate": 1612137600000, "businessname": "AEROCARE HOLDINGS LLC", "practicename": "AEROCARE HOLDINGS LLC", "practiceaddress1": "512 YAMPA AVE", "practiceaddress2": null, "practicecity": "CRAIG", "practicestate": "CO", "practicezip9code": 816252612, "telephonenumber": 9708785883, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 40.51518, "longitude": -107.54741, "is_contracted_for_cba": false}, {"provider_id": 20407811, "acceptsassignement": false, "participationbegindate": 1612137600000, "businessname": "AEROCARE HOLDINGS LLC", "practicename": "AEROCARE", "practiceaddress1": "1535 G ST", "practiceaddress2": null, "practicecity": "SALIDA", "practicestate": "CO", "practicezip9code": 812012325, "telephonenumber": 7195393406, "specialitieslist": "Medical Supply Company Other", "providertypelist": "OXYGEN & EQUIPMENT", "supplieslist": "Commodes, Urinals, Bedpans|Continuous Passive Motion (CPM) Devices|Blood Glucose Monitors/Supplies (Non-Mail Order)|Gastric Suction Pumps|Heat & Cold Applications|Hospital Beds (Electric)|Hospital Beds (Manual)|Infrared Heating Pads Systems and/or Supplies|External Infusion Pumps and/or Supplies|Negative Pressure Wound Therapy Pumps/Supplies|Neuromuscular Elect Stimulators (NMES)/Supplies|Osteogenesis Stimulators|Pneumatic Compression Devices and/or Supplies|Speech Generating Devices|Support Surfaces: Pressure Reducing Beds/Mats/Pads|Traction Equipment|(TENS) Transcutaneous Electrical Nerve Stimulators and/or Supplies|Ultraviolet Light Devices and/or Supplies|Canes and/or Crutches|Patient Lifts|Power Operated Vehicles (Scooters)|Seat Lift Mechanisms|Walkers|Wheelchairs (Standard Manual)|Wheelchairs (Standard Manual Related Accessories)|Wheelchairs (Standard Power)|Wheelchairs (Standard Power Related Accessories)|Wheelchair Seating/Cushions|Orthoses: Off-The-Shelf|Ostomy Supplies|Somatic Prostheses|Tracheotomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Continuous Positive Airway Pressure (CPAP) Devices|High Freq Chest Wall Oscillation Devices/Supplies|Intermittent Positive Pressure Breathing IPPB DEV|Intrapulmonary Percussive Ventilation Devices|Mechanical In-Exsufflation Devices|Nebulizer Equipment and/or Supplies|Oxygen Equipment and/or Supplies|Respiratory Assist Devices|Respiratory Suction Pumps|Ventilators Accessories and/or Supplies|Surgical Dressings", "latitude": 38.52473, "longitude": -106.00471, "is_contracted_for_cba": false}, {"provider_id": 20342093, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #03932", "practiceaddress1": "150 S MAIN ST", "practiceaddress2": null, "practicecity": "FORT BRAGG", "practicestate": "CA", "practicezip9code": 954374205, "telephonenumber": 7079610464, "specialitieslist": "Medical Supply Company Other|Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 39.44081, "longitude": -123.80577, "is_contracted_for_cba": false}, {"provider_id": 20313149, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16584", "practiceaddress1": "1 MYSTIC VIEW RD", "practiceaddress2": null, "practicecity": "EVERETT", "practicestate": "MA", "practicezip9code": 21492428, "telephonenumber": 6174200001, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.40213, "longitude": -71.07002, "is_contracted_for_cba": false}, {"provider_id": 20314145, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16866", "practiceaddress1": "1801 HWY 287 N", "practiceaddress2": null, "practicecity": "MANSFIELD", "practicestate": "TX", "practicezip9code": 760637533, "telephonenumber": 8174530259, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.59276, "longitude": -97.14429, "is_contracted_for_cba": false}, {"provider_id": 20331995, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 10881", "practiceaddress1": "35 ARTA DR", "practiceaddress2": null, "practicecity": "WESTLAKE", "practicestate": "TX", "practicezip9code": 762622013, "telephonenumber": 8174917364, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.03476, "longitude": -97.24941, "is_contracted_for_cba": false}, {"provider_id": 20341871, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09548", "practiceaddress1": "2501 ANTHEM VILLAGE DR", "practiceaddress2": null, "practicecity": "HENDERSON", "practicestate": "NV", "practicezip9code": 890525504, "telephonenumber": 7029904613, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.97988, "longitude": -115.09889, "is_contracted_for_cba": false}, {"provider_id": 20341559, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #03069", "practiceaddress1": "451 S REINO RD", "practiceaddress2": null, "practicecity": "NEWBURY PARK", "practicestate": "CA", "practicezip9code": 913204267, "telephonenumber": 8054994006, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 34.16815, "longitude": -118.95634, "is_contracted_for_cba": false}, {"provider_id": 20333147, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "CVS PHARMACY #18077", "practiceaddress1": "1701 E EMPIRE ST", "practiceaddress2": null, "practicecity": "BLOOMINGTON", "practicestate": "IL", "practicezip9code": 617043532, "telephonenumber": 3096627004, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 40.48799, "longitude": -88.9509, "is_contracted_for_cba": false}, {"provider_id": 20322137, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03593", "practiceaddress1": "2501 W ROOSEVELT BLVD", "practiceaddress2": null, "practicecity": "MONROE", "practicestate": "NC", "practicezip9code": 281105124, "telephonenumber": 7042831506, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.01437, "longitude": -80.56998, "is_contracted_for_cba": false}, {"provider_id": 20320727, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07539", "practiceaddress1": "1924 STATESVILLE BLVD", "practiceaddress2": null, "practicecity": "SALISBURY", "practicestate": "NC", "practicezip9code": 281442035, "telephonenumber": 7046361616, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.69374, "longitude": -80.51202, "is_contracted_for_cba": false}, {"provider_id": 20320925, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #07008", "practiceaddress1": "333 W MILLS ST", "practiceaddress2": null, "practicecity": "COLUMBUS", "practicestate": "NC", "practicezip9code": 287228404, "telephonenumber": 8288946352, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.25421, "longitude": -82.19534, "is_contracted_for_cba": false}, {"provider_id": 23283355, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HOOK- SUPERX, L.L.C..", "practicename": "HOOK- SUPERX, L.L.C.", "practiceaddress1": "436 E WASHINGTON BLVD", "practiceaddress2": "STE P", "practicecity": "FORT WAYNE", "practicestate": "IN", "practicezip9code": 468023210, "telephonenumber": 2602345453, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 41.0779151186, "longitude": -85.1327398443, "is_contracted_for_cba": false}, {"provider_id": 20332685, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #10947", "practiceaddress1": "1910 W STATE HIGHWAY 46", "practiceaddress2": null, "practicecity": "NEW BRAUNFELS", "practicestate": "TX", "practicezip9code": 781325245, "telephonenumber": 8306209926, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.72035, "longitude": -98.16807, "is_contracted_for_cba": false}, {"provider_id": 20315003, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #17401", "practiceaddress1": "2025 N CENTRAL EXPY", "practiceaddress2": null, "practicecity": "MCKINNEY", "practicestate": "TX", "practicezip9code": 750702911, "telephonenumber": 4695254975, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 33.17994, "longitude": -96.63934, "is_contracted_for_cba": false}, {"provider_id": 20314943, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 17400", "practiceaddress1": "39739 LBJ FWY", "practiceaddress2": null, "practicecity": "DALLAS", "practicestate": "TX", "practicezip9code": 752373560, "telephonenumber": 4693413921, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.65365, "longitude": -96.86655, "is_contracted_for_cba": false}, {"provider_id": 20320631, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "NORTH CAROLINA CVS PHARMACY LLC", "practicename": "CVS PHARMACY #03319", "practiceaddress1": "9915 PARK CEDAR DR", "practiceaddress2": null, "practicecity": "CHARLOTTE", "practicestate": "NC", "practicezip9code": 282108905, "telephonenumber": 7045443263, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.09404, "longitude": -80.86595, "is_contracted_for_cba": false}, {"provider_id": 20333237, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "HIGHLAND PARK CVS LLC", "practicename": "HIGHLAND PARK CVS LLC", "practiceaddress1": "3100 MADISON AVE", "practiceaddress2": null, "practicecity": "GRANITE CITY", "practicestate": "IL", "practicezip9code": 620403651, "telephonenumber": 6184510521, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.71799, "longitude": -90.12312, "is_contracted_for_cba": false}, {"provider_id": 23282959, "acceptsassignement": true, "participationbegindate": 1611360000000, "businessname": "ELLSWORTH FOOT AND ANKLE CLINIC", "practicename": "ELLSWORTH FOOT AND ANKLE CLINIC", "practiceaddress1": "227 N WESTWOOD BLVD", "practiceaddress2": null, "practicecity": "PRICE", "practicestate": "UT", "practicezip9code": 845015500, "telephonenumber": 8012536886, "specialitieslist": null, "providertypelist": "NURSE PRACTITIONER|PHYSICIAN \u2013 PODIATRY", "supplieslist": "Heat & Cold Applications|Negative Pressure Wound Therapy Pumps/Supplies|Surgical Dressings|Lymphedema Compression Treatment Items", "latitude": 39.6037740491, "longitude": -110.8343384465, "is_contracted_for_cba": false}, {"provider_id": 20341133, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "LONG'S DRUGS #09952", "practiceaddress1": "645 ALEKA LOOP", "practiceaddress2": null, "practicecity": "KAPAA", "practicestate": "HI", "practicezip9code": 967462099, "telephonenumber": 8088224918, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 22.05197, "longitude": -159.33193, "is_contracted_for_cba": false}, {"provider_id": 20363357, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #2524", "practiceaddress1": "337 75TH AVE", "practiceaddress2": null, "practicecity": "ST PETE BEACH", "practicestate": "FL", "practicezip9code": 337061829, "telephonenumber": 7273677657, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.74325, "longitude": -82.74985, "is_contracted_for_cba": false}, {"provider_id": 20358269, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4642", "practiceaddress1": "5755 20TH ST", "practiceaddress2": null, "practicecity": "VERO BEACH", "practicestate": "FL", "practicezip9code": 329664636, "telephonenumber": 7727781772, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 27.63821, "longitude": -80.44607, "is_contracted_for_cba": false}, {"provider_id": 20358107, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4651", "practiceaddress1": "10236 COORS BYP NW", "practiceaddress2": null, "practicecity": "ALBUQUERQUE", "practicestate": "NM", "practicezip9code": 871144088, "telephonenumber": 5058981730, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.2079, "longitude": -106.65847, "is_contracted_for_cba": false}, {"provider_id": 20358209, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4187", "practiceaddress1": "1941 SOUTHERN BLVD SE", "practiceaddress2": null, "practicecity": "RIO RANCHO", "practicestate": "NM", "practicezip9code": 871243510, "telephonenumber": 5058918186, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 35.24152, "longitude": -106.69812, "is_contracted_for_cba": false}, {"provider_id": 20437661, "acceptsassignement": true, "participationbegindate": 1546300800000, "businessname": "GERMAN DOBSON CVS LLC", "practicename": "GERMAN DOBSON CVS LLC", "practiceaddress1": "4040 N ORACLE RD", "practiceaddress2": null, "practicecity": "TUCSON", "practicestate": "AZ", "practicezip9code": 857052720, "telephonenumber": 5202021502, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 32.28012, "longitude": -110.97795, "is_contracted_for_cba": false}, {"provider_id": 20341187, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09713", "practiceaddress1": "1043 EMERALD BAY RD", "practiceaddress2": null, "practicecity": "SOUTH LAKE TAHOE", "practicestate": "CA", "practicezip9code": 961506210, "telephonenumber": 5305441445, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 38.91064, "longitude": -120.00296, "is_contracted_for_cba": false}, {"provider_id": 20341229, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY # 09975", "practiceaddress1": "4400 COFFEE RD", "practiceaddress2": null, "practicecity": "BAKERSFIELD", "practicestate": "CA", "practicezip9code": 933085032, "telephonenumber": 6615881060, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 35.39771, "longitude": -119.09211, "is_contracted_for_cba": false}, {"provider_id": 20314241, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #16836", "practiceaddress1": "3909 E 42ND ST", "practiceaddress2": null, "practicecity": "ODESSA", "practicestate": "TX", "practicezip9code": 797625939, "telephonenumber": 4323661913, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 31.89155, "longitude": -102.3434, "is_contracted_for_cba": false}, {"provider_id": 20361599, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #3129", "practiceaddress1": "6201 STELLHORN RD", "practiceaddress2": null, "practicecity": "FORT WAYNE", "practicestate": "IN", "practicezip9code": 468155349, "telephonenumber": 2604850755, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.12198, "longitude": -85.06515, "is_contracted_for_cba": false}, {"provider_id": 20358257, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #274", "practiceaddress1": "3822 PAXTON AVE", "practiceaddress2": null, "practicecity": "CINCINNATI", "practicestate": "OH", "practicezip9code": 452092399, "telephonenumber": 5138714615, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 39.1472, "longitude": -84.42866, "is_contracted_for_cba": false}, {"provider_id": 20358233, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #07693", "practiceaddress1": "225 N SADDLE CREEK RD", "practiceaddress2": null, "practicecity": "OMAHA", "practicestate": "NE", "practicezip9code": 681312228, "telephonenumber": 4025511797, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.26087, "longitude": -95.98035, "is_contracted_for_cba": false}, {"provider_id": 20362889, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #4668", "practiceaddress1": "1003 N MAIN ST", "practiceaddress2": null, "practicecity": "CROWN POINT", "practicestate": "IN", "practicezip9code": 463072712, "telephonenumber": 2196636669, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 41.42864, "longitude": -87.3646, "is_contracted_for_cba": false}, {"provider_id": 20333321, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY #11067", "practiceaddress1": "2735 SIENNA PKWY", "practiceaddress2": null, "practicecity": "MISSOURI CITY", "practicestate": "TX", "practicezip9code": 77459, "telephonenumber": 4017651500, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 29.49349, "longitude": -95.51926, "is_contracted_for_cba": false}, {"provider_id": 20384513, "acceptsassignement": true, "participationbegindate": 1646092800000, "businessname": "WALGREEN CO", "practicename": "WALGREENS #00700", "practiceaddress1": "CARR 14 KM 3.7", "practiceaddress2": "CENTRO COMERCIAL PONCE SUPER CENTER", "practicecity": "PONCE", "practicestate": "PR", "practicezip9code": 7164279, "telephonenumber": 7877094591, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Epoetin|Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Blood Glucose Monitors/Supplies (Non-Mail Order)", "latitude": 18.01061, "longitude": -66.5868, "is_contracted_for_cba": false}, {"provider_id": 20341973, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "LONGS DRUG STORES CALIFORNIA LLC", "practicename": "CVS PHARMACY #09397", "practiceaddress1": "4405 1ST ST", "practiceaddress2": null, "practicecity": "LIVERMORE", "practicestate": "CA", "practicezip9code": 945514915, "telephonenumber": 9253738124, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 37.69748, "longitude": -121.74349, "is_contracted_for_cba": false}, {"provider_id": 20315681, "acceptsassignement": true, "participationbegindate": 1672531200000, "businessname": "CVS PHARMACY INC", "practicename": "CVS PHARMACY # 00765", "practiceaddress1": "399 MAIN STREET", "practiceaddress2": null, "practicecity": "SOUTHBRIDGE", "practicestate": "MA", "practicezip9code": 15503728, "telephonenumber": 5087650646, "specialitieslist": "Pharmacy", "providertypelist": null, "supplieslist": "Immunosuppressive Drugs|Infusion Drugs|Nebulizer Drugs|Oral Anticancer Drugs|Oral Antiemetic Drugs|Commodes, Urinals, Bedpans|Blood Glucose Monitors/Supplies (Non-Mail Order)|Blood Glucose Monitors/Supplies (Mail Order)|Heat & Cold Applications|Canes and/or Crutches|Walkers|Ostomy Supplies|Urological Supplies|Enteral Nutrients|Enteral Equipment and/or Supplies|Parenteral Nutrients|Parenteral Equipment and/or Supplies|Nebulizer Equipment and/or Supplies|Surgical Dressings", "latitude": 42.07625, "longitude": -72.03635, "is_contracted_for_cba": false}], "stage_runningstate": "executed", "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": "{}"}}, {"_id": "6781cddd8402090cd8fff5cd", "mode": "staged", "originalfile": "/FileStore/platform/uploadedSourceFiles/Medical-Equipment-Suppliers.csv", "in": ["6781cddd8402090cd8fff5cc"], "out": [], "is_streaming": false, "valid": false, "is_predefined": false, "cache": false, "name": "acceptancetrends_AutoML", "comment": "", "pipeline_id": "6781cddc8402090cd8fff5c8", "sub_type": "Automl", "stage_type": "ml", "mlCategory": "Classification", "stage_attributes": {"model_type": "classification", "label": "acceptsassignement", "optimizeBy": "accuracy", "features": ["provider_id", "practicezip9code", "telephonenumber", "latitude", "longitude", "is_contracted_for_cba", "participationbegindate_dayofmonth", "participationbegindate_month", "participationbegindate_year", "businessname_stringindexer", "practicename_stringindexer", "practiceaddress1_stringindexer", "practiceaddress2_stringindexer", "practicecity_stringindexer", "practicestate_stringindexer", "specialitieslist_stringindexer", "providertypelist_stringindexer", "supplieslist_stringindexer"], "percentage": "60", "executionTime": 10, "sampling_value": "none", "sampling": "1", "run_id": "", "server_url": "/nexusMax/NexusMaxPlatform/uploads/platform/"}, "status": "new", "position": {"x": 187, "y": 160}, "shape_attributes": {"image": {"refWidth": "100%", "refHeight": "100%", "xlinkHref": "assets/svg/ml-engine/classification.svg"}, "label": {"textVerticalAnchor": "top", "textAnchor": "middle", "refX": "50%", "refY": "100%", "refY2": 10, "fontSize": 14, "fill": "#333333", "type": "aml", "text": "Classification-AutoML", "slug": "auto-ml", "fontFamily": "Roboto Condensed", "fontWeight": "Normal"}, "root": {"dataTooltipPosition": "bottom", "dataTooltipPositionSelector": ".joint-stencil", "mode": "auto"}, "body": {"fill": "transparent", "stroke": "#4295d1", "strokeWidth": 2, "strokeDasharray": "0"}, "dbValues": {"model_type": "classification", "label": "acceptsassignement", "optimizeBy": "", "features": ["provider_id", "practicezip9code", "telephonenumber", "latitude", "longitude", "is_contracted_for_cba", "participationbegindate_dayofmonth", "participationbegindate_month", "participationbegindate_year", "businessname_stringindexer", "practicename_stringindexer", "practiceaddress1_stringindexer", "practiceaddress2_stringindexer", "practicecity_stringindexer", "practicestate_stringindexer", "specialitieslist_stringindexer", "providertypelist_stringindexer", "supplieslist_stringindexer"], "percentage": "60", "executionTime": 10, "sampling_value": "over", "sampling": "1", "run_id": "26812be20af24c8a8be9358f2b1776f1", "server_url": "/nexusMax/NexusMaxPlatform/uploads/platform/"}, "_id": "6781cddd8402090cd8fff5cd"}, "shape_size": {"width": 60, "height": 60}, "shape_type": "standard.Image", "user_id": "7b254440-ce6b-4cbe-9a6b-9ca33491250a", "original_schema": [{"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff636", "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": "0"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff637", "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": "1"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff638", "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": "2"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff639", "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": "3"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff63a", "field": "latitude", "alias": "latitude", "type": "real", "position": "4"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff63b", "field": "longitude", "alias": "longitude", "type": "real", "position": "5"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff63c", "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": "6"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff63d", "field": "participationbegindate_dayofmonth", "alias": "participationbegindate_dayofmonth", "type": "numeric", "position": "7", "generated": "true"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff63e", "field": "participationbegindate_month", "alias": "participationbegindate_month", "type": "numeric", "position": "8", "generated": "true"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff63f", "field": "participationbegindate_year", "alias": "participationbegindate_year", "type": "numeric", "position": "9", "generated": "true"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff640", "field": "businessname_stringindexer", "alias": "businessname_stringindexer", "type": "real", "position": "10"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff641", "field": "practicename_stringindexer", "alias": "practicename_stringindexer", "type": "real", "position": "11"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff642", "field": "practiceaddress1_stringindexer", "alias": "practiceaddress1_stringindexer", "type": "real", "position": "12"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff643", "field": "practiceaddress2_stringindexer", "alias": "practiceaddress2_stringindexer", "type": "real", "position": "13"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff644", "field": "practicecity_stringindexer", "alias": "practicecity_stringindexer", "type": "real", "position": "14"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff645", "field": "practicestate_stringindexer", "alias": "practicestate_stringindexer", "type": "real", "position": "15"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff646", "field": "specialitieslist_stringindexer", "alias": "specialitieslist_stringindexer", "type": "real", "position": "16"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff647", "field": "providertypelist_stringindexer", "alias": "providertypelist_stringindexer", "type": "real", "position": "17"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff648", "field": "supplieslist_stringindexer", "alias": "supplieslist_stringindexer", "type": "real", "position": "18"}], "actual_schema": [{"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff625", "field": "provider_id", "alias": "provider_id", "type": "numeric", "position": "0"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff626", "field": "acceptsassignement", "alias": "acceptsassignement", "type": "numeric", "position": "1"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff627", "field": "participationbegindate", "alias": "participationbegindate", "type": "numeric", "position": "2"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff628", "field": "businessname", "alias": "businessname", "type": "String", "position": "3"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff629", "field": "practicename", "alias": "practicename", "type": "String", "position": "4"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff62a", "field": "practiceaddress1", "alias": "practiceaddress1", "type": "String", "position": "5"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff62b", "field": "practiceaddress2", "alias": "practiceaddress2", "type": "String", "position": "6"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff62c", "field": "practicecity", "alias": "practicecity", "type": "String", "position": "7"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff62d", "field": "practicestate", "alias": "practicestate", "type": "String", "position": "8"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff62e", "field": "practicezip9code", "alias": "practicezip9code", "type": "numeric", "position": "9"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff62f", "field": "telephonenumber", "alias": "telephonenumber", "type": "numeric", "position": "10"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff630", "field": "specialitieslist", "alias": "specialitieslist", "type": "String", "position": "11"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff631", "field": "providertypelist", "alias": "providertypelist", "type": "String", "position": "12"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff632", "field": "supplieslist", "alias": "supplieslist", "type": "String", "position": "13"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff633", "field": "latitude", "alias": "latitude", "type": "real", "position": "14"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff634", "field": "longitude", "alias": "longitude", "type": "real", "position": "15"}, {"checked": true, "inherited": true, "is_categorical": false, "bad_values": "", "nullable": "true", "_id": "6781ce678402090cd8fff635", "field": "is_contracted_for_cba", "alias": "is_contracted_for_cba", "type": "numeric", "position": "16"}], "selected_schema": [], "created_at": "2025-01-11 01:48:13.007000", "originalcount": 59566, "samplecount": 5929, "samplefile": "/FileStore/platform/sampleData/6781cddd8402090cd8fff5cb/part-00000-762f6ec5-acbf-46af-bfb5-62cf2c0fe966-c000.csv", "joinSchema": [], "updated_at": "2025-01-16 03:02:47.535000", "__v": 0, "after_run": {"baseType": "hdfs", "notify": "True", "pipeline_type": "simple", "retrain": "0", "schedule": "0", "scheduleInfo": {}}}]